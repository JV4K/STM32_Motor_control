
Servo_Controller_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e70  08003e70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e70  08003e70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000010  08003e88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003e88  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b317  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002051  00000000  00000000  0002b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017976  00000000  00000000  0002e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d413  00000000  00000000  000462a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089360  00000000  00000000  000536b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dca19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  000dca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e34 	.word	0x08003e34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003e34 	.word	0x08003e34

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2iz>:
 8000d64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30f      	bcc.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d90d      	bls.n	8000d94 <__aeabi_f2iz+0x30>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	bf18      	it	ne
 8000d8a:	4240      	negne	r0, r0
 8000d8c:	4770      	bx	lr
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	4770      	bx	lr
 8000d94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d98:	d101      	bne.n	8000d9e <__aeabi_f2iz+0x3a>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d105      	bne.n	8000daa <__aeabi_f2iz+0x46>
 8000d9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr

08000db0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <MX_ADC1_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000dda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000dee:	f000 ffbb 	bl	8001d68 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000df8:	f000 faa0 	bl	800133c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e04:	2307      	movs	r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_ADC1_Init+0x74>)
 8000e0e:	f001 f883 	bl	8001f18 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e18:	f000 fa90 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000002c 	.word	0x2000002c
 8000e28:	40012400 	.word	0x40012400

08000e2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_ADC_MspInit+0x6c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d121      	bne.n	8000e90 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_ADC_MspInit+0x70>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_ADC_MspInit+0x70>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_ADC_MspInit+0x70>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_ADC_MspInit+0x70>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_ADC_MspInit+0x70>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_ADC_MspInit+0x70>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_ADC_MspInit+0x74>)
 8000e8c:	f001 fa8c 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010c00 	.word	0x40010c00
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <EncoderPosition>:
		enc->CurRots--;
	else
		enc->CurRots++;
}

void EncoderPosition(volatile ENCODER *enc) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	enc->CntValUint = enc->htim->Instance->CNT;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	80da      	strh	r2, [r3, #6]
	enc->CntValInt = (int16_t) enc->CntValUint;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	88db      	ldrh	r3, [r3, #6]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	811a      	strh	r2, [r3, #8]
	if (enc->CntValInt < -enc->CPR) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	891b      	ldrh	r3, [r3, #8]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	425b      	negs	r3, r3
 8000eda:	429a      	cmp	r2, r3
 8000edc:	da0a      	bge.n	8000ef4 <EncoderPosition+0x4c>
		enc->htim->Instance->CNT = 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
		enc->CurRots--;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	e011      	b.n	8000f18 <EncoderPosition+0x70>
	} else {
		if (enc->CntValInt > enc->CPR) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	891b      	ldrh	r3, [r3, #8]
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dd09      	ble.n	8000f18 <EncoderPosition+0x70>
			enc->htim->Instance->CNT = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
			enc->CurRots++;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60da      	str	r2, [r3, #12]
		}
	}

	// Get how many ticks happened from a starting point
	enc->CurTicks = (enc->CurRots * enc->CPR) + (enc->CntValInt);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	8892      	ldrh	r2, [r2, #4]
 8000f20:	b212      	sxth	r2, r2
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	8912      	ldrh	r2, [r2, #8]
 8000f2a:	b212      	sxth	r2, r2
 8000f2c:	441a      	add	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]

	// Transform ticks to angle in radian
	enc->Angle = ((float) (enc->CurTicks) / enc->CPR) * 2 * PI;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fcfa 	bl	8000930 <__aeabi_i2f>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	889b      	ldrh	r3, [r3, #4]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fcf3 	bl	8000930 <__aeabi_i2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff fdf6 	bl	8000b40 <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fc35 	bl	80007c8 <__addsf3>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fb83 	bl	800066c <__aeabi_f2d>
 8000f66:	a30a      	add	r3, pc, #40	; (adr r3, 8000f90 <EncoderPosition+0xe8>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff f8f0 	bl	8000150 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fbd0 	bl	800071c <__aeabi_d2f>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	f3af 8000 	nop.w
 8000f90:	53c8d4f1 	.word	0x53c8d4f1
 8000f94:	400921fb 	.word	0x400921fb

08000f98 <EncoderVelocity>:

void EncoderVelocity(volatile ENCODER *enc) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	// Get ticks delta
	enc->DeltAngle = enc->Angle - enc->PrevAngle;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f7ff fc0a 	bl	80007c4 <__aeabi_fsub>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->PrevAngle = enc->Angle;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695a      	ldr	r2, [r3, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	621a      	str	r2, [r3, #32]

	// Compute angular velocity in radian/sec
	enc->AngVel = enc->DeltAngle/enc->SamplingPeriod;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f7ff fdb8 	bl	8000b40 <__aeabi_fdiv>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <EncoderSettings>:

void EncoderSettings(volatile ENCODER *enc, TIM_HandleTypeDef *htim_new,
		int16_t CPR_new, float period) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim_new;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	601a      	str	r2, [r3, #0]
	enc->CPR = CPR_new;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	809a      	strh	r2, [r3, #4]
	enc->SamplingPeriod = period;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	61da      	str	r2, [r3, #28]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_GPIO_Init+0x90>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <MX_GPIO_Init+0x90>)
 8001026:	f043 0320 	orr.w	r3, r3, #32
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_GPIO_Init+0x90>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_GPIO_Init+0x90>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_GPIO_Init+0x90>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_GPIO_Init+0x90>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_GPIO_Init+0x90>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <MX_GPIO_Init+0x90>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_GPIO_Init+0x90>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|INA_Pin
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_GPIO_Init+0x94>)
 8001070:	f001 fb1e 	bl	80026b0 <HAL_GPIO_WritePin>
                          |INB_Pin|ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB3 PB4 PB5 PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|INA_Pin
 8001074:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001078:	613b      	str	r3, [r7, #16]
                          |INB_Pin|ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2302      	movs	r3, #2
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_GPIO_Init+0x94>)
 800108e:	f001 f98b 	bl	80023a8 <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	00000000 	.word	0x00000000

080010a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ae:	f000 fdf9 	bl	8001ca4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010b2:	f000 f8e9 	bl	8001288 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010b6:	f7ff ffa9 	bl	800100c <MX_GPIO_Init>
	MX_TIM1_Init();
 80010ba:	f000 fbfb 	bl	80018b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80010be:	f000 fc51 	bl	8001964 <MX_TIM2_Init>
	MX_TIM3_Init();
 80010c2:	f000 fca3 	bl	8001a0c <MX_TIM3_Init>
	MX_ADC1_Init();
 80010c6:	f7ff fe73 	bl	8000db0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	deltt = 0.00033333;
 80010ca:	4b59      	ldr	r3, [pc, #356]	; (8001230 <main+0x188>)
 80010cc:	4a59      	ldr	r2, [pc, #356]	; (8001234 <main+0x18c>)
 80010ce:	601a      	str	r2, [r3, #0]
	threshold = (360 / 44) * 3 + 1;
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <main+0x190>)
 80010d2:	4a5a      	ldr	r2, [pc, #360]	; (800123c <main+0x194>)
 80010d4:	601a      	str	r2, [r3, #0]

	RegParamsUpd(&ang_reg, 0.56, 0, 0, deltt, 800, -800, 0, threshold,
 80010d6:	4b56      	ldr	r3, [pc, #344]	; (8001230 <main+0x188>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a57      	ldr	r2, [pc, #348]	; (8001238 <main+0x190>)
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	4958      	ldr	r1, [pc, #352]	; (8001240 <main+0x198>)
 80010e0:	9105      	str	r1, [sp, #20]
 80010e2:	9204      	str	r2, [sp, #16]
 80010e4:	2200      	movs	r2, #0
 80010e6:	9203      	str	r2, [sp, #12]
 80010e8:	4a56      	ldr	r2, [pc, #344]	; (8001244 <main+0x19c>)
 80010ea:	9202      	str	r2, [sp, #8]
 80010ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4952      	ldr	r1, [pc, #328]	; (8001248 <main+0x1a0>)
 80010fe:	4853      	ldr	r0, [pc, #332]	; (800124c <main+0x1a4>)
 8001100:	f000 fa14 	bl	800152c <RegParamsUpd>
			0.1);
	RegParamsUpd(&vel_reg, 0.000547865, 0.45, 0, 0.01, 998, -998, 0,
 8001104:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <main+0x1a8>)
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	2300      	movs	r3, #0
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	4b50      	ldr	r3, [pc, #320]	; (8001254 <main+0x1ac>)
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	f240 33e6 	movw	r3, #998	; 0x3e6
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <main+0x1b0>)
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	4a4d      	ldr	r2, [pc, #308]	; (800125c <main+0x1b4>)
 8001126:	494e      	ldr	r1, [pc, #312]	; (8001260 <main+0x1b8>)
 8001128:	484e      	ldr	r0, [pc, #312]	; (8001264 <main+0x1bc>)
 800112a:	f000 f9ff 	bl	800152c <RegParamsUpd>
			100, 1);
	EncoderSettings(&enc1, &htim1, 44, 0.01);
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <main+0x1b0>)
 8001130:	222c      	movs	r2, #44	; 0x2c
 8001132:	494d      	ldr	r1, [pc, #308]	; (8001268 <main+0x1c0>)
 8001134:	484d      	ldr	r0, [pc, #308]	; (800126c <main+0x1c4>)
 8001136:	f7ff ff53 	bl	8000fe0 <EncoderSettings>

	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800113a:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <main+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f06f 0201 	mvn.w	r2, #1
 8001142:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001144:	213c      	movs	r1, #60	; 0x3c
 8001146:	4848      	ldr	r0, [pc, #288]	; (8001268 <main+0x1c0>)
 8001148:	f002 f944 	bl	80033d4 <HAL_TIM_Encoder_Start>

	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800114c:	4b48      	ldr	r3, [pc, #288]	; (8001270 <main+0x1c8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f06f 0201 	mvn.w	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001156:	213c      	movs	r1, #60	; 0x3c
 8001158:	4845      	ldr	r0, [pc, #276]	; (8001270 <main+0x1c8>)
 800115a:	f002 f93b 	bl	80033d4 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800115e:	2100      	movs	r1, #0
 8001160:	4844      	ldr	r0, [pc, #272]	; (8001274 <main+0x1cc>)
 8001162:	f001 fff3 	bl	800314c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001166:	2104      	movs	r1, #4
 8001168:	4842      	ldr	r0, [pc, #264]	; (8001274 <main+0x1cc>)
 800116a:	f001 ffef 	bl	800314c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800116e:	4841      	ldr	r0, [pc, #260]	; (8001274 <main+0x1cc>)
 8001170:	f001 ff4a 	bl	8003008 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		ang_reg.Ref = revolution_ref * 2 * PI;
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <main+0x1d0>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa63 	bl	8000648 <__aeabi_i2d>
 8001182:	a329      	add	r3, pc, #164	; (adr r3, 8001228 <main+0x180>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7fe ffe2 	bl	8000150 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fac2 	bl	800071c <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a2c      	ldr	r2, [pc, #176]	; (800124c <main+0x1a4>)
 800119c:	6013      	str	r3, [r2, #0]
//		vel_reg.Ref = (float)rpm_ref * 2 * PI / 60;

		if (vel_reg.Out == 0) {
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <main+0x1bc>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <main+0x10c>
			HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	4833      	ldr	r0, [pc, #204]	; (800127c <main+0x1d4>)
 80011ae:	f001 fa7f 	bl	80026b0 <HAL_GPIO_WritePin>
 80011b2:	e027      	b.n	8001204 <main+0x15c>
		} else {
			HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ba:	4830      	ldr	r0, [pc, #192]	; (800127c <main+0x1d4>)
 80011bc:	f001 fa78 	bl	80026b0 <HAL_GPIO_WritePin>
			if (vel_reg.Out > 0) {
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <main+0x1bc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dd0e      	ble.n	80011e6 <main+0x13e>
				HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	482b      	ldr	r0, [pc, #172]	; (800127c <main+0x1d4>)
 80011ce:	f001 fa6f 	bl	80026b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	4829      	ldr	r0, [pc, #164]	; (800127c <main+0x1d4>)
 80011d8:	f001 fa6a 	bl	80026b0 <HAL_GPIO_WritePin>
				TIM3->CCR1 = vel_reg.Out;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <main+0x1bc>)
 80011de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <main+0x1d8>)
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
 80011e4:	e00e      	b.n	8001204 <main+0x15c>
			} else {
				HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2140      	movs	r1, #64	; 0x40
 80011ea:	4824      	ldr	r0, [pc, #144]	; (800127c <main+0x1d4>)
 80011ec:	f001 fa60 	bl	80026b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	4821      	ldr	r0, [pc, #132]	; (800127c <main+0x1d4>)
 80011f6:	f001 fa5b 	bl	80026b0 <HAL_GPIO_WritePin>
				TIM3->CCR1 = -(vel_reg.Out);
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <main+0x1bc>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	425a      	negs	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <main+0x1d8>)
 8001202:	635a      	str	r2, [r3, #52]	; 0x34
//		HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_RESET);
//		TIM3->CCR1 = timer;

		ang_reg.Fdb = enc1.Angle;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <main+0x1c4>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	4a10      	ldr	r2, [pc, #64]	; (800124c <main+0x1a4>)
 800120a:	6053      	str	r3, [r2, #4]
		vel_reg.Ref = ang_reg.Out;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <main+0x1a4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fb8d 	bl	8000930 <__aeabi_i2f>
 8001216:	4603      	mov	r3, r0
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <main+0x1bc>)
 800121a:	6013      	str	r3, [r2, #0]
		vel_reg.Fdb = FilteredVel;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <main+0x1dc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a10      	ldr	r2, [pc, #64]	; (8001264 <main+0x1bc>)
 8001222:	6053      	str	r3, [r2, #4]
		ang_reg.Ref = revolution_ref * 2 * PI;
 8001224:	e7a6      	b.n	8001174 <main+0xcc>
 8001226:	bf00      	nop
 8001228:	53c8d4f1 	.word	0x53c8d4f1
 800122c:	400921fb 	.word	0x400921fb
 8001230:	200000f4 	.word	0x200000f4
 8001234:	39aec2cc 	.word	0x39aec2cc
 8001238:	200000f8 	.word	0x200000f8
 800123c:	41c80000 	.word	0x41c80000
 8001240:	3dcccccd 	.word	0x3dcccccd
 8001244:	fffffce0 	.word	0xfffffce0
 8001248:	3f0f5c29 	.word	0x3f0f5c29
 800124c:	2000005c 	.word	0x2000005c
 8001250:	42c80000 	.word	0x42c80000
 8001254:	fffffc1a 	.word	0xfffffc1a
 8001258:	3c23d70a 	.word	0x3c23d70a
 800125c:	3ee66666 	.word	0x3ee66666
 8001260:	3a0f9e99 	.word	0x3a0f9e99
 8001264:	200000a8 	.word	0x200000a8
 8001268:	2000022c 	.word	0x2000022c
 800126c:	200000fc 	.word	0x200000fc
 8001270:	20000274 	.word	0x20000274
 8001274:	200002bc 	.word	0x200002bc
 8001278:	20000000 	.word	0x20000000
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40000400 	.word	0x40000400
 8001284:	20000124 	.word	0x20000124

08001288 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800128e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001292:	2228      	movs	r2, #40	; 0x28
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fdc4 	bl	8003e24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c6:	2301      	movs	r3, #1
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 f9fe 	bl	80026e0 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x66>
		Error_Handler();
 80012ea:	f000 f827 	bl	800133c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fe:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fc6a 	bl	8002be4 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x92>
		Error_Handler();
 8001316:	f000 f811 	bl	800133c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800131a:	2302      	movs	r3, #2
 800131c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fdb9 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xac>
		Error_Handler();
 8001330:	f000 f804 	bl	800133c <Error_Handler>
	}
}
 8001334:	bf00      	nop
 8001336:	3750      	adds	r7, #80	; 0x50
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>

08001346 <pid_reg_calc>:
//	v->OutPreSat = 0;
}
/*
 * This function calculates output signal.
 */
void pid_reg_calc(volatile PIDREG *v) {
 8001346:	b5b0      	push	{r4, r5, r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
//	 Compute the error
//	if (v->Ref != v->PrevRef){
//		pid_reg_reset(v);
//	}
//	v->PrevRef = v->Ref;
	v->Err = v->Ref - v->Fdb;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff fa33 	bl	80007c4 <__aeabi_fsub>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]

	if (v->ShrinkFlag) { // If user enabled this feature
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e1b      	ldrb	r3, [r3, #24]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <pid_reg_calc+0x62>
		if ((v->Err <= v->ErrThreshold) && (v->Err >= -(v->ErrThreshold))) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fcd4 	bl	8000d28 <__aeabi_fcmple>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d010      	beq.n	80013a8 <pid_reg_calc+0x62>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fcd1 	bl	8000d3c <__aeabi_fcmpge>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <pid_reg_calc+0x62>
			v->Err = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
		}
	}

	// Compute the proportional component
	if (v->Kp) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fca5 	bl	8000d00 <__aeabi_fcmpeq>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10b      	bne.n	80013d4 <pid_reg_calc+0x8e>
		v->Up = v->Kp * v->Err;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff fb06 	bl	80009d8 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	621a      	str	r2, [r3, #32]
	}

	// Compute the integral component
	if (v->Ki) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f04f 0100 	mov.w	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fc8f 	bl	8000d00 <__aeabi_fcmpeq>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d128      	bne.n	800143a <pid_reg_calc+0xf4>
		v->Ui = v->Ui + ((float)(v->Out-v->OutPreSat)*v->Kt + v->Err * v->DeltaT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fa9a 	bl	8000930 <__aeabi_i2f>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f7ff fae7 	bl	80009d8 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	461d      	mov	r5, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff fadd 	bl	80009d8 <__aeabi_fmul>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	4628      	mov	r0, r5
 8001424:	f7ff f9d0 	bl	80007c8 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff f9cb 	bl	80007c8 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
//			v->Ui = v->Ui + v->Err * v->DeltaT;
//		}
	}

	// Compute the differential component
	if (v->Kd) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc5c 	bl	8000d00 <__aeabi_fcmpeq>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d117      	bne.n	800147e <pid_reg_calc+0x138>
		v->Ud = (v->Err - v->PrevErr) / v->DeltaT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689c      	ldr	r4, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa6a 	bl	8000930 <__aeabi_i2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4619      	mov	r1, r3
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff f9af 	bl	80007c4 <__aeabi_fsub>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f7ff fb65 	bl	8000b40 <__aeabi_fdiv>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Compute the pre-saturated output
	v->OutPreSat = v->Up + v->Ui * v->Ki + v->Ud * v->Kd;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1c      	ldr	r4, [r3, #32]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4619      	mov	r1, r3
 800148c:	4610      	mov	r0, r2
 800148e:	f7ff faa3 	bl	80009d8 <__aeabi_fmul>
 8001492:	4603      	mov	r3, r0
 8001494:	4619      	mov	r1, r3
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff f996 	bl	80007c8 <__addsf3>
 800149c:	4603      	mov	r3, r0
 800149e:	461c      	mov	r4, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff fa94 	bl	80009d8 <__aeabi_fmul>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff f987 	bl	80007c8 <__addsf3>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc51 	bl	8000d64 <__aeabi_f2iz>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

	// Saturation
	if (v->OutPreSat >= v->OutMax) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	429a      	cmp	r2, r3
 80014d2:	db08      	blt.n	80014e6 <pid_reg_calc+0x1a0>
		//v->SatErr = v->OutPreSat - v->OutMax;
		v->Out = v->OutMax;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
		v->InSaturationFlag = 1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80014e4:	e016      	b.n	8001514 <pid_reg_calc+0x1ce>
	} else {
		if (v->OutPreSat <= v->OutMin) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dc08      	bgt.n	8001504 <pid_reg_calc+0x1be>
			//v->SatErr = v->OutPreSat - v->OutMin;
			v->Out = v->OutMin;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
			v->InSaturationFlag = 1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001502:	e007      	b.n	8001514 <pid_reg_calc+0x1ce>
		} else {
			v->Out = v->OutPreSat;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
			v->InSaturationFlag = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
	}

	// Set currently used error value as previous
	v->PrevErr = v->Err;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc23 	bl	8000d64 <__aeabi_f2iz>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bdb0      	pop	{r4, r5, r7, pc}

0800152c <RegParamsUpd>:

void RegParamsUpd(volatile PIDREG *v, float kp, float ki, float kd, float dt,
		int32_t MaxOut, int32_t MinOut, int8_t flag, float Threshold, float antiwindup) {
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
	v->Kp = kp;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	60da      	str	r2, [r3, #12]
	v->Ki = ki;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]
	v->Kd = kd;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	615a      	str	r2, [r3, #20]
	v->DeltaT = dt;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
	v->OutMax = MaxOut;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
	v->OutMin = MinOut;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a3a      	ldr	r2, [r7, #32]
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c
	v->ErrThreshold = Threshold;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001562:	61da      	str	r2, [r3, #28]
	v->ShrinkFlag = flag;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800156a:	761a      	strb	r2, [r3, #24]
	v->Kt = antiwindup;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_MspInit+0x5c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_MspInit+0x60>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_MspInit+0x60>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 fb83 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	EncoderPosition(&enc1);
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <TIM3_IRQHandler+0x78>)
 8001636:	f7ff fc37 	bl	8000ea8 <EncoderPosition>
	pid_reg_calc(&ang_reg);
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <TIM3_IRQHandler+0x7c>)
 800163c:	f7ff fe83 	bl	8001346 <pid_reg_calc>
	timed += 1;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <TIM3_IRQHandler+0x80>)
 8001642:	f993 3000 	ldrsb.w	r3, [r3]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	3301      	adds	r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b25a      	sxtb	r2, r3
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <TIM3_IRQHandler+0x80>)
 8001650:	701a      	strb	r2, [r3, #0]

	if (timed >= 30) {
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <TIM3_IRQHandler+0x80>)
 8001654:	f993 3000 	ldrsb.w	r3, [r3]
 8001658:	2b1d      	cmp	r3, #29
 800165a:	dd20      	ble.n	800169e <TIM3_IRQHandler+0x6e>
		EncoderVelocity(&enc1);
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <TIM3_IRQHandler+0x78>)
 800165e:	f7ff fc9b 	bl	8000f98 <EncoderVelocity>
		MedianVel = Median_velocity_1(enc1.AngVel);
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <TIM3_IRQHandler+0x78>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb7c 	bl	8000d64 <__aeabi_f2iz>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f828 	bl	80016c4 <Median_velocity_1>
 8001674:	4603      	mov	r3, r0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f95a 	bl	8000930 <__aeabi_i2f>
 800167c:	4603      	mov	r3, r0
 800167e:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <TIM3_IRQHandler+0x84>)
 8001680:	6013      	str	r3, [r2, #0]
		FilteredVel = SMA_velocity_1(MedianVel);
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <TIM3_IRQHandler+0x84>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f8cc 	bl	8001824 <SMA_velocity_1>
 800168c:	4603      	mov	r3, r0
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <TIM3_IRQHandler+0x88>)
 8001690:	6013      	str	r3, [r2, #0]
		pid_reg_calc(&vel_reg);
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <TIM3_IRQHandler+0x8c>)
 8001694:	f7ff fe57 	bl	8001346 <pid_reg_calc>
		timed = 0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <TIM3_IRQHandler+0x80>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <TIM3_IRQHandler+0x90>)
 80016a0:	f001 ff26 	bl	80034f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000fc 	.word	0x200000fc
 80016ac:	2000005c 	.word	0x2000005c
 80016b0:	20000128 	.word	0x20000128
 80016b4:	2000012c 	.word	0x2000012c
 80016b8:	20000124 	.word	0x20000124
 80016bc:	200000a8 	.word	0x200000a8
 80016c0:	200002bc 	.word	0x200002bc

080016c4 <Median_velocity_1>:

/* USER CODE BEGIN 1 */
int Median_velocity_1(int newVal) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];
	static uint32_t count = 0;
	buffer[count] = newVal;
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <Median_velocity_1+0x158>)
 80016ce:	681c      	ldr	r4, [r3, #0]
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff f92d 	bl	8000930 <__aeabi_i2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a51      	ldr	r2, [pc, #324]	; (8001820 <Median_velocity_1+0x15c>)
 80016da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <Median_velocity_1+0x158>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b1c      	cmp	r3, #28
 80016e4:	d840      	bhi.n	8001768 <Median_velocity_1+0xa4>
 80016e6:	4b4d      	ldr	r3, [pc, #308]	; (800181c <Median_velocity_1+0x158>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <Median_velocity_1+0x15c>)
 80016ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016f0:	4b4a      	ldr	r3, [pc, #296]	; (800181c <Median_velocity_1+0x158>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	494a      	ldr	r1, [pc, #296]	; (8001820 <Median_velocity_1+0x15c>)
 80016f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff fb26 	bl	8000d50 <__aeabi_fcmpgt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d02e      	beq.n	8001768 <Median_velocity_1+0xa4>
		for (int i = count; i < NUM_READ - 1; i++) {
 800170a:	4b44      	ldr	r3, [pc, #272]	; (800181c <Median_velocity_1+0x158>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e026      	b.n	8001760 <Median_velocity_1+0x9c>
			if (buffer[i] > buffer[i + 1]) {
 8001712:	4a43      	ldr	r2, [pc, #268]	; (8001820 <Median_velocity_1+0x15c>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	4940      	ldr	r1, [pc, #256]	; (8001820 <Median_velocity_1+0x15c>)
 8001720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f7ff fb12 	bl	8000d50 <__aeabi_fcmpgt>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d013      	beq.n	800175a <Median_velocity_1+0x96>
				float buff = buffer[i];
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <Median_velocity_1+0x15c>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	4a37      	ldr	r2, [pc, #220]	; (8001820 <Median_velocity_1+0x15c>)
 8001742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001746:	4936      	ldr	r1, [pc, #216]	; (8001820 <Median_velocity_1+0x15c>)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	4933      	ldr	r1, [pc, #204]	; (8001820 <Median_velocity_1+0x15c>)
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b1c      	cmp	r3, #28
 8001764:	ddd5      	ble.n	8001712 <Median_velocity_1+0x4e>
 8001766:	e043      	b.n	80017f0 <Median_velocity_1+0x12c>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <Median_velocity_1+0x158>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d03f      	beq.n	80017f0 <Median_velocity_1+0x12c>
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <Median_velocity_1+0x158>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <Median_velocity_1+0x15c>)
 8001778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <Median_velocity_1+0x158>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4927      	ldr	r1, [pc, #156]	; (8001820 <Median_velocity_1+0x15c>)
 8001782:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff fae1 	bl	8000d50 <__aeabi_fcmpgt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d02d      	beq.n	80017f0 <Median_velocity_1+0x12c>
			for (int i = count; i > 0; i--) {
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <Median_velocity_1+0x158>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	e026      	b.n	80017ea <Median_velocity_1+0x126>
				if (buffer[i] < buffer[i - 1]) {
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <Median_velocity_1+0x15c>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	491d      	ldr	r1, [pc, #116]	; (8001820 <Median_velocity_1+0x15c>)
 80017aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f7ff faaf 	bl	8000d14 <__aeabi_fcmplt>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <Median_velocity_1+0x120>
					float buff = buffer[i];
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <Median_velocity_1+0x15c>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <Median_velocity_1+0x15c>)
 80017cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <Median_velocity_1+0x15c>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3b01      	subs	r3, #1
 80017dc:	4910      	ldr	r1, [pc, #64]	; (8001820 <Median_velocity_1+0x15c>)
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dcd5      	bgt.n	800179c <Median_velocity_1+0xd8>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <Median_velocity_1+0x158>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <Median_velocity_1+0x158>)
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <Median_velocity_1+0x158>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b1d      	cmp	r3, #29
 8001800:	d902      	bls.n	8001808 <Median_velocity_1+0x144>
		count = 0;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <Median_velocity_1+0x158>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <Median_velocity_1+0x15c>)
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff faa9 	bl	8000d64 <__aeabi_f2iz>
 8001812:	4603      	mov	r3, r0
}
 8001814:	4618      	mov	r0, r3
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	20000130 	.word	0x20000130
 8001820:	20000134 	.word	0x20000134

08001824 <SMA_velocity_1>:

float SMA_velocity_1(float newVal) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  static int t = 0;
  static float vals[NUM_READ];
  static float average = 0;
  if (++t >= NUM_READ) t = 0; // перемотка t
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <SMA_velocity_1+0x74>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <SMA_velocity_1+0x74>)
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <SMA_velocity_1+0x74>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b1d      	cmp	r3, #29
 800183c:	dd02      	ble.n	8001844 <SMA_velocity_1+0x20>
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <SMA_velocity_1+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  average -= vals[t];         // вычитаем старое
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <SMA_velocity_1+0x78>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <SMA_velocity_1+0x74>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4914      	ldr	r1, [pc, #80]	; (80018a0 <SMA_velocity_1+0x7c>)
 800184e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7fe ffb5 	bl	80007c4 <__aeabi_fsub>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <SMA_velocity_1+0x78>)
 8001860:	601a      	str	r2, [r3, #0]
  average += newVal;          // прибавляем новое
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <SMA_velocity_1+0x78>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe ffad 	bl	80007c8 <__addsf3>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <SMA_velocity_1+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  vals[t] = newVal;           // запоминаем в массив
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <SMA_velocity_1+0x74>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4909      	ldr	r1, [pc, #36]	; (80018a0 <SMA_velocity_1+0x7c>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return ((float)average / NUM_READ);
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <SMA_velocity_1+0x78>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4907      	ldr	r1, [pc, #28]	; (80018a4 <SMA_velocity_1+0x80>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f959 	bl	8000b40 <__aeabi_fdiv>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200001ac 	.word	0x200001ac
 800189c:	200001b0 	.word	0x200001b0
 80018a0:	200001b4 	.word	0x200001b4
 80018a4:	41f00000 	.word	0x41f00000

080018a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 faae 	bl	8003e24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <MX_TIM1_Init+0xa8>)
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <MX_TIM1_Init+0xac>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_TIM1_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <MX_TIM1_Init+0xa8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_TIM1_Init+0xa8>)
 80018e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_TIM1_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM1_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_TIM1_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018fc:	2303      	movs	r3, #3
 80018fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800190c:	230f      	movs	r3, #15
 800190e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800191c:	230f      	movs	r3, #15
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_TIM1_Init+0xa8>)
 8001928:	f001 fcb2 	bl	8003290 <HAL_TIM_Encoder_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001932:	f7ff fd03 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_TIM1_Init+0xa8>)
 8001944:	f002 f9da 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800194e:	f7ff fcf5 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	; 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000022c 	.word	0x2000022c
 8001960:	40012c00 	.word	0x40012c00

08001964 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fa56 	bl	8003e24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_TIM2_Init+0xa4>)
 8001982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_TIM2_Init+0xa4>)
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_TIM2_Init+0xa4>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_TIM2_Init+0xa4>)
 8001996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_TIM2_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_TIM2_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b0:	2301      	movs	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c0:	2301      	movs	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_TIM2_Init+0xa4>)
 80019d4:	f001 fc5c 	bl	8003290 <HAL_TIM_Encoder_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80019de:	f7ff fcad 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <MX_TIM2_Init+0xa4>)
 80019f0:	f002 f984 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019fa:	f7ff fc9f 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	; 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000274 	.word	0x20000274

08001a0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <MX_TIM3_Init+0xc4>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a36:	2217      	movs	r2, #23
 8001a38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a54:	481d      	ldr	r0, [pc, #116]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a56:	f001 fb29 	bl	80030ac <HAL_TIM_PWM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a60:	f7ff fc6c 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4619      	mov	r1, r3
 8001a72:	4816      	ldr	r0, [pc, #88]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a74:	f002 f942 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a7e:	f7ff fc5d 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a82:	2360      	movs	r3, #96	; 0x60
 8001a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a9a:	f001 fe31 	bl	8003700 <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001aa4:	f7ff fc4a 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001ab0:	f001 fe26 	bl	8003700 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aba:	f7ff fc3f 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001ac0:	f000 f898 	bl	8001bf4 <HAL_TIM_MspPostInit>

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200002bc 	.word	0x200002bc
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d125      	bne.n	8001b40 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4619      	mov	r1, r3
 8001b38:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b3a:	f000 fc35 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b3e:	e028      	b.n	8001b92 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b48:	d123      	bne.n	8001b92 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 0318 	add.w	r3, r7, #24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b8e:	f000 fc0b 	bl	80023a8 <HAL_GPIO_Init>
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_TIM_PWM_MspInit+0x44>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_TIM_PWM_MspInit+0x48>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_TIM_PWM_MspInit+0x48>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_TIM_PWM_MspInit+0x48>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	201d      	movs	r0, #29
 8001bd8:	f000 fbaf 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bdc:	201d      	movs	r0, #29
 8001bde:	f000 fbc8 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_TIM_MspPostInit+0x58>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d117      	bne.n	8001c44 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_TIM_MspPostInit+0x5c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_TIM_MspPostInit+0x5c>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_TIM_MspPostInit+0x5c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c2c:	23c0      	movs	r3, #192	; 0xc0
 8001c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2302      	movs	r3, #2
 8001c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_TIM_MspPostInit+0x60>)
 8001c40:	f000 fbb2 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40000400 	.word	0x40000400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010800 	.word	0x40010800

08001c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c5a:	490d      	ldr	r1, [pc, #52]	; (8001c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c70:	4c0a      	ldr	r4, [pc, #40]	; (8001c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c7e:	f7ff fe13 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f002 f8ab 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c86:	f7ff fa0f 	bl	80010a8 <main>
  bx lr
 8001c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c94:	08003e78 	.word	0x08003e78
  ldr r2, =_sbss
 8001c98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c9c:	20000308 	.word	0x20000308

08001ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_2_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_Init+0x28>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_Init+0x28>)
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 fb35 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f000 f808 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff fc5c 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fb4d 	bl	800238e <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 fb15 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000004 	.word	0x20000004
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x1c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x20>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <HAL_IncTick+0x20>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	20000304 	.word	0x20000304

08001d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <HAL_GetTick+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000304 	.word	0x20000304

08001d68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0be      	b.n	8001f08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff f840 	bl	8000e2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f9ab 	bl	8002108 <ADC_ConversionStop_Disable>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 8099 	bne.w	8001ef6 <HAL_ADC_Init+0x18e>
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 8095 	bne.w	8001ef6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd4:	f023 0302 	bic.w	r3, r3, #2
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7b1b      	ldrb	r3, [r3, #12]
 8001dee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e00:	d003      	beq.n	8001e0a <HAL_ADC_Init+0xa2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_ADC_Init+0xa8>
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	e000      	b.n	8001e12 <HAL_ADC_Init+0xaa>
 8001e10:	2300      	movs	r3, #0
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7d1b      	ldrb	r3, [r3, #20]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d119      	bne.n	8001e54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b1b      	ldrb	r3, [r3, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	035a      	lsls	r2, r3, #13
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e00b      	b.n	8001e54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_ADC_Init+0x1a8>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e84:	d003      	beq.n	8001e8e <HAL_ADC_Init+0x126>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d104      	bne.n	8001e98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	051b      	lsls	r3, r3, #20
 8001e96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_ADC_Init+0x1ac>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10b      	bne.n	8001ed4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed2:	e018      	b.n	8001f06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f023 0312 	bic.w	r3, r3, #18
 8001edc:	f043 0210 	orr.w	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef4:	e007      	b.n	8001f06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	ffe1f7fd 	.word	0xffe1f7fd
 8001f14:	ff1f0efe 	.word	0xff1f0efe

08001f18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x20>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0dc      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x1da>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d81c      	bhi.n	8001f82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b05      	subs	r3, #5
 8001f5a:	221f      	movs	r2, #31
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4019      	ands	r1, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b05      	subs	r3, #5
 8001f74:	fa00 f203 	lsl.w	r2, r0, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f80:	e03c      	b.n	8001ffc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d81c      	bhi.n	8001fc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b23      	subs	r3, #35	; 0x23
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4019      	ands	r1, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b23      	subs	r3, #35	; 0x23
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc2:	e01b      	b.n	8001ffc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b41      	subs	r3, #65	; 0x41
 8001fd6:	221f      	movs	r2, #31
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4019      	ands	r1, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b41      	subs	r3, #65	; 0x41
 8001ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b09      	cmp	r3, #9
 8002002:	d91c      	bls.n	800203e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	4019      	ands	r1, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6898      	ldr	r0, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3b1e      	subs	r3, #30
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	e019      	b.n	8002072 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6919      	ldr	r1, [r3, #16]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	2207      	movs	r2, #7
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	4019      	ands	r1, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6898      	ldr	r0, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b10      	cmp	r3, #16
 8002078:	d003      	beq.n	8002082 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800207e:	2b11      	cmp	r3, #17
 8002080:	d132      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d125      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d126      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d11a      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_ADC_ConfigChannel+0x1e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_ADC_ConfigChannel+0x1ec>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9a      	lsrs	r2, r3, #18
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x1b2>
 80020d6:	e007      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40012400 	.word	0x40012400
 8002100:	20000004 	.word	0x20000004
 8002104:	431bde83 	.word	0x431bde83

08002108 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12e      	bne.n	8002180 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002132:	f7ff fe0f 	bl	8001d54 <HAL_GetTick>
 8002136:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002138:	e01b      	b.n	8002172 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800213a:	f7ff fe0b 	bl	8001d54 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d914      	bls.n	8002172 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10d      	bne.n	8002172 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d0dc      	beq.n	800213a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4906      	ldr	r1, [pc, #24]	; (8002224 <__NVIC_EnableIRQ+0x34>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff90 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff2d 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff42 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff90 	bl	800227c <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5f 	bl	8002228 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff35 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b08b      	sub	sp, #44	; 0x2c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	e169      	b.n	8002690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023bc:	2201      	movs	r2, #1
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8158 	bne.w	800268a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a9a      	ldr	r2, [pc, #616]	; (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d05e      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023e4:	4a98      	ldr	r2, [pc, #608]	; (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d875      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023ea:	4a98      	ldr	r2, [pc, #608]	; (800264c <HAL_GPIO_Init+0x2a4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d058      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023f0:	4a96      	ldr	r2, [pc, #600]	; (800264c <HAL_GPIO_Init+0x2a4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d86f      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023f6:	4a96      	ldr	r2, [pc, #600]	; (8002650 <HAL_GPIO_Init+0x2a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d052      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023fc:	4a94      	ldr	r2, [pc, #592]	; (8002650 <HAL_GPIO_Init+0x2a8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d869      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002402:	4a94      	ldr	r2, [pc, #592]	; (8002654 <HAL_GPIO_Init+0x2ac>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d04c      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002408:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_GPIO_Init+0x2ac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d863      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800240e:	4a92      	ldr	r2, [pc, #584]	; (8002658 <HAL_GPIO_Init+0x2b0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d046      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002414:	4a90      	ldr	r2, [pc, #576]	; (8002658 <HAL_GPIO_Init+0x2b0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d85d      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d82a      	bhi.n	8002474 <HAL_GPIO_Init+0xcc>
 800241e:	2b12      	cmp	r3, #18
 8002420:	d859      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <HAL_GPIO_Init+0x80>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	080024a3 	.word	0x080024a3
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800248f 	.word	0x0800248f
 8002434:	080024d1 	.word	0x080024d1
 8002438:	080024d7 	.word	0x080024d7
 800243c:	080024d7 	.word	0x080024d7
 8002440:	080024d7 	.word	0x080024d7
 8002444:	080024d7 	.word	0x080024d7
 8002448:	080024d7 	.word	0x080024d7
 800244c:	080024d7 	.word	0x080024d7
 8002450:	080024d7 	.word	0x080024d7
 8002454:	080024d7 	.word	0x080024d7
 8002458:	080024d7 	.word	0x080024d7
 800245c:	080024d7 	.word	0x080024d7
 8002460:	080024d7 	.word	0x080024d7
 8002464:	080024d7 	.word	0x080024d7
 8002468:	080024d7 	.word	0x080024d7
 800246c:	08002485 	.word	0x08002485
 8002470:	08002499 	.word	0x08002499
 8002474:	4a79      	ldr	r2, [pc, #484]	; (800265c <HAL_GPIO_Init+0x2b4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e029      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e024      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01f      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e01a      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e013      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e009      	b.n	80024d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          break;
 80024d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d801      	bhi.n	80024e2 <HAL_GPIO_Init+0x13a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	e001      	b.n	80024e6 <HAL_GPIO_Init+0x13e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2bff      	cmp	r3, #255	; 0xff
 80024ec:	d802      	bhi.n	80024f4 <HAL_GPIO_Init+0x14c>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x152>
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	3b08      	subs	r3, #8
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	210f      	movs	r1, #15
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	431a      	orrs	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80b1 	beq.w	800268a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002528:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <HAL_GPIO_Init+0x2b8>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_GPIO_Init+0x2b8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_GPIO_Init+0x2b8>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002540:	4a48      	ldr	r2, [pc, #288]	; (8002664 <HAL_GPIO_Init+0x2bc>)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a40      	ldr	r2, [pc, #256]	; (8002668 <HAL_GPIO_Init+0x2c0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_GPIO_Init+0x1ec>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3f      	ldr	r2, [pc, #252]	; (800266c <HAL_GPIO_Init+0x2c4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00d      	beq.n	8002590 <HAL_GPIO_Init+0x1e8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3e      	ldr	r2, [pc, #248]	; (8002670 <HAL_GPIO_Init+0x2c8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <HAL_GPIO_Init+0x1e4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <HAL_GPIO_Init+0x2cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_GPIO_Init+0x1e0>
 8002584:	2303      	movs	r3, #3
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002588:	2304      	movs	r3, #4
 800258a:	e004      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 800258c:	2302      	movs	r3, #2
 800258e:	e002      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002594:	2300      	movs	r3, #0
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	4093      	lsls	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a6:	492f      	ldr	r1, [pc, #188]	; (8002664 <HAL_GPIO_Init+0x2bc>)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	492c      	ldr	r1, [pc, #176]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4928      	ldr	r1, [pc, #160]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4922      	ldr	r1, [pc, #136]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	491e      	ldr	r1, [pc, #120]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002600:	4013      	ands	r3, r2
 8002602:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4918      	ldr	r1, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	43db      	mvns	r3, r3
 8002626:	4914      	ldr	r1, [pc, #80]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002628:	4013      	ands	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d021      	beq.n	800267c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e021      	b.n	800268a <HAL_GPIO_Init+0x2e2>
 8002646:	bf00      	nop
 8002648:	10320000 	.word	0x10320000
 800264c:	10310000 	.word	0x10310000
 8002650:	10220000 	.word	0x10220000
 8002654:	10210000 	.word	0x10210000
 8002658:	10120000 	.word	0x10120000
 800265c:	10110000 	.word	0x10110000
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	40010800 	.word	0x40010800
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40011000 	.word	0x40011000
 8002674:	40011400 	.word	0x40011400
 8002678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_GPIO_Init+0x304>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	43db      	mvns	r3, r3
 8002684:	4909      	ldr	r1, [pc, #36]	; (80026ac <HAL_GPIO_Init+0x304>)
 8002686:	4013      	ands	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f ae8e 	bne.w	80023bc <HAL_GPIO_Init+0x14>
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	372c      	adds	r7, #44	; 0x2c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e272      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff faca 	bl	8001d54 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff fac6 	bl	8001d54 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fab6 	bl	8001d54 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff fab2 	bl	8001d54 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff fa6b 	bl	8001d54 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7ff fa67 	bl	8001d54 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fa4a 	bl	8001d54 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7ff fa46 	bl	8001d54 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e180      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7ff fa2a 	bl	8001d54 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7ff fa26 	bl	8001d54 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 fa9c 	bl	8002e60 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7ff fa10 	bl	8001d54 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7ff fa0c 	bl	8001d54 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e146      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b92      	ldr	r3, [pc, #584]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a87      	ldr	r2, [pc, #540]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7ff f9cd 	bl	8001d54 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7ff f9c9 	bl	8001d54 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7ff f97d 	bl	8001d54 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7ff f979 	bl	8001d54 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff f967 	bl	8001d54 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7ff f963 	bl	8001d54 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f937 	bl	8001d54 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f933 	bl	8001d54 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e06d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7ff f907 	bl	8001d54 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7ff f903 	bl	8001d54 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e035      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff f8f0 	bl	8001d54 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff f8ec 	bl	8001d54 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e01e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e019      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7ff f83e 	bl	8001d54 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7ff f83a 	bl	8001d54 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe ff9c 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08003e4c 	.word	0x08003e4c
 8002db0:	20000004 	.word	0x20000004
 8002db4:	20000008 	.word	0x20000008

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dea:	613b      	str	r3, [r7, #16]
      break;
 8002dec:	e027      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	613b      	str	r3, [r7, #16]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	693b      	ldr	r3, [r7, #16]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	08003e5c 	.word	0x08003e5c
 8002e58:	08003e6c 	.word	0x08003e6c
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <RCC_Delay+0x34>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <RCC_Delay+0x38>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a5b      	lsrs	r3, r3, #9
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e7c:	bf00      	nop
  }
  while (Delay --);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	60fa      	str	r2, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f9      	bne.n	8002e7c <RCC_Delay+0x1c>
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	20000004 	.word	0x20000004
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d07d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
 8002ed4:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d118      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efc:	f7fe ff2a 	bl	8001d54 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	e008      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe ff26 	bl	8001d54 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e06d      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02e      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d027      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f56:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d014      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fef5 	bl	8001d54 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fef1 	bl	8001d54 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e036      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ee      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4917      	ldr	r1, [pc, #92]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	490b      	ldr	r1, [pc, #44]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4904      	ldr	r1, [pc, #16]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	42420440 	.word	0x42420440

08003008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e03a      	b.n	8003096 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_TIM_Base_Start_IT+0x98>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d009      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d010      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	e007      	b.n	8003094 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800

080030ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe fd68 	bl	8001ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fbf8 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_TIM_PWM_Start+0x24>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e022      	b.n	80031b6 <HAL_TIM_PWM_Start+0x6a>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d109      	bne.n	800318a <HAL_TIM_PWM_Start+0x3e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e015      	b.n	80031b6 <HAL_TIM_PWM_Start+0x6a>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d109      	bne.n	80031a4 <HAL_TIM_PWM_Start+0x58>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e008      	b.n	80031b6 <HAL_TIM_PWM_Start+0x6a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e05e      	b.n	800327c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0x82>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	e013      	b.n	80031f6 <HAL_TIM_PWM_Start+0xaa>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0x92>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031dc:	e00b      	b.n	80031f6 <HAL_TIM_PWM_Start+0xaa>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start+0xa2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ec:	e003      	b.n	80031f6 <HAL_TIM_PWM_Start+0xaa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2201      	movs	r2, #1
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fd58 	bl	8003cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_TIM_PWM_Start+0x138>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d107      	bne.n	800321e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_TIM_PWM_Start+0x138>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_TIM_PWM_Start+0xfa>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d009      	beq.n	8003246 <HAL_TIM_PWM_Start+0xfa>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_TIM_PWM_Start+0x13c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIM_PWM_Start+0xfa>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a12      	ldr	r2, [pc, #72]	; (800328c <HAL_TIM_PWM_Start+0x140>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d010      	beq.n	800327a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	e007      	b.n	800327a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e093      	b.n	80033cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fe fc0b 	bl	8001ad4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d4:	f023 0307 	bic.w	r3, r3, #7
 80032d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f000 fafb 	bl	80038e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4313      	orrs	r3, r2
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003330:	f023 030c 	bic.w	r3, r3, #12
 8003334:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	4313      	orrs	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	011a      	lsls	r2, r3, #4
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	031b      	lsls	r3, r3, #12
 8003360:	4313      	orrs	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4313      	orrs	r3, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d110      	bne.n	8003426 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e069      	b.n	80034e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003424:	e031      	b.n	800348a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d110      	bne.n	800344e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800342c:	7bbb      	ldrb	r3, [r7, #14]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d001      	beq.n	800343c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e055      	b.n	80034e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800344c:	e01d      	b.n	800348a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d108      	bne.n	8003466 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800345a:	7b7b      	ldrb	r3, [r7, #13]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d102      	bne.n	8003466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003460:	7b3b      	ldrb	r3, [r7, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e03e      	b.n	80034e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_TIM_Encoder_Start+0xc4>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d008      	beq.n	80034a8 <HAL_TIM_Encoder_Start+0xd4>
 8003496:	e00f      	b.n	80034b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2201      	movs	r2, #1
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fc07 	bl	8003cb4 <TIM_CCxChannelCmd>
      break;
 80034a6:	e016      	b.n	80034d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	2104      	movs	r1, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fbff 	bl	8003cb4 <TIM_CCxChannelCmd>
      break;
 80034b6:	e00e      	b.n	80034d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fbf7 	bl	8003cb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	2104      	movs	r1, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fbf0 	bl	8003cb4 <TIM_CCxChannelCmd>
      break;
 80034d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0202 	mvn.w	r2, #2
 800351c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9b8 	bl	80038a8 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9ab 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f9ba 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0204 	mvn.w	r2, #4
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f98e 	bl	80038a8 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f981 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f990 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0208 	mvn.w	r2, #8
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2204      	movs	r2, #4
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f964 	bl	80038a8 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f957 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f966 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0210 	mvn.w	r2, #16
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2208      	movs	r2, #8
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f93a 	bl	80038a8 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f92d 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f93c 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0201 	mvn.w	r2, #1
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f908 	bl	8003884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b80      	cmp	r3, #128	; 0x80
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fb95 	bl	8003dca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f900 	bl	80038cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0220 	mvn.w	r2, #32
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb60 	bl	8003db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800371a:	2302      	movs	r3, #2
 800371c:	e0ae      	b.n	800387c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	f200 809f 	bhi.w	800386c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003769 	.word	0x08003769
 8003738:	0800386d 	.word	0x0800386d
 800373c:	0800386d 	.word	0x0800386d
 8003740:	0800386d 	.word	0x0800386d
 8003744:	080037a9 	.word	0x080037a9
 8003748:	0800386d 	.word	0x0800386d
 800374c:	0800386d 	.word	0x0800386d
 8003750:	0800386d 	.word	0x0800386d
 8003754:	080037eb 	.word	0x080037eb
 8003758:	0800386d 	.word	0x0800386d
 800375c:	0800386d 	.word	0x0800386d
 8003760:	0800386d 	.word	0x0800386d
 8003764:	0800382b 	.word	0x0800382b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f918 	bl	80039a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6999      	ldr	r1, [r3, #24]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	619a      	str	r2, [r3, #24]
      break;
 80037a6:	e064      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f95e 	bl	8003a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6999      	ldr	r1, [r3, #24]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	619a      	str	r2, [r3, #24]
      break;
 80037e8:	e043      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f9a7 	bl	8003b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0208 	orr.w	r2, r2, #8
 8003804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0204 	bic.w	r2, r2, #4
 8003814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	61da      	str	r2, [r3, #28]
      break;
 8003828:	e023      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f9f1 	bl	8003c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69d9      	ldr	r1, [r3, #28]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	021a      	lsls	r2, r3, #8
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	61da      	str	r2, [r3, #28]
      break;
 800386a:	e002      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
      break;
 8003870:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800387a:	7dfb      	ldrb	r3, [r7, #23]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
	...

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a29      	ldr	r2, [pc, #164]	; (8003998 <TIM_Base_SetConfig+0xb8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00b      	beq.n	8003910 <TIM_Base_SetConfig+0x30>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d007      	beq.n	8003910 <TIM_Base_SetConfig+0x30>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a26      	ldr	r2, [pc, #152]	; (800399c <TIM_Base_SetConfig+0xbc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0x30>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <TIM_Base_SetConfig+0xc0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <TIM_Base_SetConfig+0xb8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <TIM_Base_SetConfig+0xbc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <TIM_Base_SetConfig+0xc0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <TIM_Base_SetConfig+0xb8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800

080039a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0201 	bic.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0302 	bic.w	r3, r3, #2
 80039ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <TIM_OC1_SetConfig+0xc8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10c      	bne.n	8003a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0308 	bic.w	r3, r3, #8
 8003a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <TIM_OC1_SetConfig+0xc8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d111      	bne.n	8003a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00

08003a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f023 0210 	bic.w	r2, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0320 	bic.w	r3, r3, #32
 8003aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <TIM_OC2_SetConfig+0xd0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10d      	bne.n	8003aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <TIM_OC2_SetConfig+0xd0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d113      	bne.n	8003b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00

08003b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <TIM_OC3_SetConfig+0xd0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10d      	bne.n	8003bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <TIM_OC3_SetConfig+0xd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d113      	bne.n	8003bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00

08003c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	031b      	lsls	r3, r3, #12
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <TIM_OC4_SetConfig+0x98>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d109      	bne.n	8003c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00

08003cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1a      	ldr	r2, [r3, #32]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e046      	b.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a16      	ldr	r2, [pc, #88]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d009      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800

08003db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	2600      	movs	r6, #0
 8003de0:	4d0c      	ldr	r5, [pc, #48]	; (8003e14 <__libc_init_array+0x38>)
 8003de2:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de4:	1b64      	subs	r4, r4, r5
 8003de6:	10a4      	asrs	r4, r4, #2
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	f000 f822 	bl	8003e34 <_init>
 8003df0:	2600      	movs	r6, #0
 8003df2:	4d0a      	ldr	r5, [pc, #40]	; (8003e1c <__libc_init_array+0x40>)
 8003df4:	4c0a      	ldr	r4, [pc, #40]	; (8003e20 <__libc_init_array+0x44>)
 8003df6:	1b64      	subs	r4, r4, r5
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	08003e70 	.word	0x08003e70
 8003e18:	08003e70 	.word	0x08003e70
 8003e1c:	08003e70 	.word	0x08003e70
 8003e20:	08003e74 	.word	0x08003e74

08003e24 <memset>:
 8003e24:	4603      	mov	r3, r0
 8003e26:	4402      	add	r2, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
