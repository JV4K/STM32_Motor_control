
Servo_Controller_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000369c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037cc  080037cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037cc  080037cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037cc  080037cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  080037e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080037e0  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2f3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002051  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017962  00000000  00000000  0002e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d40e  00000000  00000000  0004626a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089326  00000000  00000000  00053678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc99e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  000dc9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003790 	.word	0x08003790

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003790 	.word	0x08003790

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <MX_ADC1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ADC1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_ADC1_Init+0x74>)
 800076a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800076e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_ADC1_Init+0x74>)
 800077e:	f000 ffa1 	bl	80016c4 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fa86 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800078c:	2308      	movs	r3, #8
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000794:	2307      	movs	r3, #7
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_ADC1_Init+0x74>)
 800079e:	f001 f869 	bl	8001874 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 fa76 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000028 	.word	0x20000028
 80007b8:	40012400 	.word	0x40012400

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_ADC_MspInit+0x6c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d121      	bne.n	8000820 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_ADC_MspInit+0x70>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <HAL_ADC_MspInit+0x70>)
 80007e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_ADC_MspInit+0x70>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_ADC_MspInit+0x70>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <HAL_ADC_MspInit+0x70>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_ADC_MspInit+0x70>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_ADC_MspInit+0x74>)
 800081c:	f001 fa72 	bl	8001d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012400 	.word	0x40012400
 800082c:	40021000 	.word	0x40021000
 8000830:	40010c00 	.word	0x40010c00

08000834 <EncoderPosition>:
		enc->CurRots--;
	else
		enc->CurRots++;
}

void EncoderPosition(volatile ENCODER *enc) {
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	enc->CntValUint = enc->htim->Instance->CNT;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	80da      	strh	r2, [r3, #6]
	enc->CntValInt = (int16_t) enc->CntValUint;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	88db      	ldrh	r3, [r3, #6]
 800084e:	b29b      	uxth	r3, r3
 8000850:	b21a      	sxth	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	811a      	strh	r2, [r3, #8]
	if (enc->CntValInt < -enc->CPR) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	891b      	ldrh	r3, [r3, #8]
 800085a:	b21b      	sxth	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	889b      	ldrh	r3, [r3, #4]
 8000862:	b21b      	sxth	r3, r3
 8000864:	425b      	negs	r3, r3
 8000866:	429a      	cmp	r2, r3
 8000868:	da0a      	bge.n	8000880 <EncoderPosition+0x4c>
		enc->htim->Instance->CNT = 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
		enc->CurRots--;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	e011      	b.n	80008a4 <EncoderPosition+0x70>
	} else {
		if (enc->CntValInt > enc->CPR) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	891b      	ldrh	r3, [r3, #8]
 8000884:	b21a      	sxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	b21b      	sxth	r3, r3
 800088c:	429a      	cmp	r2, r3
 800088e:	dd09      	ble.n	80008a4 <EncoderPosition+0x70>
			enc->htim->Instance->CNT = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
			enc->CurRots++;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	60da      	str	r2, [r3, #12]
		}
	}

	// Get how many ticks happened from a starting point
	enc->CurTicks = (enc->CurRots * enc->CPR) + (enc->CntValInt);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	8892      	ldrh	r2, [r2, #4]
 80008ac:	b212      	sxth	r2, r2
 80008ae:	fb02 f303 	mul.w	r3, r2, r3
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	8912      	ldrh	r2, [r2, #8]
 80008b6:	b212      	sxth	r2, r2
 80008b8:	441a      	add	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	611a      	str	r2, [r3, #16]

	// Transform ticks to angle
	enc->Angle = ((float) (enc->CurTicks) / enc->CPR) * 360;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fcfc 	bl	80002c0 <__aeabi_i2f>
 80008c8:	4604      	mov	r4, r0
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	889b      	ldrh	r3, [r3, #4]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fcf5 	bl	80002c0 <__aeabi_i2f>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4619      	mov	r1, r3
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff fdf8 	bl	80004d0 <__aeabi_fdiv>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4906      	ldr	r1, [pc, #24]	; (80008fc <EncoderPosition+0xc8>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd3f 	bl	8000368 <__aeabi_fmul>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	43b40000 	.word	0x43b40000

08000900 <EncoderVelocity>:

void EncoderVelocity(volatile ENCODER *enc) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	// Get ticks delta
	enc->DeltAngle = enc->Angle - enc->PrevAngle;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4619      	mov	r1, r3
 8000912:	4610      	mov	r0, r2
 8000914:	f7ff fc1e 	bl	8000154 <__aeabi_fsub>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
	enc->PrevAngle = enc->Angle;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	621a      	str	r2, [r3, #32]

	// Compute angular velocity in RPM
	enc->AngVel = (enc->DeltAngle/360)/enc->SamplingPeriod * 60;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <EncoderVelocity+0x60>)
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fdce 	bl	80004d0 <__aeabi_fdiv>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f7ff fdc6 	bl	80004d0 <__aeabi_fdiv>
 8000944:	4603      	mov	r3, r0
 8000946:	4907      	ldr	r1, [pc, #28]	; (8000964 <EncoderVelocity+0x64>)
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fd0d 	bl	8000368 <__aeabi_fmul>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	619a      	str	r2, [r3, #24]
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	43b40000 	.word	0x43b40000
 8000964:	42700000 	.word	0x42700000

08000968 <EncoderSettings>:

void EncoderSettings(volatile ENCODER *enc, TIM_HandleTypeDef *htim_new,
		int16_t CPR_new, float period) {
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim_new;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	601a      	str	r2, [r3, #0]
	enc->CPR = CPR_new;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	809a      	strh	r2, [r3, #4]
	enc->SamplingPeriod = period;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	61da      	str	r2, [r3, #28]
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0320 	and.w	r3, r3, #32
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|INA_Pin
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_GPIO_Init+0x94>)
 80009f8:	f001 fb08 	bl	800200c <HAL_GPIO_WritePin>
                          |INB_Pin|ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB3 PB4 PB5 PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|INA_Pin
 80009fc:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a00:	613b      	str	r3, [r7, #16]
                          |INB_Pin|ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_GPIO_Init+0x94>)
 8000a16:	f001 f975 	bl	8001d04 <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fde5 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f8d5 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f7ff ffab 	bl	8000994 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a3e:	f000 fbe7 	bl	8001210 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a42:	f000 fc3d 	bl	80012c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a46:	f000 fc8f 	bl	8001368 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a4a:	f7ff fe79 	bl	8000740 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	deltt = 0.00033333;
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <main+0x158>)
 8000a50:	4a4d      	ldr	r2, [pc, #308]	; (8000b88 <main+0x15c>)
 8000a52:	601a      	str	r2, [r3, #0]
	threshold = (360 / 44) * 3 + 1;
 8000a54:	4b4d      	ldr	r3, [pc, #308]	; (8000b8c <main+0x160>)
 8000a56:	4a4e      	ldr	r2, [pc, #312]	; (8000b90 <main+0x164>)
 8000a58:	601a      	str	r2, [r3, #0]

	RegParamsUpd(&ang_reg, 0.8, 0.25, 0.15, deltt, 12000, -12000, 1, threshold, 0.1);
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <main+0x158>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a4b      	ldr	r2, [pc, #300]	; (8000b8c <main+0x160>)
 8000a60:	6812      	ldr	r2, [r2, #0]
 8000a62:	494c      	ldr	r1, [pc, #304]	; (8000b94 <main+0x168>)
 8000a64:	9105      	str	r1, [sp, #20]
 8000a66:	9204      	str	r2, [sp, #16]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	9203      	str	r2, [sp, #12]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <main+0x16c>)
 8000a6e:	9202      	str	r2, [sp, #8]
 8000a70:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000a74:	9201      	str	r2, [sp, #4]
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	4b48      	ldr	r3, [pc, #288]	; (8000b9c <main+0x170>)
 8000a7a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8000a7e:	4948      	ldr	r1, [pc, #288]	; (8000ba0 <main+0x174>)
 8000a80:	4848      	ldr	r0, [pc, #288]	; (8000ba4 <main+0x178>)
 8000a82:	f000 fa01 	bl	8000e88 <RegParamsUpd>
	RegParamsUpd(&vel_reg, 0.035, 0.09, 0.00005, deltt, 998, -998, 0, 0, 0.3);
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <main+0x158>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a47      	ldr	r2, [pc, #284]	; (8000ba8 <main+0x17c>)
 8000a8c:	9205      	str	r2, [sp, #20]
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	9204      	str	r2, [sp, #16]
 8000a94:	2200      	movs	r2, #0
 8000a96:	9203      	str	r2, [sp, #12]
 8000a98:	4a44      	ldr	r2, [pc, #272]	; (8000bac <main+0x180>)
 8000a9a:	9202      	str	r2, [sp, #8]
 8000a9c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000aa0:	9201      	str	r2, [sp, #4]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <main+0x184>)
 8000aa6:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <main+0x188>)
 8000aa8:	4943      	ldr	r1, [pc, #268]	; (8000bb8 <main+0x18c>)
 8000aaa:	4844      	ldr	r0, [pc, #272]	; (8000bbc <main+0x190>)
 8000aac:	f000 f9ec 	bl	8000e88 <RegParamsUpd>
	EncoderSettings(&enc1, &htim1, 44, 0.01);
 8000ab0:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <main+0x194>)
 8000ab2:	222c      	movs	r2, #44	; 0x2c
 8000ab4:	4943      	ldr	r1, [pc, #268]	; (8000bc4 <main+0x198>)
 8000ab6:	4844      	ldr	r0, [pc, #272]	; (8000bc8 <main+0x19c>)
 8000ab8:	f7ff ff56 	bl	8000968 <EncoderSettings>

	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000abc:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <main+0x198>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f06f 0201 	mvn.w	r2, #1
 8000ac4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ac6:	213c      	movs	r1, #60	; 0x3c
 8000ac8:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <main+0x198>)
 8000aca:	f002 f931 	bl	8002d30 <HAL_TIM_Encoder_Start>

	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000ace:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <main+0x1a0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f06f 0201 	mvn.w	r2, #1
 8000ad6:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ad8:	213c      	movs	r1, #60	; 0x3c
 8000ada:	483c      	ldr	r0, [pc, #240]	; (8000bcc <main+0x1a0>)
 8000adc:	f002 f928 	bl	8002d30 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	483b      	ldr	r0, [pc, #236]	; (8000bd0 <main+0x1a4>)
 8000ae4:	f001 ffe0 	bl	8002aa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4839      	ldr	r0, [pc, #228]	; (8000bd0 <main+0x1a4>)
 8000aec:	f001 ffdc 	bl	8002aa8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <main+0x1a4>)
 8000af2:	f001 ff37 	bl	8002964 <HAL_TIM_Base_Start_IT>

	ang_reg.Ref = 360 * 1 * 20;
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <main+0x178>)
 8000af8:	4a36      	ldr	r2, [pc, #216]	; (8000bd4 <main+0x1a8>)
 8000afa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (vel_reg.Out == 0) {
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <main+0x190>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d106      	bne.n	8000b12 <main+0xe6>
			HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <main+0x1ac>)
 8000b0c:	f001 fa7e 	bl	800200c <HAL_GPIO_WritePin>
 8000b10:	e027      	b.n	8000b62 <main+0x136>
		} else {
			HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <main+0x1ac>)
 8000b1a:	f001 fa77 	bl	800200c <HAL_GPIO_WritePin>
			if (vel_reg.Out > 0) {
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <main+0x190>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dd0e      	ble.n	8000b44 <main+0x118>
				HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <main+0x1ac>)
 8000b2c:	f001 fa6e 	bl	800200c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <main+0x1ac>)
 8000b36:	f001 fa69 	bl	800200c <HAL_GPIO_WritePin>
				TIM3->CCR1 = vel_reg.Out;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <main+0x190>)
 8000b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <main+0x1b0>)
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
 8000b42:	e00e      	b.n	8000b62 <main+0x136>
			} else {
				HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <main+0x1ac>)
 8000b4a:	f001 fa5f 	bl	800200c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	4821      	ldr	r0, [pc, #132]	; (8000bd8 <main+0x1ac>)
 8000b54:	f001 fa5a 	bl	800200c <HAL_GPIO_WritePin>
				TIM3->CCR1 = -(vel_reg.Out);
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <main+0x190>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	425a      	negs	r2, r3
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <main+0x1b0>)
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
//		HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_RESET);
//		TIM3->CCR1 = 500;

		ang_reg.Fdb = enc1.Angle;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <main+0x19c>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <main+0x178>)
 8000b68:	6053      	str	r3, [r2, #4]
		vel_reg.Ref = ang_reg.Out;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <main+0x178>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fba6 	bl	80002c0 <__aeabi_i2f>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <main+0x190>)
 8000b78:	6013      	str	r3, [r2, #0]
		vel_reg.Fdb = FilteredVel;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <main+0x1b4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <main+0x190>)
 8000b80:	6053      	str	r3, [r2, #4]
		if (vel_reg.Out == 0) {
 8000b82:	e7bb      	b.n	8000afc <main+0xd0>
 8000b84:	200000f0 	.word	0x200000f0
 8000b88:	39aec2cc 	.word	0x39aec2cc
 8000b8c:	200000f4 	.word	0x200000f4
 8000b90:	41c80000 	.word	0x41c80000
 8000b94:	3dcccccd 	.word	0x3dcccccd
 8000b98:	ffffd120 	.word	0xffffd120
 8000b9c:	3e19999a 	.word	0x3e19999a
 8000ba0:	3f4ccccd 	.word	0x3f4ccccd
 8000ba4:	20000058 	.word	0x20000058
 8000ba8:	3e99999a 	.word	0x3e99999a
 8000bac:	fffffc1a 	.word	0xfffffc1a
 8000bb0:	3851b717 	.word	0x3851b717
 8000bb4:	3db851ec 	.word	0x3db851ec
 8000bb8:	3d0f5c29 	.word	0x3d0f5c29
 8000bbc:	200000a4 	.word	0x200000a4
 8000bc0:	3c23d70a 	.word	0x3c23d70a
 8000bc4:	20000228 	.word	0x20000228
 8000bc8:	200000f8 	.word	0x200000f8
 8000bcc:	20000270 	.word	0x20000270
 8000bd0:	200002b8 	.word	0x200002b8
 8000bd4:	45e10000 	.word	0x45e10000
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40000400 	.word	0x40000400
 8000be0:	20000120 	.word	0x20000120

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fdc4 	bl	8003780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f9fe 	bl	800203c <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c46:	f000 f827 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2102      	movs	r1, #2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fc6a 	bl	8002540 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c72:	f000 f811 	bl	8000c98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	2302      	movs	r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fdb9 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c8c:	f000 f804 	bl	8000c98 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3750      	adds	r7, #80	; 0x50
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>

08000ca2 <pid_reg_calc>:
//	v->OutPreSat = 0;
}
/*
 * This function calculates output signal.
 */
void pid_reg_calc(volatile PIDREG *v) {
 8000ca2:	b5b0      	push	{r4, r5, r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
//	 Compute the error
//	if (v->Ref != v->PrevRef){
//		pid_reg_reset(v);
//	}
//	v->PrevRef = v->Ref;
	v->Err = v->Ref - v->Fdb;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	f7ff fa4d 	bl	8000154 <__aeabi_fsub>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

	if (v->ShrinkFlag) { // If user enabled this feature
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7e1b      	ldrb	r3, [r3, #24]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d01b      	beq.n	8000d04 <pid_reg_calc+0x62>
		if ((v->Err <= v->ErrThreshold) && (v->Err >= -(v->ErrThreshold))) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	f7ff fcee 	bl	80006b8 <__aeabi_fcmple>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d010      	beq.n	8000d04 <pid_reg_calc+0x62>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f7ff fceb 	bl	80006cc <__aeabi_fcmpge>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <pid_reg_calc+0x62>
			v->Err = 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
		}
	}

	// Compute the proportional component
	if (v->Kp) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	f04f 0100 	mov.w	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fcbf 	bl	8000690 <__aeabi_fcmpeq>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10b      	bne.n	8000d30 <pid_reg_calc+0x8e>
		v->Up = v->Kp * v->Err;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4610      	mov	r0, r2
 8000d24:	f7ff fb20 	bl	8000368 <__aeabi_fmul>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	621a      	str	r2, [r3, #32]
	}

	// Compute the integral component
	if (v->Ki) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	f04f 0100 	mov.w	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fca9 	bl	8000690 <__aeabi_fcmpeq>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d128      	bne.n	8000d96 <pid_reg_calc+0xf4>
		v->Ui = v->Ui + ((float)(v->Out-v->OutPreSat)*v->Kt + v->Err * v->DeltaT);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fab4 	bl	80002c0 <__aeabi_i2f>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4610      	mov	r0, r2
 8000d62:	f7ff fb01 	bl	8000368 <__aeabi_fmul>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461d      	mov	r5, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f7ff faf7 	bl	8000368 <__aeabi_fmul>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f7ff f9ea 	bl	8000158 <__addsf3>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f7ff f9e5 	bl	8000158 <__addsf3>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
//			v->Ui = v->Ui + v->Err * v->DeltaT;
//		}
	}

	// Compute the differential component
	if (v->Kd) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f04f 0100 	mov.w	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc76 	bl	8000690 <__aeabi_fcmpeq>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d117      	bne.n	8000dda <pid_reg_calc+0x138>
		v->Ud = (v->Err - v->PrevErr) / v->DeltaT;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689c      	ldr	r4, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa84 	bl	80002c0 <__aeabi_i2f>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff f9c9 	bl	8000154 <__aeabi_fsub>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f7ff fb7f 	bl	80004d0 <__aeabi_fdiv>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Compute the pre-saturated output
	v->OutPreSat = v->Up + v->Ui * v->Ki + v->Ud * v->Kd;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1c      	ldr	r4, [r3, #32]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4610      	mov	r0, r2
 8000dea:	f7ff fabd 	bl	8000368 <__aeabi_fmul>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff f9b0 	bl	8000158 <__addsf3>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461c      	mov	r4, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4610      	mov	r0, r2
 8000e08:	f7ff faae 	bl	8000368 <__aeabi_fmul>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff f9a1 	bl	8000158 <__addsf3>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fc6b 	bl	80006f4 <__aeabi_f2iz>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34

	// Saturation
	if (v->OutPreSat >= v->OutMax) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	db08      	blt.n	8000e42 <pid_reg_calc+0x1a0>
		//v->SatErr = v->OutPreSat - v->OutMax;
		v->Out = v->OutMax;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
		v->InSaturationFlag = 1;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000e40:	e016      	b.n	8000e70 <pid_reg_calc+0x1ce>
	} else {
		if (v->OutPreSat <= v->OutMin) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dc08      	bgt.n	8000e60 <pid_reg_calc+0x1be>
			//v->SatErr = v->OutPreSat - v->OutMin;
			v->Out = v->OutMin;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
			v->InSaturationFlag = 1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000e5e:	e007      	b.n	8000e70 <pid_reg_calc+0x1ce>
		} else {
			v->Out = v->OutPreSat;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
			v->InSaturationFlag = 0;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
	}

	// Set currently used error value as previous
	v->PrevErr = v->Err;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fc3d 	bl	80006f4 <__aeabi_f2iz>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}

08000e88 <RegParamsUpd>:

void RegParamsUpd(volatile PIDREG *v, float kp, float ki, float kd, float dt,
		int32_t MaxOut, int32_t MinOut, int8_t flag, float Threshold, float antiwindup) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
	v->Kp = kp;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
	v->Ki = ki;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
	v->Kd = kd;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	615a      	str	r2, [r3, #20]
	v->DeltaT = dt;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
	v->OutMax = MaxOut;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
	v->OutMin = MinOut;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
	v->ErrThreshold = Threshold;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ebe:	61da      	str	r2, [r3, #28]
	v->ShrinkFlag = flag;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ec6:	761a      	strb	r2, [r3, #24]
	v->Kt = antiwindup;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x5c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_MspInit+0x60>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_MspInit+0x60>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 fb83 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	EncoderPosition(&enc1);
 8000f90:	481c      	ldr	r0, [pc, #112]	; (8001004 <TIM3_IRQHandler+0x78>)
 8000f92:	f7ff fc4f 	bl	8000834 <EncoderPosition>
	pid_reg_calc(&ang_reg);
 8000f96:	481c      	ldr	r0, [pc, #112]	; (8001008 <TIM3_IRQHandler+0x7c>)
 8000f98:	f7ff fe83 	bl	8000ca2 <pid_reg_calc>
	pid_reg_calc(&vel_reg);
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <TIM3_IRQHandler+0x80>)
 8000f9e:	f7ff fe80 	bl	8000ca2 <pid_reg_calc>

	timed += 1;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <TIM3_IRQHandler+0x84>)
 8000fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	b25a      	sxtb	r2, r3
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <TIM3_IRQHandler+0x84>)
 8000fb2:	701a      	strb	r2, [r3, #0]

	if (timed >= 30) {
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <TIM3_IRQHandler+0x84>)
 8000fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fba:	2b1d      	cmp	r3, #29
 8000fbc:	dd1d      	ble.n	8000ffa <TIM3_IRQHandler+0x6e>
		EncoderVelocity(&enc1);
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <TIM3_IRQHandler+0x78>)
 8000fc0:	f7ff fc9e 	bl	8000900 <EncoderVelocity>
		MedianVel = Median_Enc1(enc1.AngVel);
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <TIM3_IRQHandler+0x78>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb93 	bl	80006f4 <__aeabi_f2iz>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f825 	bl	8001020 <Median_Enc1>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f971 	bl	80002c0 <__aeabi_i2f>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <TIM3_IRQHandler+0x88>)
 8000fe2:	6013      	str	r3, [r2, #0]
		FilteredVel = SMA(MedianVel);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <TIM3_IRQHandler+0x88>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f8c9 	bl	8001180 <SMA>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a09      	ldr	r2, [pc, #36]	; (8001018 <TIM3_IRQHandler+0x8c>)
 8000ff2:	6013      	str	r3, [r2, #0]
		timed = 0;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <TIM3_IRQHandler+0x84>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <TIM3_IRQHandler+0x90>)
 8000ffc:	f001 ff26 	bl	8002e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000f8 	.word	0x200000f8
 8001008:	20000058 	.word	0x20000058
 800100c:	200000a4 	.word	0x200000a4
 8001010:	20000124 	.word	0x20000124
 8001014:	20000128 	.word	0x20000128
 8001018:	20000120 	.word	0x20000120
 800101c:	200002b8 	.word	0x200002b8

08001020 <Median_Enc1>:

/* USER CODE BEGIN 1 */
int Median_Enc1(int newVal) {
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <Median_Enc1+0x158>)
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff f947 	bl	80002c0 <__aeabi_i2f>
 8001032:	4603      	mov	r3, r0
 8001034:	4a51      	ldr	r2, [pc, #324]	; (800117c <Median_Enc1+0x15c>)
 8001036:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 800103a:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <Median_Enc1+0x158>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b1c      	cmp	r3, #28
 8001040:	d840      	bhi.n	80010c4 <Median_Enc1+0xa4>
 8001042:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <Median_Enc1+0x158>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a4d      	ldr	r2, [pc, #308]	; (800117c <Median_Enc1+0x15c>)
 8001048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800104c:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <Median_Enc1+0x158>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	494a      	ldr	r1, [pc, #296]	; (800117c <Median_Enc1+0x15c>)
 8001054:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001058:	4619      	mov	r1, r3
 800105a:	4610      	mov	r0, r2
 800105c:	f7ff fb40 	bl	80006e0 <__aeabi_fcmpgt>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d02e      	beq.n	80010c4 <Median_Enc1+0xa4>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <Median_Enc1+0x158>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e026      	b.n	80010bc <Median_Enc1+0x9c>
			if (buffer[i] > buffer[i + 1]) {
 800106e:	4a43      	ldr	r2, [pc, #268]	; (800117c <Median_Enc1+0x15c>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	4940      	ldr	r1, [pc, #256]	; (800117c <Median_Enc1+0x15c>)
 800107c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f7ff fb2c 	bl	80006e0 <__aeabi_fcmpgt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d013      	beq.n	80010b6 <Median_Enc1+0x96>
				float buff = buffer[i];
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <Median_Enc1+0x15c>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	4a37      	ldr	r2, [pc, #220]	; (800117c <Median_Enc1+0x15c>)
 800109e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a2:	4936      	ldr	r1, [pc, #216]	; (800117c <Median_Enc1+0x15c>)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4933      	ldr	r1, [pc, #204]	; (800117c <Median_Enc1+0x15c>)
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b1c      	cmp	r3, #28
 80010c0:	ddd5      	ble.n	800106e <Median_Enc1+0x4e>
 80010c2:	e043      	b.n	800114c <Median_Enc1+0x12c>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <Median_Enc1+0x158>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d03f      	beq.n	800114c <Median_Enc1+0x12c>
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <Median_Enc1+0x158>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <Median_Enc1+0x15c>)
 80010d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <Median_Enc1+0x158>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4927      	ldr	r1, [pc, #156]	; (800117c <Median_Enc1+0x15c>)
 80010de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4610      	mov	r0, r2
 80010e6:	f7ff fafb 	bl	80006e0 <__aeabi_fcmpgt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d02d      	beq.n	800114c <Median_Enc1+0x12c>
			for (int i = count; i > 0; i--) {
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <Median_Enc1+0x158>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	e026      	b.n	8001146 <Median_Enc1+0x126>
				if (buffer[i] < buffer[i - 1]) {
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <Median_Enc1+0x15c>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	3b01      	subs	r3, #1
 8001104:	491d      	ldr	r1, [pc, #116]	; (800117c <Median_Enc1+0x15c>)
 8001106:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff fac9 	bl	80006a4 <__aeabi_fcmplt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <Median_Enc1+0x120>
					float buff = buffer[i];
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <Median_Enc1+0x15c>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <Median_Enc1+0x15c>)
 8001128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800112c:	4913      	ldr	r1, [pc, #76]	; (800117c <Median_Enc1+0x15c>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	3b01      	subs	r3, #1
 8001138:	4910      	ldr	r1, [pc, #64]	; (800117c <Median_Enc1+0x15c>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	3b01      	subs	r3, #1
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dcd5      	bgt.n	80010f8 <Median_Enc1+0xd8>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <Median_Enc1+0x158>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <Median_Enc1+0x158>)
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <Median_Enc1+0x158>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b1d      	cmp	r3, #29
 800115c:	d902      	bls.n	8001164 <Median_Enc1+0x144>
		count = 0;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <Median_Enc1+0x158>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <Median_Enc1+0x15c>)
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fac3 	bl	80006f4 <__aeabi_f2iz>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	2000012c 	.word	0x2000012c
 800117c:	20000130 	.word	0x20000130

08001180 <SMA>:

float SMA(float newVal) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  static int t = 0;
  static float vals[NUM_READ];
  static float average = 0;
  if (++t >= NUM_READ) t = 0; // перемотка t
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <SMA+0x74>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <SMA+0x74>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <SMA+0x74>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b1d      	cmp	r3, #29
 8001198:	dd02      	ble.n	80011a0 <SMA+0x20>
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <SMA+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
  average -= vals[t];         // вычитаем старое
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <SMA+0x78>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <SMA+0x74>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4914      	ldr	r1, [pc, #80]	; (80011fc <SMA+0x7c>)
 80011aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4610      	mov	r0, r2
 80011b2:	f7fe ffcf 	bl	8000154 <__aeabi_fsub>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <SMA+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  average += newVal;          // прибавляем новое
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <SMA+0x78>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7fe ffc7 	bl	8000158 <__addsf3>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <SMA+0x78>)
 80011d0:	601a      	str	r2, [r3, #0]
  vals[t] = newVal;           // запоминаем в массив
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SMA+0x74>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4909      	ldr	r1, [pc, #36]	; (80011fc <SMA+0x7c>)
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return ((float)average / NUM_READ);
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SMA+0x78>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4907      	ldr	r1, [pc, #28]	; (8001200 <SMA+0x80>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f973 	bl	80004d0 <__aeabi_fdiv>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001a8 	.word	0x200001a8
 80011f8:	200001ac 	.word	0x200001ac
 80011fc:	200001b0 	.word	0x200001b0
 8001200:	41f00000 	.word	0x41f00000

08001204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2224      	movs	r2, #36	; 0x24
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 faae 	bl	8003780 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_TIM1_Init+0xa8>)
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <MX_TIM1_Init+0xac>)
 8001230:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_TIM1_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_TIM1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM1_Init+0xa8>)
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM1_Init+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM1_Init+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM1_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001258:	2303      	movs	r3, #3
 800125a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001268:	230f      	movs	r3, #15
 800126a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001270:	2301      	movs	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001278:	230f      	movs	r3, #15
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_TIM1_Init+0xa8>)
 8001284:	f001 fcb2 	bl	8002bec <HAL_TIM_Encoder_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800128e:	f7ff fd03 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_TIM1_Init+0xa8>)
 80012a0:	f002 f9da 	bl	8003658 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80012aa:	f7ff fcf5 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000228 	.word	0x20000228
 80012bc:	40012c00 	.word	0x40012c00

080012c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fa56 	bl	8003780 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_TIM2_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001304:	2302      	movs	r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_TIM2_Init+0xa4>)
 8001330:	f001 fc5c 	bl	8002bec <HAL_TIM_Encoder_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800133a:	f7ff fcad 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_TIM2_Init+0xa4>)
 800134c:	f002 f984 	bl	8003658 <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001356:	f7ff fc9f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000270 	.word	0x20000270

08001368 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <MX_TIM3_Init+0xc0>)
 800138c:	4a27      	ldr	r2, [pc, #156]	; (800142c <MX_TIM3_Init+0xc4>)
 800138e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <MX_TIM3_Init+0xc0>)
 8001392:	2217      	movs	r2, #23
 8001394:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_TIM3_Init+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_TIM3_Init+0xc0>)
 800139e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_TIM3_Init+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_TIM3_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b0:	481d      	ldr	r0, [pc, #116]	; (8001428 <MX_TIM3_Init+0xc0>)
 80013b2:	f001 fb29 	bl	8002a08 <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013bc:	f7ff fc6c 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4619      	mov	r1, r3
 80013ce:	4816      	ldr	r0, [pc, #88]	; (8001428 <MX_TIM3_Init+0xc0>)
 80013d0:	f002 f942 	bl	8003658 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013da:	f7ff fc5d 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	; 0x60
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM3_Init+0xc0>)
 80013f6:	f001 fe31 	bl	800305c <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001400:	f7ff fc4a 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2204      	movs	r2, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM3_Init+0xc0>)
 800140c:	f001 fe26 	bl	800305c <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001416:	f7ff fc3f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM3_Init+0xc0>)
 800141c:	f000 f898 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002b8 	.word	0x200002b8
 800142c:	40000400 	.word	0x40000400

08001430 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d125      	bne.n	800149c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a29      	ldr	r2, [pc, #164]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a23      	ldr	r2, [pc, #140]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	4619      	mov	r1, r3
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001496:	f000 fc35 	bl	8001d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800149a:	e028      	b.n	80014ee <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a4:	d123      	bne.n	80014ee <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014ea:	f000 fc0b 	bl	8001d04 <HAL_GPIO_Init>
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40012c00 	.word	0x40012c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010800 	.word	0x40010800

08001504 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_TIM_PWM_MspInit+0x44>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d113      	bne.n	800153e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_TIM_PWM_MspInit+0x48>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_TIM_PWM_MspInit+0x48>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_TIM_PWM_MspInit+0x48>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201d      	movs	r0, #29
 8001534:	f000 fbaf 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001538:	201d      	movs	r0, #29
 800153a:	f000 fbc8 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40000400 	.word	0x40000400
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <HAL_TIM_MspPostInit+0x58>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d117      	bne.n	80015a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_TIM_MspPostInit+0x5c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_TIM_MspPostInit+0x5c>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_TIM_MspPostInit+0x5c>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001588:	23c0      	movs	r3, #192	; 0xc0
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2302      	movs	r3, #2
 8001592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_TIM_MspPostInit+0x60>)
 800159c:	f000 fbb2 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010800 	.word	0x40010800

080015b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015da:	f7ff fe13 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f002 f8ab 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e2:	f7ff fa23 	bl	8000a2c <main>
  bx lr
 80015e6:	4770      	bx	lr
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015f0:	080037d4 	.word	0x080037d4
  ldr r2, =_sbss
 80015f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015f8:	20000304 	.word	0x20000304

080015fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_2_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_Init+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_Init+0x28>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 fb35 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	200f      	movs	r0, #15
 8001618:	f000 f808 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fc5c 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40022000 	.word	0x40022000

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x54>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x58>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fb4d 	bl	8001cea <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 fb15 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <HAL_InitTick+0x5c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000000 	.word	0x20000000
 8001684:	20000008 	.word	0x20000008
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x1c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x20>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_IncTick+0x20>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000300 	.word	0x20000300

080016b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <HAL_GetTick+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000300 	.word	0x20000300

080016c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0be      	b.n	8001864 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff f85a 	bl	80007bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f9ab 	bl	8001a64 <ADC_ConversionStop_Disable>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8099 	bne.w	8001852 <HAL_ADC_Init+0x18e>
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8095 	bne.w	8001852 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	f043 0202 	orr.w	r2, r3, #2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800175c:	d003      	beq.n	8001766 <HAL_ADC_Init+0xa2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_ADC_Init+0xa8>
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	e000      	b.n	800176e <HAL_ADC_Init+0xaa>
 800176c:	2300      	movs	r3, #0
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7d1b      	ldrb	r3, [r3, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d119      	bne.n	80017b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	3b01      	subs	r3, #1
 800178a:	035a      	lsls	r2, r3, #13
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e00b      	b.n	80017b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f043 0220 	orr.w	r2, r3, #32
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_ADC_Init+0x1a8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_Init+0x126>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d104      	bne.n	80017f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_ADC_Init+0x1ac>)
 8001810:	4013      	ands	r3, r2
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800182e:	e018      	b.n	8001862 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	f023 0312 	bic.w	r3, r3, #18
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7dfb      	ldrb	r3, [r7, #23]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	ffe1f7fd 	.word	0xffe1f7fd
 8001870:	ff1f0efe 	.word	0xff1f0efe

08001874 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x20>
 8001890:	2302      	movs	r3, #2
 8001892:	e0dc      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x1da>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d81c      	bhi.n	80018de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b05      	subs	r3, #5
 80018b6:	221f      	movs	r2, #31
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	4019      	ands	r1, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b05      	subs	r3, #5
 80018d0:	fa00 f203 	lsl.w	r2, r0, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
 80018dc:	e03c      	b.n	8001958 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d81c      	bhi.n	8001920 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3b23      	subs	r3, #35	; 0x23
 80018f8:	221f      	movs	r2, #31
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	4019      	ands	r1, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3b23      	subs	r3, #35	; 0x23
 8001912:	fa00 f203 	lsl.w	r2, r0, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
 800191e:	e01b      	b.n	8001958 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b41      	subs	r3, #65	; 0x41
 8001932:	221f      	movs	r2, #31
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	4019      	ands	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b41      	subs	r3, #65	; 0x41
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b09      	cmp	r3, #9
 800195e:	d91c      	bls.n	800199a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68d9      	ldr	r1, [r3, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1e      	subs	r3, #30
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4019      	ands	r1, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6898      	ldr	r0, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3b1e      	subs	r3, #30
 800198c:	fa00 f203 	lsl.w	r2, r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	e019      	b.n	80019ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6919      	ldr	r1, [r3, #16]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	2207      	movs	r2, #7
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4019      	ands	r1, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d003      	beq.n	80019de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d132      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_ADC_ConfigChannel+0x1e4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d125      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d126      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d11a      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	0c9a      	lsrs	r2, r3, #18
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x1b2>
 8001a32:	e007      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40012400 	.word	0x40012400
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	431bde83 	.word	0x431bde83

08001a64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d12e      	bne.n	8001adc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a8e:	f7ff fe0f 	bl	80016b0 <HAL_GetTick>
 8001a92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a94:	e01b      	b.n	8001ace <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a96:	f7ff fe0b 	bl	80016b0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d914      	bls.n	8001ace <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10d      	bne.n	8001ace <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e007      	b.n	8001ade <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d0dc      	beq.n	8001a96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4906      	ldr	r1, [pc, #24]	; (8001b80 <__NVIC_EnableIRQ+0x34>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff90 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff2d 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff42 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff90 	bl	8001bd8 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5f 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff35 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b08b      	sub	sp, #44	; 0x2c
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	e169      	b.n	8001fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8158 	bne.w	8001fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a9a      	ldr	r2, [pc, #616]	; (8001fa4 <HAL_GPIO_Init+0x2a0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d05e      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d40:	4a98      	ldr	r2, [pc, #608]	; (8001fa4 <HAL_GPIO_Init+0x2a0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d875      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d46:	4a98      	ldr	r2, [pc, #608]	; (8001fa8 <HAL_GPIO_Init+0x2a4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d058      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d4c:	4a96      	ldr	r2, [pc, #600]	; (8001fa8 <HAL_GPIO_Init+0x2a4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d86f      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d52:	4a96      	ldr	r2, [pc, #600]	; (8001fac <HAL_GPIO_Init+0x2a8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d052      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d58:	4a94      	ldr	r2, [pc, #592]	; (8001fac <HAL_GPIO_Init+0x2a8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d869      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d5e:	4a94      	ldr	r2, [pc, #592]	; (8001fb0 <HAL_GPIO_Init+0x2ac>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04c      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d64:	4a92      	ldr	r2, [pc, #584]	; (8001fb0 <HAL_GPIO_Init+0x2ac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d863      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d6a:	4a92      	ldr	r2, [pc, #584]	; (8001fb4 <HAL_GPIO_Init+0x2b0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d046      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d70:	4a90      	ldr	r2, [pc, #576]	; (8001fb4 <HAL_GPIO_Init+0x2b0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d85d      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d82a      	bhi.n	8001dd0 <HAL_GPIO_Init+0xcc>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d859      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <HAL_GPIO_Init+0x80>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001dff 	.word	0x08001dff
 8001d88:	08001dd9 	.word	0x08001dd9
 8001d8c:	08001deb 	.word	0x08001deb
 8001d90:	08001e2d 	.word	0x08001e2d
 8001d94:	08001e33 	.word	0x08001e33
 8001d98:	08001e33 	.word	0x08001e33
 8001d9c:	08001e33 	.word	0x08001e33
 8001da0:	08001e33 	.word	0x08001e33
 8001da4:	08001e33 	.word	0x08001e33
 8001da8:	08001e33 	.word	0x08001e33
 8001dac:	08001e33 	.word	0x08001e33
 8001db0:	08001e33 	.word	0x08001e33
 8001db4:	08001e33 	.word	0x08001e33
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e33 	.word	0x08001e33
 8001dc0:	08001e33 	.word	0x08001e33
 8001dc4:	08001e33 	.word	0x08001e33
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001df5 	.word	0x08001df5
 8001dd0:	4a79      	ldr	r2, [pc, #484]	; (8001fb8 <HAL_GPIO_Init+0x2b4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dd6:	e02c      	b.n	8001e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e029      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	3304      	adds	r3, #4
 8001de6:	623b      	str	r3, [r7, #32]
          break;
 8001de8:	e024      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	3308      	adds	r3, #8
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e01f      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e01a      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e06:	2304      	movs	r3, #4
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e013      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	611a      	str	r2, [r3, #16]
          break;
 8001e1e:	e009      	b.n	8001e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	615a      	str	r2, [r3, #20]
          break;
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          break;
 8001e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2bff      	cmp	r3, #255	; 0xff
 8001e38:	d801      	bhi.n	8001e3e <HAL_GPIO_Init+0x13a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	e001      	b.n	8001e42 <HAL_GPIO_Init+0x13e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d802      	bhi.n	8001e50 <HAL_GPIO_Init+0x14c>
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x152>
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3b08      	subs	r3, #8
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	210f      	movs	r1, #15
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	6a39      	ldr	r1, [r7, #32]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80b1 	beq.w	8001fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e84:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a4c      	ldr	r2, [pc, #304]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e9c:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_GPIO_Init+0x2bc>)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <HAL_GPIO_Init+0x2c0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_GPIO_Init+0x1ec>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3f      	ldr	r2, [pc, #252]	; (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00d      	beq.n	8001eec <HAL_GPIO_Init+0x1e8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	; (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <HAL_GPIO_Init+0x1e4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3d      	ldr	r2, [pc, #244]	; (8001fd0 <HAL_GPIO_Init+0x2cc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_GPIO_Init+0x1e0>
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e006      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f02:	492f      	ldr	r1, [pc, #188]	; (8001fc0 <HAL_GPIO_Init+0x2bc>)
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	492c      	ldr	r1, [pc, #176]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4928      	ldr	r1, [pc, #160]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4922      	ldr	r1, [pc, #136]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	491e      	ldr	r1, [pc, #120]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4914      	ldr	r1, [pc, #80]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d021      	beq.n	8001fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e021      	b.n	8001fe6 <HAL_GPIO_Init+0x2e2>
 8001fa2:	bf00      	nop
 8001fa4:	10320000 	.word	0x10320000
 8001fa8:	10310000 	.word	0x10310000
 8001fac:	10220000 	.word	0x10220000
 8001fb0:	10210000 	.word	0x10210000
 8001fb4:	10120000 	.word	0x10120000
 8001fb8:	10110000 	.word	0x10110000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	40011000 	.word	0x40011000
 8001fd0:	40011400 	.word	0x40011400
 8001fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_GPIO_Init+0x304>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4909      	ldr	r1, [pc, #36]	; (8002008 <HAL_GPIO_Init+0x304>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	3301      	adds	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f47f ae8e 	bne.w	8001d18 <HAL_GPIO_Init+0x14>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	372c      	adds	r7, #44	; 0x2c
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40010400 	.word	0x40010400

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e272      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8087 	beq.w	800216a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800205c:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b04      	cmp	r3, #4
 8002066:	d00c      	beq.n	8002082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002068:	4b8f      	ldr	r3, [pc, #572]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d112      	bne.n	800209a <HAL_RCC_OscConfig+0x5e>
 8002074:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d10b      	bne.n	800209a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d06c      	beq.n	8002168 <HAL_RCC_OscConfig+0x12c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d168      	bne.n	8002168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e24c      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x76>
 80020a4:	4b80      	ldr	r3, [pc, #512]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a7f      	ldr	r2, [pc, #508]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e02e      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b78      	ldr	r3, [pc, #480]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a77      	ldr	r2, [pc, #476]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0xbc>
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a71      	ldr	r2, [pc, #452]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020f8:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6a      	ldr	r2, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff faca 	bl	80016b0 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fac6 	bl	80016b0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e200      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xe4>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fab6 	bl	80016b0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fab2 	bl	80016b0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1ec      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x10c>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002176:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002182:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d11c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x18c>
 800218e:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1c0      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4939      	ldr	r1, [pc, #228]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	e03a      	b.n	800223e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_OscConfig+0x270>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff fa6b 	bl	80016b0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fa67 	bl	80016b0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1a1      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4927      	ldr	r1, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCC_OscConfig+0x270>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fa4a 	bl	80016b0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fa46 	bl	80016b0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e180      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03a      	beq.n	80022c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fa2a 	bl	80016b0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa26 	bl	80016b0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e160      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 fa9c 	bl	80027bc <RCC_Delay>
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff fa10 	bl	80016b0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fa0c 	bl	80016b0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d908      	bls.n	80022b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e146      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	42420000 	.word	0x42420000
 80022b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e9      	bne.n	8002294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a6 	beq.w	800241a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b85      	ldr	r3, [pc, #532]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7e      	ldr	r2, [pc, #504]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff f9cd 	bl	80016b0 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff f9c9 	bl	80016b0 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e103      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b75      	ldr	r3, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x312>
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e02d      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002356:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x356>
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a60      	ldr	r2, [pc, #384]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 8002392:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a5a      	ldr	r2, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff f97d 	bl	80016b0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff f979 	bl	80016b0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0b1      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x37e>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f967 	bl	80016b0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff f963 	bl	80016b0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e09b      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d061      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d146      	bne.n	80024c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCC_OscConfig+0x4cc>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff f937 	bl	80016b0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f933 	bl	80016b0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e06d      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d108      	bne.n	8002480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4921      	ldr	r1, [pc, #132]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a19      	ldr	r1, [r3, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	430b      	orrs	r3, r1
 8002492:	491b      	ldr	r1, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff f907 	bl	80016b0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff f903 	bl	80016b0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e03d      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x46a>
 80024c4:	e035      	b.n	8002532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f8f0 	bl	80016b0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f8ec 	bl	80016b0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e026      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x498>
 80024f2:	e01e      	b.n	8002532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e019      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x500>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0d0      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d910      	bls.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b67      	ldr	r3, [pc, #412]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4965      	ldr	r1, [pc, #404]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	494d      	ldr	r1, [pc, #308]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d040      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d115      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e073      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4936      	ldr	r1, [pc, #216]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7ff f83e 	bl	80016b0 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff f83a 	bl	80016b0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e053      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d210      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4922      	ldr	r1, [pc, #136]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4916      	ldr	r1, [pc, #88]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490e      	ldr	r1, [pc, #56]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f821 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490a      	ldr	r1, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1cc>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe ff9c 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	080037a8 	.word	0x080037a8
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x30>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x36>
 8002742:	e027      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	e027      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0c5b      	lsrs	r3, r3, #17
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002776:	fb03 f202 	mul.w	r2, r3, r2
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e004      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	613b      	str	r3, [r7, #16]
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002796:	613b      	str	r3, [r7, #16]
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	693b      	ldr	r3, [r7, #16]
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	007a1200 	.word	0x007a1200
 80027b0:	080037b8 	.word	0x080037b8
 80027b4:	080037c8 	.word	0x080037c8
 80027b8:	003d0900 	.word	0x003d0900

080027bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <RCC_Delay+0x34>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <RCC_Delay+0x38>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a5b      	lsrs	r3, r3, #9
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027d8:	bf00      	nop
  }
  while (Delay --);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	60fa      	str	r2, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f9      	bne.n	80027d8 <RCC_Delay+0x1c>
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	20000000 	.word	0x20000000
 80027f4:	10624dd3 	.word	0x10624dd3

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d07d      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a4b      	ldr	r2, [pc, #300]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	61d3      	str	r3, [r2, #28]
 8002830:	4b49      	ldr	r3, [pc, #292]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283c:	2301      	movs	r3, #1
 800283e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d118      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a42      	ldr	r2, [pc, #264]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002858:	f7fe ff2a 	bl	80016b0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	e008      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe ff26 	bl	80016b0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e06d      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b3a      	ldr	r3, [pc, #232]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800287e:	4b36      	ldr	r3, [pc, #216]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02e      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d027      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800289c:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a6:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ac:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028b2:	4a29      	ldr	r2, [pc, #164]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d014      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fef5 	bl	80016b0 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe fef1 	bl	80016b0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e036      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ee      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4917      	ldr	r1, [pc, #92]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	490b      	ldr	r1, [pc, #44]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
 8002960:	42420440 	.word	0x42420440

08002964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e03a      	b.n	80029f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a18      	ldr	r2, [pc, #96]	; (80029fc <HAL_TIM_Base_Start_IT+0x98>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00e      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x58>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d009      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x58>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_TIM_Base_Start_IT+0x9c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x58>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_TIM_Base_Start_IT+0xa0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d010      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	e007      	b.n	80029f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800

08002a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fd68 	bl	8001504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fbf8 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_TIM_PWM_Start+0x24>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e022      	b.n	8002b12 <HAL_TIM_PWM_Start+0x6a>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d109      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x3e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e015      	b.n	8002b12 <HAL_TIM_PWM_Start+0x6a>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d109      	bne.n	8002b00 <HAL_TIM_PWM_Start+0x58>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e008      	b.n	8002b12 <HAL_TIM_PWM_Start+0x6a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e05e      	b.n	8002bd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x82>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_PWM_Start+0xaa>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x92>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b38:	e00b      	b.n	8002b52 <HAL_TIM_PWM_Start+0xaa>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xa2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	e003      	b.n	8002b52 <HAL_TIM_PWM_Start+0xaa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fd58 	bl	8003610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_TIM_PWM_Start+0x138>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d107      	bne.n	8002b7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_TIM_PWM_Start+0x138>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0xfa>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0xfa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_TIM_PWM_Start+0x13c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0xfa>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_TIM_PWM_Start+0x140>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d111      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d010      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	e007      	b.n	8002bd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800

08002bec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e093      	b.n	8002d28 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fe fc0b 	bl	8001430 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c30:	f023 0307 	bic.w	r3, r3, #7
 8002c34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4610      	mov	r0, r2
 8002c42:	f000 fafb 	bl	800323c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c8c:	f023 030c 	bic.w	r3, r3, #12
 8002c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	011a      	lsls	r2, r3, #4
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d110      	bne.n	8002d82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d66:	7b7b      	ldrb	r3, [r7, #13]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d001      	beq.n	8002d70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e069      	b.n	8002e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d80:	e031      	b.n	8002de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d110      	bne.n	8002daa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d88:	7bbb      	ldrb	r3, [r7, #14]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d8e:	7b3b      	ldrb	r3, [r7, #12]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d001      	beq.n	8002d98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e055      	b.n	8002e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da8:	e01d      	b.n	8002de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002db0:	7bbb      	ldrb	r3, [r7, #14]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dbc:	7b3b      	ldrb	r3, [r7, #12]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e03e      	b.n	8002e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_TIM_Encoder_Start+0xc4>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d008      	beq.n	8002e04 <HAL_TIM_Encoder_Start+0xd4>
 8002df2:	e00f      	b.n	8002e14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fc07 	bl	8003610 <TIM_CCxChannelCmd>
      break;
 8002e02:	e016      	b.n	8002e32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fbff 	bl	8003610 <TIM_CCxChannelCmd>
      break;
 8002e12:	e00e      	b.n	8002e32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fbf7 	bl	8003610 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2201      	movs	r2, #1
 8002e28:	2104      	movs	r1, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fbf0 	bl	8003610 <TIM_CCxChannelCmd>
      break;
 8002e30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0202 	mvn.w	r2, #2
 8002e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9b8 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9ab 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f9ba 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0204 	mvn.w	r2, #4
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f98e 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f981 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f990 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0208 	mvn.w	r2, #8
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f964 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f957 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f966 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0210 	mvn.w	r2, #16
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f93a 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f92d 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f93c 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f908 	bl	80031e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb95 	bl	8003726 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f900 	bl	8003228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0220 	mvn.w	r2, #32
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fb60 	bl	8003714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003076:	2302      	movs	r3, #2
 8003078:	e0ae      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	f200 809f 	bhi.w	80031c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030c5 	.word	0x080030c5
 8003094:	080031c9 	.word	0x080031c9
 8003098:	080031c9 	.word	0x080031c9
 800309c:	080031c9 	.word	0x080031c9
 80030a0:	08003105 	.word	0x08003105
 80030a4:	080031c9 	.word	0x080031c9
 80030a8:	080031c9 	.word	0x080031c9
 80030ac:	080031c9 	.word	0x080031c9
 80030b0:	08003147 	.word	0x08003147
 80030b4:	080031c9 	.word	0x080031c9
 80030b8:	080031c9 	.word	0x080031c9
 80030bc:	080031c9 	.word	0x080031c9
 80030c0:	08003187 	.word	0x08003187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f918 	bl	8003300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
      break;
 8003102:	e064      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f95e 	bl	80033cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6999      	ldr	r1, [r3, #24]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]
      break;
 8003144:	e043      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f9a7 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0208 	orr.w	r2, r2, #8
 8003160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0204 	bic.w	r2, r2, #4
 8003170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	61da      	str	r2, [r3, #28]
      break;
 8003184:	e023      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f9f1 	bl	8003574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69d9      	ldr	r1, [r3, #28]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	61da      	str	r2, [r3, #28]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
      break;
 80031cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
	...

0800323c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x30>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x30>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x30>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <TIM_Base_SetConfig+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x62>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <TIM_Base_SetConfig+0xc0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800

08003300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f023 0201 	bic.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 0302 	bic.w	r3, r3, #2
 8003348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <TIM_OC1_SetConfig+0xc8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10c      	bne.n	8003376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0308 	bic.w	r3, r3, #8
 8003362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <TIM_OC1_SetConfig+0xc8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40012c00 	.word	0x40012c00

080033cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f023 0210 	bic.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0320 	bic.w	r3, r3, #32
 8003416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <TIM_OC2_SetConfig+0xd0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10d      	bne.n	8003448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <TIM_OC2_SetConfig+0xd0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d113      	bne.n	8003478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <TIM_OC3_SetConfig+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10d      	bne.n	800351a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <TIM_OC3_SetConfig+0xd0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d113      	bne.n	800354a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00

08003574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0f      	ldr	r2, [pc, #60]	; (800360c <TIM_OC4_SetConfig+0x98>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	40012c00 	.word	0x40012c00

08003610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	43db      	mvns	r3, r3
 8003632:	401a      	ands	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	431a      	orrs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800366c:	2302      	movs	r3, #2
 800366e:	e046      	b.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d009      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a10      	ldr	r2, [pc, #64]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800

08003714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	2600      	movs	r6, #0
 800373c:	4d0c      	ldr	r5, [pc, #48]	; (8003770 <__libc_init_array+0x38>)
 800373e:	4c0d      	ldr	r4, [pc, #52]	; (8003774 <__libc_init_array+0x3c>)
 8003740:	1b64      	subs	r4, r4, r5
 8003742:	10a4      	asrs	r4, r4, #2
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	f000 f822 	bl	8003790 <_init>
 800374c:	2600      	movs	r6, #0
 800374e:	4d0a      	ldr	r5, [pc, #40]	; (8003778 <__libc_init_array+0x40>)
 8003750:	4c0a      	ldr	r4, [pc, #40]	; (800377c <__libc_init_array+0x44>)
 8003752:	1b64      	subs	r4, r4, r5
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080037cc 	.word	0x080037cc
 8003774:	080037cc 	.word	0x080037cc
 8003778:	080037cc 	.word	0x080037cc
 800377c:	080037d0 	.word	0x080037d0

08003780 <memset>:
 8003780:	4603      	mov	r3, r0
 8003782:	4402      	add	r2, r0
 8003784:	4293      	cmp	r3, r2
 8003786:	d100      	bne.n	800378a <memset+0xa>
 8003788:	4770      	bx	lr
 800378a:	f803 1b01 	strb.w	r1, [r3], #1
 800378e:	e7f9      	b.n	8003784 <memset+0x4>

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
