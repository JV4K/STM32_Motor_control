
Servo_Controller_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003efc  08003efc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003efc  08003efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  08003f10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003f10  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ace  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa0  00000000  00000000  00029b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d1c  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b43b  00000000  00000000  000435ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843d3  00000000  00000000  0004ea27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2dfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002adc  00000000  00000000  000d2e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ec0 	.word	0x08003ec0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003ec0 	.word	0x08003ec0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <EncoderReset>:
 *      Author: JV4K
 */

#include <encoder_assert.h>

void EncoderReset(volatile ENCODER *enc) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	enc->CurRots = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
	enc->Angle = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
	enc->htim->Instance->CNT = 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	0000      	movs	r0, r0
 8000fac:	0000      	movs	r0, r0
	...

08000fb0 <EncoderPosition>:

void EncoderPosition(volatile ENCODER *enc) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	enc->CntValUint = enc->htim->Instance->CNT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	80da      	strh	r2, [r3, #6]
	enc->CntValInt = (int16_t) enc->CntValUint;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	88db      	ldrh	r3, [r3, #6]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	811a      	strh	r2, [r3, #8]
	if (enc->CntValInt < -enc->CPR) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	891b      	ldrh	r3, [r3, #8]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	da0a      	bge.n	8000ffc <EncoderPosition+0x4c>
		enc->htim->Instance->CNT = 0;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
		enc->CurRots--;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	e011      	b.n	8001020 <EncoderPosition+0x70>
	} else {
		if (enc->CntValInt > enc->CPR) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	891b      	ldrh	r3, [r3, #8]
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	889b      	ldrh	r3, [r3, #4]
 8001006:	b21b      	sxth	r3, r3
 8001008:	429a      	cmp	r2, r3
 800100a:	dd09      	ble.n	8001020 <EncoderPosition+0x70>
			enc->htim->Instance->CNT = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
			enc->CurRots++;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	60da      	str	r2, [r3, #12]
		}
	}

	// Get how many ticks happened from a starting point
	enc->CurTicks = (enc->CurRots * enc->CPR) + (enc->CntValInt);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	8892      	ldrh	r2, [r2, #4]
 8001028:	b212      	sxth	r2, r2
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	8912      	ldrh	r2, [r2, #8]
 8001032:	b212      	sxth	r2, r2
 8001034:	441a      	add	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	611a      	str	r2, [r3, #16]

	// Transform ticks to angle in radian
	enc->Angle = ((float) (enc->CurTicks) / enc->CPR) * 2 * PI;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fd5e 	bl	8000b00 <__aeabi_i2f>
 8001044:	4604      	mov	r4, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fd57 	bl	8000b00 <__aeabi_i2f>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff fe5a 	bl	8000d10 <__aeabi_fdiv>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fc99 	bl	8000998 <__addsf3>
 8001066:	4603      	mov	r3, r0
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f9d5 	bl	8000418 <__aeabi_f2d>
 800106e:	a30a      	add	r3, pc, #40	; (adr r3, 8001098 <EncoderPosition+0xe8>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fa28 	bl	80004c8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fc34 	bl	80008ec <__aeabi_d2f>
 8001084:	4602      	mov	r2, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	615a      	str	r2, [r3, #20]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	53c8d4f1 	.word	0x53c8d4f1
 800109c:	400921fb 	.word	0x400921fb

080010a0 <EncoderVelocity>:

void EncoderVelocity(volatile ENCODER *enc) {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	// Get ticks delta
	enc->DeltTicks = enc->CurTicks - enc->PrevTicks;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd27 	bl	8000b00 <__aeabi_i2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f7ff fc6a 	bl	8000994 <__aeabi_fsub>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->PrevTicks = enc->CurTicks;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fd17 	bl	8000b00 <__aeabi_i2f>
 80010d2:	4602      	mov	r2, r0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	621a      	str	r2, [r3, #32]

	// Compute angular velocity in radian/sec
	enc->AngVel = ((enc->DeltTicks/enc->CPR)*2*PI) / enc->SamplingPeriod;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fd0c 	bl	8000b00 <__aeabi_i2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fe0f 	bl	8000d10 <__aeabi_fdiv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fc4e 	bl	8000998 <__addsf3>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f98a 	bl	8000418 <__aeabi_f2d>
 8001104:	a310      	add	r3, pc, #64	; (adr r3, 8001148 <EncoderVelocity+0xa8>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff f9dd 	bl	80004c8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4614      	mov	r4, r2
 8001114:	461d      	mov	r5, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f97c 	bl	8000418 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff faf8 	bl	800071c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fbda 	bl	80008ec <__aeabi_d2f>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bdb0      	pop	{r4, r5, r7, pc}
 8001146:	bf00      	nop
 8001148:	53c8d4f1 	.word	0x53c8d4f1
 800114c:	400921fb 	.word	0x400921fb

08001150 <EncoderInit>:

void EncoderInit(volatile ENCODER *enc, TIM_HandleTypeDef *htim_new,
		int16_t CPR_new, float period) {
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4613      	mov	r3, r2
 800115e:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim_new;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	601a      	str	r2, [r3, #0]
	enc->CPR = CPR_new;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	809a      	strh	r2, [r3, #4]
	enc->SamplingPeriod = period;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	61da      	str	r2, [r3, #28]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_GPIO_Init+0x90>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <MX_GPIO_Init+0x90>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_GPIO_Init+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_GPIO_Init+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_GPIO_Init+0x90>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_GPIO_Init+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_GPIO_Init+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_GPIO_Init+0x90>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_GPIO_Init+0x90>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|ENA2_Pin|INA_Pin
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_GPIO_Init+0x94>)
 80011e0:	f001 fb62 	bl	80028a8 <HAL_GPIO_WritePin>
                          |INB_Pin|ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|ENA2_Pin|INA_Pin
 80011e4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80011e8:	613b      	str	r3, [r7, #16]
                          |INB_Pin|ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0x94>)
 80011fe:	f001 f9cf 	bl	80025a0 <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010c00 	.word	0x40010c00

08001214 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800121a:	f001 f851 	bl	80022c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800121e:	f000 f9ff 	bl	8001620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001222:	f7ff ffab 	bl	800117c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001226:	f000 fe53 	bl	8001ed0 <MX_TIM1_Init>
	MX_TIM2_Init();
 800122a:	f000 fea9 	bl	8001f80 <MX_TIM2_Init>
	MX_TIM3_Init();
 800122e:	f000 fefb 	bl	8002028 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	deltt = 0.00033333;
 8001232:	4b9c      	ldr	r3, [pc, #624]	; (80014a4 <main+0x290>)
 8001234:	4a9c      	ldr	r2, [pc, #624]	; (80014a8 <main+0x294>)
 8001236:	601a      	str	r2, [r3, #0]

	RegParamsUpd(&ang_reg1, 0.6, 0, 0.5, deltt, 800, -800, 3, 0, 0);
 8001238:	4b9a      	ldr	r3, [pc, #616]	; (80014a4 <main+0x290>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	9205      	str	r2, [sp, #20]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	9204      	str	r2, [sp, #16]
 8001248:	4a98      	ldr	r2, [pc, #608]	; (80014ac <main+0x298>)
 800124a:	9203      	str	r2, [sp, #12]
 800124c:	4a98      	ldr	r2, [pc, #608]	; (80014b0 <main+0x29c>)
 800124e:	9202      	str	r2, [sp, #8]
 8001250:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4994      	ldr	r1, [pc, #592]	; (80014b4 <main+0x2a0>)
 8001262:	4895      	ldr	r0, [pc, #596]	; (80014b8 <main+0x2a4>)
 8001264:	f000 fb57 	bl	8001916 <RegParamsUpd>
	RegParamsUpd(&vel_reg1, 0.25, 1.3, 0, 0.01, 998, -998, 0, 0, 0);
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	9305      	str	r3, [sp, #20]
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	9304      	str	r3, [sp, #16]
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	9303      	str	r3, [sp, #12]
 800127a:	4b90      	ldr	r3, [pc, #576]	; (80014bc <main+0x2a8>)
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	f240 33e6 	movw	r3, #998	; 0x3e6
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	4b8e      	ldr	r3, [pc, #568]	; (80014c0 <main+0x2ac>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	4a8d      	ldr	r2, [pc, #564]	; (80014c4 <main+0x2b0>)
 800128e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001292:	488d      	ldr	r0, [pc, #564]	; (80014c8 <main+0x2b4>)
 8001294:	f000 fb3f 	bl	8001916 <RegParamsUpd>
	EncoderInit(&enc1, &htim1, 44, 0.01);
 8001298:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <main+0x2ac>)
 800129a:	222c      	movs	r2, #44	; 0x2c
 800129c:	498b      	ldr	r1, [pc, #556]	; (80014cc <main+0x2b8>)
 800129e:	488c      	ldr	r0, [pc, #560]	; (80014d0 <main+0x2bc>)
 80012a0:	f7ff ff56 	bl	8001150 <EncoderInit>

	RegParamsUpd(&ang_reg2, 0.6, 0, 0.5, deltt, 800, -800, 3, 0, 0);
 80012a4:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <main+0x290>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	9205      	str	r2, [sp, #20]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	9204      	str	r2, [sp, #16]
 80012b4:	4a7d      	ldr	r2, [pc, #500]	; (80014ac <main+0x298>)
 80012b6:	9203      	str	r2, [sp, #12]
 80012b8:	4a7d      	ldr	r2, [pc, #500]	; (80014b0 <main+0x29c>)
 80012ba:	9202      	str	r2, [sp, #8]
 80012bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4979      	ldr	r1, [pc, #484]	; (80014b4 <main+0x2a0>)
 80012ce:	4881      	ldr	r0, [pc, #516]	; (80014d4 <main+0x2c0>)
 80012d0:	f000 fb21 	bl	8001916 <RegParamsUpd>
	RegParamsUpd(&vel_reg2, 0.25, 1.3, 0, 0.01, 998, -998, 0, 0, 0);
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	9305      	str	r3, [sp, #20]
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	9303      	str	r3, [sp, #12]
 80012e6:	4b75      	ldr	r3, [pc, #468]	; (80014bc <main+0x2a8>)
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	f240 33e6 	movw	r3, #998	; 0x3e6
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	4b73      	ldr	r3, [pc, #460]	; (80014c0 <main+0x2ac>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	4a72      	ldr	r2, [pc, #456]	; (80014c4 <main+0x2b0>)
 80012fa:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80012fe:	4876      	ldr	r0, [pc, #472]	; (80014d8 <main+0x2c4>)
 8001300:	f000 fb09 	bl	8001916 <RegParamsUpd>
	EncoderInit(&enc2, &htim2, 44, 0.01);
 8001304:	4b6e      	ldr	r3, [pc, #440]	; (80014c0 <main+0x2ac>)
 8001306:	222c      	movs	r2, #44	; 0x2c
 8001308:	4974      	ldr	r1, [pc, #464]	; (80014dc <main+0x2c8>)
 800130a:	4875      	ldr	r0, [pc, #468]	; (80014e0 <main+0x2cc>)
 800130c:	f7ff ff20 	bl	8001150 <EncoderInit>

	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001310:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <main+0x2b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0201 	mvn.w	r2, #1
 8001318:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800131a:	213c      	movs	r1, #60	; 0x3c
 800131c:	486b      	ldr	r0, [pc, #428]	; (80014cc <main+0x2b8>)
 800131e:	f002 f89f 	bl	8003460 <HAL_TIM_Encoder_Start>

	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001322:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <main+0x2c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f06f 0201 	mvn.w	r2, #1
 800132a:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800132c:	213c      	movs	r1, #60	; 0x3c
 800132e:	486b      	ldr	r0, [pc, #428]	; (80014dc <main+0x2c8>)
 8001330:	f002 f896 	bl	8003460 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001334:	2100      	movs	r1, #0
 8001336:	486b      	ldr	r0, [pc, #428]	; (80014e4 <main+0x2d0>)
 8001338:	f001 ff4e 	bl	80031d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800133c:	2104      	movs	r1, #4
 800133e:	4869      	ldr	r0, [pc, #420]	; (80014e4 <main+0x2d0>)
 8001340:	f001 ff4a 	bl	80031d8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001344:	4867      	ldr	r0, [pc, #412]	; (80014e4 <main+0x2d0>)
 8001346:	f001 fea5 	bl	8003094 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001350:	4865      	ldr	r0, [pc, #404]	; (80014e8 <main+0x2d4>)
 8001352:	f001 faa9 	bl	80028a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA2_GPIO_Port, ENA2_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2120      	movs	r1, #32
 800135a:	4863      	ldr	r0, [pc, #396]	; (80014e8 <main+0x2d4>)
 800135c:	f001 faa4 	bl	80028a8 <HAL_GPIO_WritePin>
	ModeCounter = 0;
 8001360:	4b62      	ldr	r3, [pc, #392]	; (80014ec <main+0x2d8>)
 8001362:	2200      	movs	r2, #0
 8001364:	801a      	strh	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (ModeCounter <= 3000) {
 8001366:	4b61      	ldr	r3, [pc, #388]	; (80014ec <main+0x2d8>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001370:	4293      	cmp	r3, r2
 8001372:	d806      	bhi.n	8001382 <main+0x16e>
			ang_reg1.Ref = 710;
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <main+0x2a4>)
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <main+0x2dc>)
 8001378:	601a      	str	r2, [r3, #0]
			ang_reg2.Ref = -710;
 800137a:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <main+0x2c0>)
 800137c:	4a5d      	ldr	r2, [pc, #372]	; (80014f4 <main+0x2e0>)
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e06e      	b.n	8001460 <main+0x24c>
		} else {
			if ((ModeCounter > 3000) && (ModeCounter <= 6000)) {
 8001382:	4b5a      	ldr	r3, [pc, #360]	; (80014ec <main+0x2d8>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800138c:	4293      	cmp	r3, r2
 800138e:	d90e      	bls.n	80013ae <main+0x19a>
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <main+0x2d8>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	f241 7270 	movw	r2, #6000	; 0x1770
 800139a:	4293      	cmp	r3, r2
 800139c:	d807      	bhi.n	80013ae <main+0x19a>
				if (STMNO == 1) {
					ang_reg1.Ref = 0;
					ang_reg2.Ref = -1420;
				} else {
					ang_reg1.Ref = 1420;
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <main+0x2a4>)
 80013a0:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <main+0x2e4>)
 80013a2:	601a      	str	r2, [r3, #0]
					ang_reg2.Ref = 0;
 80013a4:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <main+0x2c0>)
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
				if (STMNO == 1) {
 80013ac:	e058      	b.n	8001460 <main+0x24c>
				}

			} else {
				if ((ModeCounter > 6000) && (ModeCounter <= 9000)) {
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <main+0x2d8>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f241 7270 	movw	r2, #6000	; 0x1770
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d90d      	bls.n	80013d8 <main+0x1c4>
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <main+0x2d8>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	f242 3228 	movw	r2, #9000	; 0x2328
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d806      	bhi.n	80013d8 <main+0x1c4>
					if (STMNO == 1) {
						ang_reg1.Ref = 401.5;
						ang_reg2.Ref = -1018.5;
					} else {
						ang_reg1.Ref = 1821.5;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <main+0x2a4>)
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <main+0x2e8>)
 80013ce:	601a      	str	r2, [r3, #0]
						ang_reg2.Ref = 401.5;
 80013d0:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <main+0x2c0>)
 80013d2:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <main+0x2ec>)
 80013d4:	601a      	str	r2, [r3, #0]
					if (STMNO == 1) {
 80013d6:	e043      	b.n	8001460 <main+0x24c>
					}
				} else {
					if ((ModeCounter > 9000) && (ModeCounter <= 13000)) {
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <main+0x2d8>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f242 3228 	movw	r2, #9000	; 0x2328
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d90d      	bls.n	8001402 <main+0x1ee>
 80013e6:	4b41      	ldr	r3, [pc, #260]	; (80014ec <main+0x2d8>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d806      	bhi.n	8001402 <main+0x1ee>
						Diag = 1;
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <main+0x2f0>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	801a      	strh	r2, [r3, #0]
						if (STMNO == 1) {
							ang_reg2.Ref = -2438.5;
						} else {

							ang_reg1.Ref = 3241.5;
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <main+0x2a4>)
 80013fc:	4a42      	ldr	r2, [pc, #264]	; (8001508 <main+0x2f4>)
 80013fe:	601a      	str	r2, [r3, #0]
						if (STMNO == 1) {
 8001400:	e02e      	b.n	8001460 <main+0x24c>
						}
					} else {
						if ((ModeCounter > 13000) && (ModeCounter <= 16000)) {
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <main+0x2d8>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800140c:	4293      	cmp	r3, r2
 800140e:	d910      	bls.n	8001432 <main+0x21e>
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <main+0x2d8>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800141a:	d80a      	bhi.n	8001432 <main+0x21e>
							Diag = 0;
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <main+0x2f0>)
 800141e:	2200      	movs	r2, #0
 8001420:	801a      	strh	r2, [r3, #0]
							if (STMNO == 1) {
								ang_reg1.Ref = 0;
								ang_reg2.Ref = -2840;
							} else {
								ang_reg1.Ref = 2840;
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <main+0x2a4>)
 8001424:	4a39      	ldr	r2, [pc, #228]	; (800150c <main+0x2f8>)
 8001426:	601a      	str	r2, [r3, #0]
								ang_reg2.Ref = 0;
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <main+0x2c0>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
							if (STMNO == 1) {
 8001430:	e016      	b.n	8001460 <main+0x24c>
							}
						} else {
							if (ModeCounter > 16000) {
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <main+0x2d8>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800143c:	d910      	bls.n	8001460 <main+0x24c>
								EncoderReset(&enc1);
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <main+0x2bc>)
 8001440:	f7ff fd9e 	bl	8000f80 <EncoderReset>
								EncoderReset(&enc2);
 8001444:	4826      	ldr	r0, [pc, #152]	; (80014e0 <main+0x2cc>)
 8001446:	f7ff fd9b 	bl	8000f80 <EncoderReset>
								ang_reg1.Ref = 0;
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <main+0x2a4>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
								ang_reg2.Ref = 0;
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <main+0x2c0>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
								ModeCounter = 0;
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <main+0x2d8>)
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
// Direction and actuation
		if (Diag && (STMNO == 1)) {
			HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_SET);
		} else {
			if (vel_reg1.Out == 0) {
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <main+0x2b4>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10a      	bne.n	800147e <main+0x26a>
				HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2140      	movs	r1, #64	; 0x40
 800146c:	481e      	ldr	r0, [pc, #120]	; (80014e8 <main+0x2d4>)
 800146e:	f001 fa1b 	bl	80028a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	481c      	ldr	r0, [pc, #112]	; (80014e8 <main+0x2d4>)
 8001478:	f001 fa16 	bl	80028a8 <HAL_GPIO_WritePin>
 800147c:	e059      	b.n	8001532 <main+0x31e>
			} else {
				if (vel_reg1.Out > 0) {
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0x2b4>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	dd46      	ble.n	8001514 <main+0x300>
					HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	4817      	ldr	r0, [pc, #92]	; (80014e8 <main+0x2d4>)
 800148c:	f001 fa0c 	bl	80028a8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <main+0x2d4>)
 8001496:	f001 fa07 	bl	80028a8 <HAL_GPIO_WritePin>
					TIM3->CCR1 = vel_reg1.Out;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <main+0x2b4>)
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <main+0x2fc>)
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
 80014a2:	e046      	b.n	8001532 <main+0x31e>
 80014a4:	20000148 	.word	0x20000148
 80014a8:	39aec2cc 	.word	0x39aec2cc
 80014ac:	40400000 	.word	0x40400000
 80014b0:	fffffce0 	.word	0xfffffce0
 80014b4:	3f19999a 	.word	0x3f19999a
 80014b8:	20000028 	.word	0x20000028
 80014bc:	fffffc1a 	.word	0xfffffc1a
 80014c0:	3c23d70a 	.word	0x3c23d70a
 80014c4:	3fa66666 	.word	0x3fa66666
 80014c8:	20000070 	.word	0x20000070
 80014cc:	2000026c 	.word	0x2000026c
 80014d0:	2000014c 	.word	0x2000014c
 80014d4:	200000b8 	.word	0x200000b8
 80014d8:	20000100 	.word	0x20000100
 80014dc:	200002b4 	.word	0x200002b4
 80014e0:	20000174 	.word	0x20000174
 80014e4:	200002fc 	.word	0x200002fc
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	200001a4 	.word	0x200001a4
 80014f0:	44318000 	.word	0x44318000
 80014f4:	c4318000 	.word	0xc4318000
 80014f8:	44b18000 	.word	0x44b18000
 80014fc:	44e3b000 	.word	0x44e3b000
 8001500:	43c8c000 	.word	0x43c8c000
 8001504:	200001a6 	.word	0x200001a6
 8001508:	454a9800 	.word	0x454a9800
 800150c:	45318000 	.word	0x45318000
 8001510:	40000400 	.word	0x40000400
				} else {
					HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4836      	ldr	r0, [pc, #216]	; (80015f4 <main+0x3e0>)
 800151a:	f001 f9c5 	bl	80028a8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	4834      	ldr	r0, [pc, #208]	; (80015f4 <main+0x3e0>)
 8001524:	f001 f9c0 	bl	80028a8 <HAL_GPIO_WritePin>
					TIM3->CCR1 = -(vel_reg1.Out);
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <main+0x3e4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	425a      	negs	r2, r3
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <main+0x3e8>)
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
				}
			}
		}

		if (Diag && (STMNO == 2)) {
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <main+0x3ec>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <main+0x33c>
			HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2108      	movs	r1, #8
 800153e:	482d      	ldr	r0, [pc, #180]	; (80015f4 <main+0x3e0>)
 8001540:	f001 f9b2 	bl	80028a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	2110      	movs	r1, #16
 8001548:	482a      	ldr	r0, [pc, #168]	; (80015f4 <main+0x3e0>)
 800154a:	f001 f9ad 	bl	80028a8 <HAL_GPIO_WritePin>
 800154e:	e030      	b.n	80015b2 <main+0x39e>
		} else {
			if (vel_reg2.Out == 0) {
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <main+0x3f0>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <main+0x35a>
				HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2108      	movs	r1, #8
 800155c:	4825      	ldr	r0, [pc, #148]	; (80015f4 <main+0x3e0>)
 800155e:	f001 f9a3 	bl	80028a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2110      	movs	r1, #16
 8001566:	4823      	ldr	r0, [pc, #140]	; (80015f4 <main+0x3e0>)
 8001568:	f001 f99e 	bl	80028a8 <HAL_GPIO_WritePin>
 800156c:	e021      	b.n	80015b2 <main+0x39e>
				//			HAL_GPIO_WritePin(ENA2_GPIO_Port, ENA2_Pin, GPIO_PIN_RESET);
			} else {
				//			HAL_GPIO_WritePin(ENA2_GPIO_Port, ENA2_Pin, GPIO_PIN_SET);
				if (vel_reg2.Out > 0) {
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <main+0x3f0>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	dd0e      	ble.n	8001594 <main+0x380>
					HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2108      	movs	r1, #8
 800157a:	481e      	ldr	r0, [pc, #120]	; (80015f4 <main+0x3e0>)
 800157c:	f001 f994 	bl	80028a8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	481b      	ldr	r0, [pc, #108]	; (80015f4 <main+0x3e0>)
 8001586:	f001 f98f 	bl	80028a8 <HAL_GPIO_WritePin>
					TIM3->CCR2 = vel_reg2.Out;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <main+0x3f0>)
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <main+0x3e8>)
 8001590:	639a      	str	r2, [r3, #56]	; 0x38
 8001592:	e00e      	b.n	80015b2 <main+0x39e>
				} else {
					HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2108      	movs	r1, #8
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <main+0x3e0>)
 800159a:	f001 f985 	bl	80028a8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2110      	movs	r1, #16
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <main+0x3e0>)
 80015a4:	f001 f980 	bl	80028a8 <HAL_GPIO_WritePin>
					TIM3->CCR2 = -(vel_reg2.Out);
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <main+0x3f0>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	425a      	negs	r2, r3
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <main+0x3e8>)
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
				}
			}
		}

		// Update feedback and reference
		ang_reg1.Fdb = enc1.Angle;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <main+0x3f4>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <main+0x3f8>)
 80015b8:	6053      	str	r3, [r2, #4]
		vel_reg1.Ref = ang_reg1.Out;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <main+0x3f8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fa9e 	bl	8000b00 <__aeabi_i2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <main+0x3e4>)
 80015c8:	6013      	str	r3, [r2, #0]
		vel_reg1.Fdb = FilteredVel1;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <main+0x3fc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <main+0x3e4>)
 80015d0:	6053      	str	r3, [r2, #4]

		ang_reg2.Fdb = enc2.Angle;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <main+0x400>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <main+0x404>)
 80015d8:	6053      	str	r3, [r2, #4]
		vel_reg2.Ref = ang_reg2.Out;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <main+0x404>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa8e 	bl	8000b00 <__aeabi_i2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <main+0x3f0>)
 80015e8:	6013      	str	r3, [r2, #0]
		vel_reg2.Fdb = FilteredVel2;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <main+0x408>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <main+0x3f0>)
 80015f0:	6053      	str	r3, [r2, #4]
		if (ModeCounter <= 3000) {
 80015f2:	e6b8      	b.n	8001366 <main+0x152>
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	20000070 	.word	0x20000070
 80015fc:	40000400 	.word	0x40000400
 8001600:	200001a6 	.word	0x200001a6
 8001604:	20000100 	.word	0x20000100
 8001608:	2000014c 	.word	0x2000014c
 800160c:	20000028 	.word	0x20000028
 8001610:	2000019c 	.word	0x2000019c
 8001614:	20000174 	.word	0x20000174
 8001618:	200000b8 	.word	0x200000b8
 800161c:	200001a0 	.word	0x200001a0

08001620 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b090      	sub	sp, #64	; 0x40
 8001624:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2228      	movs	r2, #40	; 0x28
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fc3e 	bl	8003eb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800165e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f001 f935 	bl	80028d8 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x58>
		Error_Handler();
 8001674:	f000 f819 	bl	80016aa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2302      	movs	r3, #2
 800167e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001688:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fba2 	bl	8002ddc <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x82>
		Error_Handler();
 800169e:	f000 f804 	bl	80016aa <Error_Handler>
	}
}
 80016a2:	bf00      	nop
 80016a4:	3740      	adds	r7, #64	; 0x40
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ae:	b672      	cpsid	i
}
 80016b0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016b2:	e7fe      	b.n	80016b2 <Error_Handler+0x8>

080016b4 <pid_reg_calc>:
//	v->OutPreSat = 0;
}
/*
 * This function calculates output signal.
 */
void pid_reg_calc(volatile PIDREG *v) {
 80016b4:	b5b0      	push	{r4, r5, r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
//	 Compute the error
//	if (v->Ref != v->PrevRef){
//		pid_reg_reset(v);
//	}
//	v->PrevRef = v->Ref;
	v->Err = v->Ref - v->Fdb;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff f964 	bl	8000994 <__aeabi_fsub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]

	if (v->ZeroDrift) { // If user enabled this feature
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fbf7 	bl	8000ed0 <__aeabi_fcmpeq>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11b      	bne.n	8001720 <pid_reg_calc+0x6c>
		if ((v->Err <= v->ZeroDrift) && (v->Err >= -(v->ZeroDrift))) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4619      	mov	r1, r3
 80016f2:	4610      	mov	r0, r2
 80016f4:	f7ff fc00 	bl	8000ef8 <__aeabi_fcmple>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d010      	beq.n	8001720 <pid_reg_calc+0x6c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f7ff fbfd 	bl	8000f0c <__aeabi_fcmpge>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <pid_reg_calc+0x6c>
			v->Err = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
		}
	}

	// Compute the proportional component
	if (v->Kp) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f04f 0100 	mov.w	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fbd1 	bl	8000ed0 <__aeabi_fcmpeq>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10b      	bne.n	800174c <pid_reg_calc+0x98>
		v->Up = v->Kp * v->Err;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff fa32 	bl	8000ba8 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	621a      	str	r2, [r3, #32]
	}

	// Compute the integral component
	if (v->Ki) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fbbb 	bl	8000ed0 <__aeabi_fcmpeq>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d128      	bne.n	80017b2 <pid_reg_calc+0xfe>
		v->Ui =
				v->Ui
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5c      	ldr	r4, [r3, #36]	; 0x24
						+ ((float) (v->Out - v->OutPreSat) * v->Kt
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f9c6 	bl	8000b00 <__aeabi_i2f>
 8001774:	4602      	mov	r2, r0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7ff fa13 	bl	8000ba8 <__aeabi_fmul>
 8001782:	4603      	mov	r3, r0
 8001784:	461d      	mov	r5, r3
								+ v->Err * v->DeltaT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	4610      	mov	r0, r2
 8001792:	f7ff fa09 	bl	8000ba8 <__aeabi_fmul>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	4628      	mov	r0, r5
 800179c:	f7ff f8fc 	bl	8000998 <__addsf3>
 80017a0:	4603      	mov	r3, r0
						+ ((float) (v->Out - v->OutPreSat) * v->Kt
 80017a2:	4619      	mov	r1, r3
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff f8f7 	bl	8000998 <__addsf3>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
		v->Ui =
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// Compute the differential component
	if (v->Kd) {
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb88 	bl	8000ed0 <__aeabi_fcmpeq>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <pid_reg_calc+0x142>
		v->Ud = (v->Err - v->PrevErr) / v->DeltaT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689c      	ldr	r4, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f996 	bl	8000b00 <__aeabi_i2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff f8db 	bl	8000994 <__aeabi_fsub>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f7ff fa91 	bl	8000d10 <__aeabi_fdiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Compute the pre-saturated output
	v->OutPreSat = v->Up + v->Ui * v->Ki + v->Ud * v->Kd;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1c      	ldr	r4, [r3, #32]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f7ff f9cf 	bl	8000ba8 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f8c2 	bl	8000998 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	461c      	mov	r4, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f7ff f9c0 	bl	8000ba8 <__aeabi_fmul>
 8001828:	4603      	mov	r3, r0
 800182a:	4619      	mov	r1, r3
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff f8b3 	bl	8000998 <__addsf3>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fb7d 	bl	8000f34 <__aeabi_f2iz>
 800183a:	4602      	mov	r2, r0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	635a      	str	r2, [r3, #52]	; 0x34

	// Saturation
	if (v->OutPreSat >= v->OutMax) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001848:	429a      	cmp	r2, r3
 800184a:	db04      	blt.n	8001856 <pid_reg_calc+0x1a2>
		v->Out = v->OutMax;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
 8001854:	e00e      	b.n	8001874 <pid_reg_calc+0x1c0>
	} else {
		if (v->OutPreSat <= v->OutMin) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	429a      	cmp	r2, r3
 8001860:	dc04      	bgt.n	800186c <pid_reg_calc+0x1b8>
			v->Out = v->OutMin;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
 800186a:	e003      	b.n	8001874 <pid_reg_calc+0x1c0>
		} else {
			v->Out = v->OutPreSat;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}

	if (v->OutDeadZone) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb27 	bl	8000ed0 <__aeabi_fcmpeq>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d13a      	bne.n	80018fe <pid_reg_calc+0x24a>
		if ((v->Out > 0) && (v->Out < v->OutDeadZone)) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd17      	ble.n	80018c0 <pid_reg_calc+0x20c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f933 	bl	8000b00 <__aeabi_i2f>
 800189a:	4602      	mov	r2, r0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff fb1e 	bl	8000ee4 <__aeabi_fcmplt>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <pid_reg_calc+0x20c>
			v->Out = v->OutDeadZone;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb3e 	bl	8000f34 <__aeabi_f2iz>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
 80018be:	e01e      	b.n	80018fe <pid_reg_calc+0x24a>
		} else {
			if ((v->Out < 0) && (v->Out > -v->OutDeadZone)) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da1a      	bge.n	80018fe <pid_reg_calc+0x24a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f917 	bl	8000b00 <__aeabi_i2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f7ff fb1e 	bl	8000f20 <__aeabi_fcmpgt>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <pid_reg_calc+0x24a>
				v->Out = -v->OutDeadZone;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb1e 	bl	8000f34 <__aeabi_f2iz>
 80018f8:	4602      	mov	r2, r0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
	}

// Set currently used error value as previous
	v->PrevErr = v->Err;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fb16 	bl	8000f34 <__aeabi_f2iz>
 8001908:	4602      	mov	r2, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bdb0      	pop	{r4, r5, r7, pc}

08001916 <RegParamsUpd>:

void RegParamsUpd(volatile PIDREG *v, float kp, float ki, float kd, float dt,
		int32_t MaxOut, int32_t MinOut, float ZeroDrift, float DeadZone,
		float Antiwindup) {
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
	v->Kp = kp;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	60da      	str	r2, [r3, #12]
	v->Ki = ki;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	611a      	str	r2, [r3, #16]
	v->Kd = kd;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	615a      	str	r2, [r3, #20]
	v->DeltaT = dt;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
	v->OutMax = MaxOut;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
	v->OutMin = MinOut;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
	v->ZeroDrift = ZeroDrift;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194c:	619a      	str	r2, [r3, #24]
	v->OutDeadZone = DeadZone;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001952:	61da      	str	r2, [r3, #28]
	v->Kt = Antiwindup;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_MspInit+0x5c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x5c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_MspInit+0x60>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_MspInit+0x60>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80019cc:	e7fe      	b.n	80019cc <NMI_Handler+0x4>

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ModeCounter++;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Handler+0x1c>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <SysTick_Handler+0x1c>)
 8001a1c:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 fc95 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200001a4 	.word	0x200001a4

08001a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	freq3khz++;
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <TIM3_IRQHandler+0xb4>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <TIM3_IRQHandler+0xb4>)
 8001a3a:	801a      	strh	r2, [r3, #0]
	freq100hz++;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <TIM3_IRQHandler+0xb8>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <TIM3_IRQHandler+0xb8>)
 8001a46:	801a      	strh	r2, [r3, #0]

	if (freq3khz >= 6) {
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <TIM3_IRQHandler+0xb4>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d90e      	bls.n	8001a6e <TIM3_IRQHandler+0x42>
		EncoderPosition(&enc1);
 8001a50:	4825      	ldr	r0, [pc, #148]	; (8001ae8 <TIM3_IRQHandler+0xbc>)
 8001a52:	f7ff faad 	bl	8000fb0 <EncoderPosition>
		pid_reg_calc(&ang_reg1);
 8001a56:	4825      	ldr	r0, [pc, #148]	; (8001aec <TIM3_IRQHandler+0xc0>)
 8001a58:	f7ff fe2c 	bl	80016b4 <pid_reg_calc>

		EncoderPosition(&enc2);
 8001a5c:	4824      	ldr	r0, [pc, #144]	; (8001af0 <TIM3_IRQHandler+0xc4>)
 8001a5e:	f7ff faa7 	bl	8000fb0 <EncoderPosition>
		pid_reg_calc(&ang_reg2);
 8001a62:	4824      	ldr	r0, [pc, #144]	; (8001af4 <TIM3_IRQHandler+0xc8>)
 8001a64:	f7ff fe26 	bl	80016b4 <pid_reg_calc>
		freq3khz = 0;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <TIM3_IRQHandler+0xb4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
	}

	if (freq100hz >= 180) {
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <TIM3_IRQHandler+0xb8>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	2bb3      	cmp	r3, #179	; 0xb3
 8001a74:	d92e      	bls.n	8001ad4 <TIM3_IRQHandler+0xa8>
		EncoderVelocity(&enc1);
 8001a76:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <TIM3_IRQHandler+0xbc>)
 8001a78:	f7ff fb12 	bl	80010a0 <EncoderVelocity>
		MedianVel1 = Median_velocity_1(enc1.AngVel);
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <TIM3_IRQHandler+0xbc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f847 	bl	8001b14 <Median_velocity_1>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <TIM3_IRQHandler+0xcc>)
 8001a8a:	6013      	str	r3, [r2, #0]
		FilteredVel1 = SMA_velocity_1(MedianVel1);
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <TIM3_IRQHandler+0xcc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f8e9 	bl	8001c68 <SMA_velocity_1>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <TIM3_IRQHandler+0xd0>)
 8001a9a:	6013      	str	r3, [r2, #0]
		pid_reg_calc(&vel_reg1);
 8001a9c:	4818      	ldr	r0, [pc, #96]	; (8001b00 <TIM3_IRQHandler+0xd4>)
 8001a9e:	f7ff fe09 	bl	80016b4 <pid_reg_calc>

		EncoderVelocity(&enc2);
 8001aa2:	4813      	ldr	r0, [pc, #76]	; (8001af0 <TIM3_IRQHandler+0xc4>)
 8001aa4:	f7ff fafc 	bl	80010a0 <EncoderVelocity>
		MedianVel2 = Median_velocity_2(enc2.AngVel);
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <TIM3_IRQHandler+0xc4>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f91d 	bl	8001cec <Median_velocity_2>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <TIM3_IRQHandler+0xd8>)
 8001ab6:	6013      	str	r3, [r2, #0]
		FilteredVel2 = SMA_velocity_2(MedianVel2);
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <TIM3_IRQHandler+0xd8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f9bf 	bl	8001e40 <SMA_velocity_2>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <TIM3_IRQHandler+0xdc>)
 8001ac6:	6013      	str	r3, [r2, #0]
		pid_reg_calc(&vel_reg2);
 8001ac8:	4810      	ldr	r0, [pc, #64]	; (8001b0c <TIM3_IRQHandler+0xe0>)
 8001aca:	f7ff fdf3 	bl	80016b4 <pid_reg_calc>

		freq100hz = 0;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <TIM3_IRQHandler+0xb8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ad4:	480e      	ldr	r0, [pc, #56]	; (8001b10 <TIM3_IRQHandler+0xe4>)
 8001ad6:	f001 fd51 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001a8 	.word	0x200001a8
 8001ae4:	200001aa 	.word	0x200001aa
 8001ae8:	2000014c 	.word	0x2000014c
 8001aec:	20000028 	.word	0x20000028
 8001af0:	20000174 	.word	0x20000174
 8001af4:	200000b8 	.word	0x200000b8
 8001af8:	200001ac 	.word	0x200001ac
 8001afc:	2000019c 	.word	0x2000019c
 8001b00:	20000070 	.word	0x20000070
 8001b04:	200001b0 	.word	0x200001b0
 8001b08:	200001a0 	.word	0x200001a0
 8001b0c:	20000100 	.word	0x20000100
 8001b10:	200002fc 	.word	0x200002fc

08001b14 <Median_velocity_1>:

/* USER CODE BEGIN 1 */
float Median_velocity_1(float newVal) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <Median_velocity_1+0x14c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4950      	ldr	r1, [pc, #320]	; (8001c64 <Median_velocity_1+0x150>)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <Median_velocity_1+0x14c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d840      	bhi.n	8001bb2 <Median_velocity_1+0x9e>
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <Median_velocity_1+0x14c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a4b      	ldr	r2, [pc, #300]	; (8001c64 <Median_velocity_1+0x150>)
 8001b36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <Median_velocity_1+0x14c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4948      	ldr	r1, [pc, #288]	; (8001c64 <Median_velocity_1+0x150>)
 8001b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f7ff f9e9 	bl	8000f20 <__aeabi_fcmpgt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d02e      	beq.n	8001bb2 <Median_velocity_1+0x9e>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <Median_velocity_1+0x14c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e026      	b.n	8001baa <Median_velocity_1+0x96>
			if (buffer[i] > buffer[i + 1]) {
 8001b5c:	4a41      	ldr	r2, [pc, #260]	; (8001c64 <Median_velocity_1+0x150>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	493e      	ldr	r1, [pc, #248]	; (8001c64 <Median_velocity_1+0x150>)
 8001b6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff f9d5 	bl	8000f20 <__aeabi_fcmpgt>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <Median_velocity_1+0x90>
				float buff = buffer[i];
 8001b7c:	4a39      	ldr	r2, [pc, #228]	; (8001c64 <Median_velocity_1+0x150>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a36      	ldr	r2, [pc, #216]	; (8001c64 <Median_velocity_1+0x150>)
 8001b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b90:	4934      	ldr	r1, [pc, #208]	; (8001c64 <Median_velocity_1+0x150>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4931      	ldr	r1, [pc, #196]	; (8001c64 <Median_velocity_1+0x150>)
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	ddd5      	ble.n	8001b5c <Median_velocity_1+0x48>
 8001bb0:	e043      	b.n	8001c3a <Median_velocity_1+0x126>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <Median_velocity_1+0x14c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03f      	beq.n	8001c3a <Median_velocity_1+0x126>
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <Median_velocity_1+0x14c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <Median_velocity_1+0x150>)
 8001bc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <Median_velocity_1+0x14c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4926      	ldr	r1, [pc, #152]	; (8001c64 <Median_velocity_1+0x150>)
 8001bcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f7ff f9a4 	bl	8000f20 <__aeabi_fcmpgt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d02d      	beq.n	8001c3a <Median_velocity_1+0x126>
			for (int i = count; i > 0; i--) {
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <Median_velocity_1+0x14c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	e026      	b.n	8001c34 <Median_velocity_1+0x120>
				if (buffer[i] < buffer[i - 1]) {
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <Median_velocity_1+0x150>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	491c      	ldr	r1, [pc, #112]	; (8001c64 <Median_velocity_1+0x150>)
 8001bf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7ff f972 	bl	8000ee4 <__aeabi_fcmplt>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d013      	beq.n	8001c2e <Median_velocity_1+0x11a>
					float buff = buffer[i];
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <Median_velocity_1+0x150>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <Median_velocity_1+0x150>)
 8001c16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c1a:	4912      	ldr	r1, [pc, #72]	; (8001c64 <Median_velocity_1+0x150>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	490f      	ldr	r1, [pc, #60]	; (8001c64 <Median_velocity_1+0x150>)
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	dcd5      	bgt.n	8001be6 <Median_velocity_1+0xd2>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <Median_velocity_1+0x14c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <Median_velocity_1+0x14c>)
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <Median_velocity_1+0x14c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d902      	bls.n	8001c52 <Median_velocity_1+0x13e>
		count = 0;
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <Median_velocity_1+0x14c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <Median_velocity_1+0x150>)
 8001c54:	695b      	ldr	r3, [r3, #20]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200001b4 	.word	0x200001b4
 8001c64:	200001b8 	.word	0x200001b8

08001c68 <SMA_velocity_1>:

float SMA_velocity_1(float newVal) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	static int t = 0;
	static float vals[NUM_READ];
	static float average = 0;
	if (++t >= NUM_READ)
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <SMA_velocity_1+0x74>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <SMA_velocity_1+0x74>)
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <SMA_velocity_1+0x74>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	dd02      	ble.n	8001c88 <SMA_velocity_1+0x20>
		t = 0; // перемотка t
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <SMA_velocity_1+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
	average -= vals[t];         // вычитаем старое
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <SMA_velocity_1+0x78>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <SMA_velocity_1+0x74>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4914      	ldr	r1, [pc, #80]	; (8001ce4 <SMA_velocity_1+0x7c>)
 8001c92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7fe fe7b 	bl	8000994 <__aeabi_fsub>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <SMA_velocity_1+0x78>)
 8001ca4:	601a      	str	r2, [r3, #0]
	average += newVal;          // прибавляем новое
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <SMA_velocity_1+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fe73 	bl	8000998 <__addsf3>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <SMA_velocity_1+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
	vals[t] = newVal;           // запоминаем в массив
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <SMA_velocity_1+0x74>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4909      	ldr	r1, [pc, #36]	; (8001ce4 <SMA_velocity_1+0x7c>)
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return ((float) average / NUM_READ);
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <SMA_velocity_1+0x78>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <SMA_velocity_1+0x80>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f81f 	bl	8000d10 <__aeabi_fdiv>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200001e0 	.word	0x200001e0
 8001ce0:	200001e4 	.word	0x200001e4
 8001ce4:	200001e8 	.word	0x200001e8
 8001ce8:	41200000 	.word	0x41200000

08001cec <Median_velocity_2>:

float Median_velocity_2(float newVal) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <Median_velocity_2+0x14c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4950      	ldr	r1, [pc, #320]	; (8001e3c <Median_velocity_2+0x150>)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 8001d00:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <Median_velocity_2+0x14c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d840      	bhi.n	8001d8a <Median_velocity_2+0x9e>
 8001d08:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <Median_velocity_2+0x14c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <Median_velocity_2+0x150>)
 8001d0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <Median_velocity_2+0x14c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	4948      	ldr	r1, [pc, #288]	; (8001e3c <Median_velocity_2+0x150>)
 8001d1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4610      	mov	r0, r2
 8001d22:	f7ff f8fd 	bl	8000f20 <__aeabi_fcmpgt>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d02e      	beq.n	8001d8a <Median_velocity_2+0x9e>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <Median_velocity_2+0x14c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e026      	b.n	8001d82 <Median_velocity_2+0x96>
			if (buffer[i] > buffer[i + 1]) {
 8001d34:	4a41      	ldr	r2, [pc, #260]	; (8001e3c <Median_velocity_2+0x150>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	493e      	ldr	r1, [pc, #248]	; (8001e3c <Median_velocity_2+0x150>)
 8001d42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f7ff f8e9 	bl	8000f20 <__aeabi_fcmpgt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <Median_velocity_2+0x90>
				float buff = buffer[i];
 8001d54:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <Median_velocity_2+0x150>)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <Median_velocity_2+0x150>)
 8001d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d68:	4934      	ldr	r1, [pc, #208]	; (8001e3c <Median_velocity_2+0x150>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4931      	ldr	r1, [pc, #196]	; (8001e3c <Median_velocity_2+0x150>)
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	ddd5      	ble.n	8001d34 <Median_velocity_2+0x48>
 8001d88:	e043      	b.n	8001e12 <Median_velocity_2+0x126>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <Median_velocity_2+0x14c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03f      	beq.n	8001e12 <Median_velocity_2+0x126>
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <Median_velocity_2+0x14c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <Median_velocity_2+0x150>)
 8001d9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <Median_velocity_2+0x14c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4926      	ldr	r1, [pc, #152]	; (8001e3c <Median_velocity_2+0x150>)
 8001da4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f7ff f8b8 	bl	8000f20 <__aeabi_fcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d02d      	beq.n	8001e12 <Median_velocity_2+0x126>
			for (int i = count; i > 0; i--) {
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <Median_velocity_2+0x14c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e026      	b.n	8001e0c <Median_velocity_2+0x120>
				if (buffer[i] < buffer[i - 1]) {
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <Median_velocity_2+0x150>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	491c      	ldr	r1, [pc, #112]	; (8001e3c <Median_velocity_2+0x150>)
 8001dcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7ff f886 	bl	8000ee4 <__aeabi_fcmplt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d013      	beq.n	8001e06 <Median_velocity_2+0x11a>
					float buff = buffer[i];
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <Median_velocity_2+0x150>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <Median_velocity_2+0x150>)
 8001dee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001df2:	4912      	ldr	r1, [pc, #72]	; (8001e3c <Median_velocity_2+0x150>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	490f      	ldr	r1, [pc, #60]	; (8001e3c <Median_velocity_2+0x150>)
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	dcd5      	bgt.n	8001dbe <Median_velocity_2+0xd2>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <Median_velocity_2+0x14c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <Median_velocity_2+0x14c>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <Median_velocity_2+0x14c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d902      	bls.n	8001e2a <Median_velocity_2+0x13e>
		count = 0;
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <Median_velocity_2+0x14c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <Median_velocity_2+0x150>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000210 	.word	0x20000210
 8001e3c:	20000214 	.word	0x20000214

08001e40 <SMA_velocity_2>:

float SMA_velocity_2(float newVal) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	static int t = 0;
	static float vals[NUM_READ];
	static float average = 0;
	if (++t >= NUM_READ)
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <SMA_velocity_2+0x74>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <SMA_velocity_2+0x74>)
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <SMA_velocity_2+0x74>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	dd02      	ble.n	8001e60 <SMA_velocity_2+0x20>
		t = 0; // перемотка t
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <SMA_velocity_2+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
	average -= vals[t];         // вычитаем старое
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <SMA_velocity_2+0x78>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <SMA_velocity_2+0x74>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4914      	ldr	r1, [pc, #80]	; (8001ebc <SMA_velocity_2+0x7c>)
 8001e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7fe fd8f 	bl	8000994 <__aeabi_fsub>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <SMA_velocity_2+0x78>)
 8001e7c:	601a      	str	r2, [r3, #0]
	average += newVal;          // прибавляем новое
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <SMA_velocity_2+0x78>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fd87 	bl	8000998 <__addsf3>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <SMA_velocity_2+0x78>)
 8001e90:	601a      	str	r2, [r3, #0]
	vals[t] = newVal;           // запоминаем в массив
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <SMA_velocity_2+0x74>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4909      	ldr	r1, [pc, #36]	; (8001ebc <SMA_velocity_2+0x7c>)
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return ((float) average / NUM_READ);
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <SMA_velocity_2+0x78>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <SMA_velocity_2+0x80>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff33 	bl	8000d10 <__aeabi_fdiv>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000023c 	.word	0x2000023c
 8001eb8:	20000240 	.word	0x20000240
 8001ebc:	20000244 	.word	0x20000244
 8001ec0:	41200000 	.word	0x41200000

08001ec4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 ffe6 	bl	8003eb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <MX_TIM1_Init+0xac>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001f38:	230f      	movs	r3, #15
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	480d      	ldr	r0, [pc, #52]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001f44:	f001 f9ea 	bl	800331c <HAL_TIM_Encoder_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f4e:	f7ff fbac 	bl	80016aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4806      	ldr	r0, [pc, #24]	; (8001f78 <MX_TIM1_Init+0xa8>)
 8001f60:	f001 ff12 	bl	8003d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f6a:	f7ff fb9e 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	3730      	adds	r7, #48	; 0x30
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000026c 	.word	0x2000026c
 8001f7c:	40012c00 	.word	0x40012c00

08001f80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 ff8e 	bl	8003eb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	480d      	ldr	r0, [pc, #52]	; (8002024 <MX_TIM2_Init+0xa4>)
 8001ff0:	f001 f994 	bl	800331c <HAL_TIM_Encoder_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ffa:	f7ff fb56 	bl	80016aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	; (8002024 <MX_TIM2_Init+0xa4>)
 800200c:	f001 febc 	bl	8003d88 <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002016:	f7ff fb48 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200002b4 	.word	0x200002b4

08002028 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202e:	f107 0320 	add.w	r3, r7, #32
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	615a      	str	r2, [r3, #20]
 8002048:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800204a:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <MX_TIM3_Init+0xc0>)
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <MX_TIM3_Init+0xc4>)
 800204e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <MX_TIM3_Init+0xc0>)
 8002052:	2203      	movs	r2, #3
 8002054:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <MX_TIM3_Init+0xc0>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_TIM3_Init+0xc0>)
 800205e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002062:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <MX_TIM3_Init+0xc0>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_TIM3_Init+0xc0>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002070:	481d      	ldr	r0, [pc, #116]	; (80020e8 <MX_TIM3_Init+0xc0>)
 8002072:	f001 f861 	bl	8003138 <HAL_TIM_PWM_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800207c:	f7ff fb15 	bl	80016aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4619      	mov	r1, r3
 800208e:	4816      	ldr	r0, [pc, #88]	; (80020e8 <MX_TIM3_Init+0xc0>)
 8002090:	f001 fe7a 	bl	8003d88 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800209a:	f7ff fb06 	bl	80016aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209e:	2360      	movs	r3, #96	; 0x60
 80020a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_TIM3_Init+0xc0>)
 80020b6:	f001 fb69 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80020c0:	f7ff faf3 	bl	80016aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2204      	movs	r2, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <MX_TIM3_Init+0xc0>)
 80020cc:	f001 fb5e 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020d6:	f7ff fae8 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020da:	4803      	ldr	r0, [pc, #12]	; (80020e8 <MX_TIM3_Init+0xc0>)
 80020dc:	f000 f898 	bl	8002210 <HAL_TIM_MspPostInit>

}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200002fc 	.word	0x200002fc
 80020ec:	40000400 	.word	0x40000400

080020f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d125      	bne.n	800215c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a29      	ldr	r2, [pc, #164]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002116:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002140:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	4619      	mov	r1, r3
 8002154:	481a      	ldr	r0, [pc, #104]	; (80021c0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002156:	f000 fa23 	bl	80025a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800215a:	e028      	b.n	80021ae <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d123      	bne.n	80021ae <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_TIM_Encoder_MspInit+0xcc>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002196:	2303      	movs	r3, #3
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_TIM_Encoder_MspInit+0xd0>)
 80021aa:	f000 f9f9 	bl	80025a0 <HAL_GPIO_Init>
}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010800 	.word	0x40010800

080021c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_TIM_PWM_MspInit+0x44>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d113      	bne.n	80021fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_TIM_PWM_MspInit+0x48>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_TIM_PWM_MspInit+0x48>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_TIM_PWM_MspInit+0x48>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	201d      	movs	r0, #29
 80021f4:	f000 f99d 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021f8:	201d      	movs	r0, #29
 80021fa:	f000 f9b6 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40000400 	.word	0x40000400
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_TIM_MspPostInit+0x58>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d117      	bne.n	8002260 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_TIM_MspPostInit+0x5c>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_TIM_MspPostInit+0x5c>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_TIM_MspPostInit+0x5c>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002248:	23c0      	movs	r3, #192	; 0xc0
 800224a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2302      	movs	r3, #2
 8002252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	4619      	mov	r1, r3
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_TIM_MspPostInit+0x60>)
 800225c:	f000 f9a0 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40000400 	.word	0x40000400
 800226c:	40021000 	.word	0x40021000
 8002270:	40010800 	.word	0x40010800

08002274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800229a:	f7ff fe13 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f001 fde3 	bl	8003e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a2:	f7fe ffb7 	bl	8001214 <main>
  bx lr
 80022a6:	4770      	bx	lr
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022b0:	08003f04 	.word	0x08003f04
  ldr r2, =_sbss
 80022b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022b8:	20000348 	.word	0x20000348

080022bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_2_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x28>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x28>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f923 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	200f      	movs	r0, #15
 80022d8:	f000 f808 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fb42 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x54>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_InitTick+0x58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f93b 	bl	8002586 <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00e      	b.n	8002338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d80a      	bhi.n	8002336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f000 f903 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_InitTick+0x5c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000000 	.word	0x20000000
 8002344:	20000008 	.word	0x20000008
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_IncTick+0x1c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x20>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <HAL_IncTick+0x20>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000008 	.word	0x20000008
 800236c:	20000344 	.word	0x20000344

08002370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_GetTick+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000344 	.word	0x20000344

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4906      	ldr	r1, [pc, #24]	; (800241c <__NVIC_EnableIRQ+0x34>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff90 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff2d 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff42 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff90 	bl	8002474 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5f 	bl	8002420 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff35 	bl	80023e8 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b08b      	sub	sp, #44	; 0x2c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e169      	b.n	8002888 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b4:	2201      	movs	r2, #1
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 8158 	bne.w	8002882 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a9a      	ldr	r2, [pc, #616]	; (8002840 <HAL_GPIO_Init+0x2a0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d05e      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025dc:	4a98      	ldr	r2, [pc, #608]	; (8002840 <HAL_GPIO_Init+0x2a0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d875      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025e2:	4a98      	ldr	r2, [pc, #608]	; (8002844 <HAL_GPIO_Init+0x2a4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d058      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025e8:	4a96      	ldr	r2, [pc, #600]	; (8002844 <HAL_GPIO_Init+0x2a4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d86f      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025ee:	4a96      	ldr	r2, [pc, #600]	; (8002848 <HAL_GPIO_Init+0x2a8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d052      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025f4:	4a94      	ldr	r2, [pc, #592]	; (8002848 <HAL_GPIO_Init+0x2a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d869      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025fa:	4a94      	ldr	r2, [pc, #592]	; (800284c <HAL_GPIO_Init+0x2ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04c      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 8002600:	4a92      	ldr	r2, [pc, #584]	; (800284c <HAL_GPIO_Init+0x2ac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d863      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 8002606:	4a92      	ldr	r2, [pc, #584]	; (8002850 <HAL_GPIO_Init+0x2b0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d046      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 800260c:	4a90      	ldr	r2, [pc, #576]	; (8002850 <HAL_GPIO_Init+0x2b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d85d      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 8002612:	2b12      	cmp	r3, #18
 8002614:	d82a      	bhi.n	800266c <HAL_GPIO_Init+0xcc>
 8002616:	2b12      	cmp	r3, #18
 8002618:	d859      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <HAL_GPIO_Init+0x80>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	0800269b 	.word	0x0800269b
 8002624:	08002675 	.word	0x08002675
 8002628:	08002687 	.word	0x08002687
 800262c:	080026c9 	.word	0x080026c9
 8002630:	080026cf 	.word	0x080026cf
 8002634:	080026cf 	.word	0x080026cf
 8002638:	080026cf 	.word	0x080026cf
 800263c:	080026cf 	.word	0x080026cf
 8002640:	080026cf 	.word	0x080026cf
 8002644:	080026cf 	.word	0x080026cf
 8002648:	080026cf 	.word	0x080026cf
 800264c:	080026cf 	.word	0x080026cf
 8002650:	080026cf 	.word	0x080026cf
 8002654:	080026cf 	.word	0x080026cf
 8002658:	080026cf 	.word	0x080026cf
 800265c:	080026cf 	.word	0x080026cf
 8002660:	080026cf 	.word	0x080026cf
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002691 	.word	0x08002691
 800266c:	4a79      	ldr	r2, [pc, #484]	; (8002854 <HAL_GPIO_Init+0x2b4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002672:	e02c      	b.n	80026ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e029      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e024      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	3308      	adds	r3, #8
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e01f      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	330c      	adds	r3, #12
 8002696:	623b      	str	r3, [r7, #32]
          break;
 8002698:	e01a      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a2:	2304      	movs	r3, #4
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e013      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b0:	2308      	movs	r3, #8
 80026b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	611a      	str	r2, [r3, #16]
          break;
 80026ba:	e009      	b.n	80026d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026bc:	2308      	movs	r3, #8
 80026be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	615a      	str	r2, [r3, #20]
          break;
 80026c6:	e003      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          break;
 80026ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d801      	bhi.n	80026da <HAL_GPIO_Init+0x13a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e001      	b.n	80026de <HAL_GPIO_Init+0x13e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	d802      	bhi.n	80026ec <HAL_GPIO_Init+0x14c>
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	e002      	b.n	80026f2 <HAL_GPIO_Init+0x152>
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	3b08      	subs	r3, #8
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	210f      	movs	r1, #15
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80b1 	beq.w	8002882 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002720:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_GPIO_Init+0x2b8>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x2b8>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_GPIO_Init+0x2b8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002738:	4a48      	ldr	r2, [pc, #288]	; (800285c <HAL_GPIO_Init+0x2bc>)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_GPIO_Init+0x2c0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <HAL_GPIO_Init+0x1ec>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <HAL_GPIO_Init+0x2c4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00d      	beq.n	8002788 <HAL_GPIO_Init+0x1e8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3e      	ldr	r2, [pc, #248]	; (8002868 <HAL_GPIO_Init+0x2c8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <HAL_GPIO_Init+0x1e4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3d      	ldr	r2, [pc, #244]	; (800286c <HAL_GPIO_Init+0x2cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_GPIO_Init+0x1e0>
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002780:	2304      	movs	r3, #4
 8002782:	e004      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002784:	2302      	movs	r3, #2
 8002786:	e002      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 800278c:	2300      	movs	r3, #0
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	f002 0203 	and.w	r2, r2, #3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4093      	lsls	r3, r2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800279e:	492f      	ldr	r1, [pc, #188]	; (800285c <HAL_GPIO_Init+0x2bc>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	492c      	ldr	r1, [pc, #176]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	4928      	ldr	r1, [pc, #160]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4922      	ldr	r1, [pc, #136]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	491e      	ldr	r1, [pc, #120]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4918      	ldr	r1, [pc, #96]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	43db      	mvns	r3, r3
 800281e:	4914      	ldr	r1, [pc, #80]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002820:	4013      	ands	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	490e      	ldr	r1, [pc, #56]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e021      	b.n	8002882 <HAL_GPIO_Init+0x2e2>
 800283e:	bf00      	nop
 8002840:	10320000 	.word	0x10320000
 8002844:	10310000 	.word	0x10310000
 8002848:	10220000 	.word	0x10220000
 800284c:	10210000 	.word	0x10210000
 8002850:	10120000 	.word	0x10120000
 8002854:	10110000 	.word	0x10110000
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	40010800 	.word	0x40010800
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40011000 	.word	0x40011000
 800286c:	40011400 	.word	0x40011400
 8002870:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_GPIO_Init+0x304>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	43db      	mvns	r3, r3
 800287c:	4909      	ldr	r1, [pc, #36]	; (80028a4 <HAL_GPIO_Init+0x304>)
 800287e:	4013      	ands	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	f47f ae8e 	bne.w	80025b4 <HAL_GPIO_Init+0x14>
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	372c      	adds	r7, #44	; 0x2c
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e272      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b92      	ldr	r3, [pc, #584]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002904:	4b8f      	ldr	r3, [pc, #572]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d112      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e>
 8002910:	4b8c      	ldr	r3, [pc, #560]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b89      	ldr	r3, [pc, #548]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x12c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e24c      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x76>
 8002940:	4b80      	ldr	r3, [pc, #512]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7f      	ldr	r2, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7a      	ldr	r2, [pc, #488]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b78      	ldr	r3, [pc, #480]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a77      	ldr	r2, [pc, #476]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xbc>
 800297a:	4b72      	ldr	r3, [pc, #456]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a71      	ldr	r2, [pc, #452]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6e      	ldr	r2, [pc, #440]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b68      	ldr	r3, [pc, #416]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a67      	ldr	r2, [pc, #412]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fcdc 	bl	8002370 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff fcd8 	bl	8002370 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e200      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xe4>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fcc8 	bl	8002370 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff fcc4 	bl	8002370 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1ec      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x10c>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d063      	beq.n	8002ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a1e:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x18c>
 8002a2a:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x176>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1c0      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4939      	ldr	r1, [pc, #228]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e03a      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7ff fc7d 	bl	8002370 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff fc79 	bl	8002370 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1a1      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4927      	ldr	r1, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fc5c 	bl	8002370 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7ff fc58 	bl	8002370 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e180      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d03a      	beq.n	8002b5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d019      	beq.n	8002b22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7ff fc3c 	bl	8002370 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afc:	f7ff fc38 	bl	8002370 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e160      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f000 fa9c 	bl	8003058 <RCC_Delay>
 8002b20:	e01c      	b.n	8002b5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b28:	f7ff fc22 	bl	8002370 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7ff fc1e 	bl	8002370 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d908      	bls.n	8002b50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e146      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	42420000 	.word	0x42420000
 8002b4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e9      	bne.n	8002b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a6 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4a87      	ldr	r2, [pc, #540]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	61d3      	str	r3, [r2, #28]
 8002b86:	4b85      	ldr	r3, [pc, #532]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b82      	ldr	r3, [pc, #520]	; (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b7f      	ldr	r3, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7e      	ldr	r2, [pc, #504]	; (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7ff fbdf 	bl	8002370 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7ff fbdb 	bl	8002370 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	; 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e103      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x312>
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e02d      	b.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x334>
 8002bf2:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a69      	ldr	r2, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a66      	ldr	r2, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6213      	str	r3, [r2, #32]
 8002c0a:	e01c      	b.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x356>
 8002c14:	4b61      	ldr	r3, [pc, #388]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a60      	ldr	r2, [pc, #384]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a5d      	ldr	r2, [pc, #372]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a5a      	ldr	r2, [pc, #360]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7ff fb8f 	bl	8002370 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7ff fb8b 	bl	8002370 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0b1      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ee      	beq.n	8002c56 <HAL_RCC_OscConfig+0x37e>
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff fb79 	bl	8002370 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7ff fb75 	bl	8002370 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e09b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a3b      	ldr	r2, [pc, #236]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d061      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d146      	bne.n	8002d62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7ff fb49 	bl	8002370 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7ff fb45 	bl	8002370 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e06d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d108      	bne.n	8002d1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4921      	ldr	r1, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a19      	ldr	r1, [r3, #32]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	491b      	ldr	r1, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7ff fb19 	bl	8002370 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7ff fb15 	bl	8002370 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e03d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x46a>
 8002d60:	e035      	b.n	8002dce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7ff fb02 	bl	8002370 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7ff fafe 	bl	8002370 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e026      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x498>
 8002d8e:	e01e      	b.n	8002dce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e019      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
 8002da4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x500>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0d0      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df0:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d910      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	4965      	ldr	r1, [pc, #404]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d040      	beq.n	8002efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d115      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e073      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06b      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4936      	ldr	r1, [pc, #216]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7ff fa50 	bl	8002370 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7ff fa4c 	bl	8002370 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e053      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d210      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	4922      	ldr	r1, [pc, #136]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1d0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f9ae 	bl	80022ec <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08003ed8 	.word	0x08003ed8
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x36>
 8002fde:	e027      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe2:	613b      	str	r3, [r7, #16]
      break;
 8002fe4:	e027      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0c9b      	lsrs	r3, r3, #18
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	4a17      	ldr	r2, [pc, #92]	; (800304c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ff0:	5cd3      	ldrb	r3, [r2, r3]
 8002ff2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_RCC_GetSysClockFreq+0x94>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0c5b      	lsrs	r3, r3, #17
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	4a11      	ldr	r2, [pc, #68]	; (8003050 <HAL_RCC_GetSysClockFreq+0xa0>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_RCC_GetSysClockFreq+0x98>)
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e004      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	613b      	str	r3, [r7, #16]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	693b      	ldr	r3, [r7, #16]
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	007a1200 	.word	0x007a1200
 800304c:	08003ee8 	.word	0x08003ee8
 8003050:	08003ef8 	.word	0x08003ef8
 8003054:	003d0900 	.word	0x003d0900

08003058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <RCC_Delay+0x34>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <RCC_Delay+0x38>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0a5b      	lsrs	r3, r3, #9
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003074:	bf00      	nop
  }
  while (Delay --);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	60fa      	str	r2, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f9      	bne.n	8003074 <RCC_Delay+0x1c>
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	20000000 	.word	0x20000000
 8003090:	10624dd3 	.word	0x10624dd3

08003094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d001      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e03a      	b.n	8003122 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_TIM_Base_Start_IT+0x98>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x58>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d009      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x58>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <HAL_TIM_Base_Start_IT+0x9c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x58>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <HAL_TIM_Base_Start_IT+0xa0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d111      	bne.n	8003110 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d010      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310e:	e007      	b.n	8003120 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800

08003138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e041      	b.n	80031ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff f830 	bl	80021c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f000 fbf8 	bl	800396c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start+0x24>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e022      	b.n	8003242 <HAL_TIM_PWM_Start+0x6a>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d109      	bne.n	8003216 <HAL_TIM_PWM_Start+0x3e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e015      	b.n	8003242 <HAL_TIM_PWM_Start+0x6a>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d109      	bne.n	8003230 <HAL_TIM_PWM_Start+0x58>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e008      	b.n	8003242 <HAL_TIM_PWM_Start+0x6a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e05e      	b.n	8003308 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start+0x82>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003258:	e013      	b.n	8003282 <HAL_TIM_PWM_Start+0xaa>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d104      	bne.n	800326a <HAL_TIM_PWM_Start+0x92>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	e00b      	b.n	8003282 <HAL_TIM_PWM_Start+0xaa>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d104      	bne.n	800327a <HAL_TIM_PWM_Start+0xa2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003278:	e003      	b.n	8003282 <HAL_TIM_PWM_Start+0xaa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fd58 	bl	8003d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_TIM_PWM_Start+0x138>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d107      	bne.n	80032aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIM_PWM_Start+0x138>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIM_PWM_Start+0xfa>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d009      	beq.n	80032d2 <HAL_TIM_PWM_Start+0xfa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_TIM_PWM_Start+0x13c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_PWM_Start+0xfa>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_TIM_PWM_Start+0x140>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d111      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d010      	beq.n	8003306 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e007      	b.n	8003306 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800

0800331c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e093      	b.n	8003458 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fe fed3 	bl	80020f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003360:	f023 0307 	bic.w	r3, r3, #7
 8003364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f000 fafb 	bl	800396c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	4313      	orrs	r3, r2
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033bc:	f023 030c 	bic.w	r3, r3, #12
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	4313      	orrs	r3, r2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	011a      	lsls	r2, r3, #4
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	4313      	orrs	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4313      	orrs	r3, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003470:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003478:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003480:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003488:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d110      	bne.n	80034b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003496:	7b7b      	ldrb	r3, [r7, #13]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d001      	beq.n	80034a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e069      	b.n	8003574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b0:	e031      	b.n	8003516 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d110      	bne.n	80034da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034be:	7b3b      	ldrb	r3, [r7, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d001      	beq.n	80034c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e055      	b.n	8003574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d8:	e01d      	b.n	8003516 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e0:	7bbb      	ldrb	r3, [r7, #14]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e6:	7b7b      	ldrb	r3, [r7, #13]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034ec:	7b3b      	ldrb	r3, [r7, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03e      	b.n	8003574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_TIM_Encoder_Start+0xc4>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d008      	beq.n	8003534 <HAL_TIM_Encoder_Start+0xd4>
 8003522:	e00f      	b.n	8003544 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fc07 	bl	8003d40 <TIM_CCxChannelCmd>
      break;
 8003532:	e016      	b.n	8003562 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	2104      	movs	r1, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fbff 	bl	8003d40 <TIM_CCxChannelCmd>
      break;
 8003542:	e00e      	b.n	8003562 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fbf7 	bl	8003d40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	2104      	movs	r1, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fbf0 	bl	8003d40 <TIM_CCxChannelCmd>
      break;
 8003560:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0202 	mvn.w	r2, #2
 80035a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9b8 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9ab 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9ba 	bl	8003946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f98e 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f981 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f990 	bl	8003946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f964 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f957 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f966 	bl	8003946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d122      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2208      	movs	r2, #8
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f93a 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f92d 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f93c 	bl	8003946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0201 	mvn.w	r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f908 	bl	8003910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fb95 	bl	8003e56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d107      	bne.n	8003758 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f900 	bl	8003958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b20      	cmp	r3, #32
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d107      	bne.n	8003784 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0220 	mvn.w	r2, #32
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fb60 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e0ae      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	f200 809f 	bhi.w	80038f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037ba:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	080038f9 	.word	0x080038f9
 80037c8:	080038f9 	.word	0x080038f9
 80037cc:	080038f9 	.word	0x080038f9
 80037d0:	08003835 	.word	0x08003835
 80037d4:	080038f9 	.word	0x080038f9
 80037d8:	080038f9 	.word	0x080038f9
 80037dc:	080038f9 	.word	0x080038f9
 80037e0:	08003877 	.word	0x08003877
 80037e4:	080038f9 	.word	0x080038f9
 80037e8:	080038f9 	.word	0x080038f9
 80037ec:	080038f9 	.word	0x080038f9
 80037f0:	080038b7 	.word	0x080038b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f918 	bl	8003a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0208 	orr.w	r2, r2, #8
 800380e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6999      	ldr	r1, [r3, #24]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	619a      	str	r2, [r3, #24]
      break;
 8003832:	e064      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f95e 	bl	8003afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6999      	ldr	r1, [r3, #24]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	021a      	lsls	r2, r3, #8
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	619a      	str	r2, [r3, #24]
      break;
 8003874:	e043      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f9a7 	bl	8003bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0208 	orr.w	r2, r2, #8
 8003890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0204 	bic.w	r2, r2, #4
 80038a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69d9      	ldr	r1, [r3, #28]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	61da      	str	r2, [r3, #28]
      break;
 80038b4:	e023      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f9f1 	bl	8003ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69d9      	ldr	r1, [r3, #28]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	021a      	lsls	r2, r3, #8
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
      break;
 80038f6:	e002      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
      break;
 80038fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
	...

0800396c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <TIM_Base_SetConfig+0xb8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00b      	beq.n	800399c <TIM_Base_SetConfig+0x30>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d007      	beq.n	800399c <TIM_Base_SetConfig+0x30>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <TIM_Base_SetConfig+0xbc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0x30>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <TIM_Base_SetConfig+0xc0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <TIM_Base_SetConfig+0xb8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0x62>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <TIM_Base_SetConfig+0xbc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0x62>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <TIM_Base_SetConfig+0xc0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <TIM_Base_SetConfig+0xb8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800

08003a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f023 0201 	bic.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0302 	bic.w	r3, r3, #2
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <TIM_OC1_SetConfig+0xc8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10c      	bne.n	8003aa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0308 	bic.w	r3, r3, #8
 8003a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <TIM_OC1_SetConfig+0xc8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d111      	bne.n	8003ad2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00

08003afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 0210 	bic.w	r2, r3, #16
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0320 	bic.w	r3, r3, #32
 8003b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <TIM_OC2_SetConfig+0xd0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10d      	bne.n	8003b78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <TIM_OC2_SetConfig+0xd0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d113      	bne.n	8003ba8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00

08003bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <TIM_OC3_SetConfig+0xd0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10d      	bne.n	8003c4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <TIM_OC3_SetConfig+0xd0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d113      	bne.n	8003c7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	621a      	str	r2, [r3, #32]
}
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00

08003ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	031b      	lsls	r3, r3, #12
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <TIM_OC4_SetConfig+0x98>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d109      	bne.n	8003d18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00

08003d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	2201      	movs	r2, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1a      	ldr	r2, [r3, #32]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e046      	b.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d009      	beq.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10c      	bne.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	4d0c      	ldr	r5, [pc, #48]	; (8003ea0 <__libc_init_array+0x38>)
 8003e6e:	4c0d      	ldr	r4, [pc, #52]	; (8003ea4 <__libc_init_array+0x3c>)
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	42a6      	cmp	r6, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	f000 f822 	bl	8003ec0 <_init>
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	4d0a      	ldr	r5, [pc, #40]	; (8003ea8 <__libc_init_array+0x40>)
 8003e80:	4c0a      	ldr	r4, [pc, #40]	; (8003eac <__libc_init_array+0x44>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e90:	4798      	blx	r3
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9a:	4798      	blx	r3
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	08003efc 	.word	0x08003efc
 8003ea4:	08003efc 	.word	0x08003efc
 8003ea8:	08003efc 	.word	0x08003efc
 8003eac:	08003f00 	.word	0x08003f00

08003eb0 <memset>:
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4402      	add	r2, r0
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d100      	bne.n	8003eba <memset+0xa>
 8003eb8:	4770      	bx	lr
 8003eba:	f803 1b01 	strb.w	r1, [r3], #1
 8003ebe:	e7f9      	b.n	8003eb4 <memset+0x4>

08003ec0 <_init>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

08003ecc <_fini>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr
