
Servo_Controller_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005730  08005730  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005730  08005730  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005730  08005730  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000060  08005798  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08005798  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ba0  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fbe  00000000  00000000  00030c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00033c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e48  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fdf  00000000  00000000  00035a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014451  00000000  00000000  0004ea47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f086  00000000  00000000  00062e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004584  00000000  00000000  000f1f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080056d8 	.word	0x080056d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080056d8 	.word	0x080056d8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC1_Init+0x94>)
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC1_Init+0x98>)
 8000f94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC1_Init+0x94>)
 8000f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fc0:	f001 fc64 	bl	800288c <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fca:	f000 fcdf 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fe0:	f001 fe1c 	bl	8002c1c <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fccf 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC1_Init+0x94>)
 8000ffc:	f001 fe0e 	bl	8002c1c <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001006:	f000 fcc1 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000007c 	.word	0x2000007c
 8001018:	40012400 	.word	0x40012400

0800101c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_ADC_MspInit+0xbc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d149      	bne.n	80010d0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800106c:	230c      	movs	r3, #12
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4819      	ldr	r0, [pc, #100]	; (80010e0 <HAL_ADC_MspInit+0xc4>)
 800107c:	f002 fb72 	bl	8003764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_ADC_MspInit+0xcc>)
 8001084:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 800109a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010aa:	2220      	movs	r2, #32
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010b6:	f002 f967 	bl	8003388 <HAL_DMA_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010c0:	f000 fc64 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010c8:	621a      	str	r2, [r3, #32]
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40012400 	.word	0x40012400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	200000ac 	.word	0x200000ac
 80010e8:	40020008 	.word	0x40020008

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_DMA_Init+0x38>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <MX_DMA_Init+0x38>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_DMA_Init+0x38>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	200b      	movs	r0, #11
 8001110:	f002 f903 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001114:	200b      	movs	r0, #11
 8001116:	f002 f91c 	bl	8003352 <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <encoder_updatePosition>:
		encoder->gearRatio = 1;
	}
}

// Calculates current relative position in rad. Should be called with a specified period (dt) or less
void encoder_updatePosition(encoder_t *encoder) {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	encoder->currentTicks = (int16_t) encoder->htim->Instance->CNT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	b21a      	sxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	821a      	strh	r2, [r3, #16]

	encoder->fullRevolutions += encoder->currentTicks / encoder->countsPerRevolution;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001148:	4619      	mov	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	fb91 f3f3 	sdiv	r3, r1, r3
 8001152:	441a      	add	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	615a      	str	r2, [r3, #20]
	encoder->currentTicks = encoder->currentTicks % encoder->countsPerRevolution;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	8892      	ldrh	r2, [r2, #4]
 8001162:	fb93 f1f2 	sdiv	r1, r3, r2
 8001166:	fb01 f202 	mul.w	r2, r1, r2
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	b21a      	sxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	821a      	strh	r2, [r3, #16]
	encoder->htim->Instance->CNT = (uint16_t) encoder->currentTicks;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	625a      	str	r2, [r3, #36]	; 0x24

	encoder->angle = (((float) encoder->fullRevolutions
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fcba 	bl	8000b00 <__aeabi_i2f>
 800118c:	4604      	mov	r4, r0
			+ ((float) encoder->currentTicks / encoder->countsPerRevolution)) * 2 * M_PI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fcb3 	bl	8000b00 <__aeabi_i2f>
 800119a:	4605      	mov	r5, r0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fcad 	bl	8000b00 <__aeabi_i2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff fdb0 	bl	8000d10 <__aeabi_fdiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fbef 	bl	8000998 <__addsf3>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4619      	mov	r1, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fbea 	bl	8000998 <__addsf3>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f926 	bl	8000418 <__aeabi_f2d>
 80011cc:	a310      	add	r3, pc, #64	; (adr r3, 8001210 <encoder_updatePosition+0xe8>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f979 	bl	80004c8 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4614      	mov	r4, r2
 80011dc:	461d      	mov	r5, r3
			/ encoder->gearRatio;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f918 	bl	8000418 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff fa94 	bl	800071c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fb76 	bl	80008ec <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
	encoder->angle = (((float) encoder->fullRevolutions
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
 800120e:	bf00      	nop
 8001210:	54442d18 	.word	0x54442d18
 8001214:	400921fb 	.word	0x400921fb

08001218 <encoder_updateVelocity>:

// Calculates current angular velocity in rad/s. Must be called with a specified period (dt)
void encoder_updateVelocity(encoder_t *encoder) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	encoder->angularVelocity = (encoder->angle - encoder->previousAngle) / encoder->dt;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fbb2 	bl	8000994 <__aeabi_fsub>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4619      	mov	r1, r3
 800123a:	4610      	mov	r0, r2
 800123c:	f7ff fd68 	bl	8000d10 <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
	encoder->previousAngle = encoder->angle;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	621a      	str	r2, [r3, #32]
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <encoder_getAngle>:
	encoder->angle = 0;
	encoder->fullRevolutions = 0;
	encoder->currentTicks = 0;
}

float encoder_getAngle(encoder_t *encoder){
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	return encoder->angle;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <encoder_getVelocity>:
float encoder_getVelocity(encoder_t *encoder){
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	return encoder->angularVelocity;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <swap>:
 * 			|MEDIAN FILTER|
 * __________________________________
 */

// Function to swap two float values
void swap(float* a, float* b) {
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    float temp = *a;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	601a      	str	r2, [r3, #0]
    *b = temp;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <partition>:

// Quick Sort partition function
int partition(float arr[], int low, int high) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
    float pivot = arr[high];
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]
    int i = (low - 1);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]

    for (int j = low; j < high; j++) {
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	e01c      	b.n	800130a <partition+0x5e>
        if (arr[j] <= pivot) {
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f7ff fe15 	bl	8000f0c <__aeabi_fcmpge>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00d      	beq.n	8001304 <partition+0x58>
            i++;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3301      	adds	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	18d0      	adds	r0, r2, r3
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff ffc0 	bl	8001284 <swap>
    for (int j = low; j < high; j++) {
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	3301      	adds	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	dbde      	blt.n	80012d0 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	18d0      	adds	r0, r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff ffad 	bl	8001284 <swap>
    return (i + 1);
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <quickSort>:

// Quick Sort algorithm
void quickSort(float arr[], int low, int high) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
    if (low < high) {
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	da13      	bge.n	8001372 <quickSort+0x3c>
        int pi = partition(arr, low, high);
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff ffac 	bl	80012ac <partition>
 8001354:	6178      	str	r0, [r7, #20]
        quickSort(arr, low, pi - 1);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3b01      	subs	r3, #1
 800135a:	461a      	mov	r2, r3
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff ffe9 	bl	8001336 <quickSort>
        quickSort(arr, pi + 1, high);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4619      	mov	r1, r3
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ffe2 	bl	8001336 <quickSort>
    }
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <initMedianFilter>:

// Initialize the filter
MedianFilter* initMedianFilter(int bufferSize) {
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
    MedianFilter* filter = (MedianFilter*)malloc(sizeof(MedianFilter));
 8001382:	200c      	movs	r0, #12
 8001384:	f004 f860 	bl	8005448 <malloc>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
    filter->buffer = (float*)malloc(bufferSize * sizeof(float));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f004 f859 	bl	8005448 <malloc>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]
    filter->bufferSize = bufferSize;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
    filter->currentIndex = 0;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    return filter;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <updateAndGetMedian>:

// Add a new value to the filter and get the filtered median
float updateAndGetMedian(MedianFilter* filter, float newValue) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    filter->buffer[filter->currentIndex] = newValue;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	601a      	str	r2, [r3, #0]
    filter->currentIndex = (filter->currentIndex + 1) % filter->bufferSize;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	3301      	adds	r3, #1
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6852      	ldr	r2, [r2, #4]
 80013d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80013dc:	fb01 f202 	mul.w	r2, r1, r2
 80013e0:	1a9a      	subs	r2, r3, r2
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	609a      	str	r2, [r3, #8]

    // Create a copy of the buffer for sorting
    float* sortedBuffer = (float*)malloc(filter->bufferSize * sizeof(float));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 f82b 	bl	8005448 <malloc>
 80013f2:	4603      	mov	r3, r0
 80013f4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->bufferSize; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e00d      	b.n	8001418 <updateAndGetMedian+0x64>
        sortedBuffer[i] = filter->buffer[i];
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	441a      	add	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	440b      	add	r3, r1
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < filter->bufferSize; i++) {
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbec      	blt.n	80013fc <updateAndGetMedian+0x48>
    }

    // Sort the buffer using Quick Sort
    quickSort(sortedBuffer, 0, filter->bufferSize - 1);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	461a      	mov	r2, r3
 800142a:	2100      	movs	r1, #0
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff82 	bl	8001336 <quickSort>

    // Get the median value
    float median;
    if (filter->bufferSize % 2 == 0) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d120      	bne.n	8001480 <updateAndGetMedian+0xcc>
        // If the buffer size is even, take the average of the two middle values
        median = (sortedBuffer[filter->bufferSize / 2 - 1] + sortedBuffer[filter->bufferSize / 2]) / 2.0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0fda      	lsrs	r2, r3, #31
 8001444:	4413      	add	r3, r2
 8001446:	105b      	asrs	r3, r3, #1
 8001448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800144c:	3b01      	subs	r3, #1
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0fda      	lsrs	r2, r3, #31
 800145c:	4413      	add	r3, r2
 800145e:	105b      	asrs	r3, r3, #1
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fa95 	bl	8000998 <__addsf3>
 800146e:	4603      	mov	r3, r0
 8001470:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc4b 	bl	8000d10 <__aeabi_fdiv>
 800147a:	4603      	mov	r3, r0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	e009      	b.n	8001494 <updateAndGetMedian+0xe0>
    } else {
        // If the buffer size is odd, take the middle value
        median = sortedBuffer[filter->bufferSize / 2];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	0fda      	lsrs	r2, r3, #31
 8001486:	4413      	add	r3, r2
 8001488:	105b      	asrs	r3, r3, #1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
    }

    free(sortedBuffer);
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f003 ffdf 	bl	8005458 <free>
    return median;
 800149a:	693b      	ldr	r3, [r7, #16]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <initEMAFilter>:
 * 			|EXPONENTIAL MOVING AVERAGE FILTER|
 * ____________________________________________________
 */

// Initialize the EMA filter and return a pointer to it
EMAFilter* initEMAFilter(float alpha, float initial) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    EMAFilter* filter = (EMAFilter*)malloc(sizeof(EMAFilter));
 80014ae:	2008      	movs	r0, #8
 80014b0:	f003 ffca 	bl	8005448 <malloc>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
    if (filter != NULL) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <initEMAFilter+0x26>
        filter->alpha = alpha;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
        filter->previous = initial;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	605a      	str	r2, [r3, #4]
    }
    return filter;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <updateEMA>:

// Update the EMA filter with a new value and return the filtered result
float updateEMA(EMAFilter* filter, float newValue) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    if (filter != NULL) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d022      	beq.n	800152a <updateEMA+0x56>
        float ema = filter->alpha * newValue + (1 - filter->alpha) * filter->previous;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6839      	ldr	r1, [r7, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fb5c 	bl	8000ba8 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461c      	mov	r4, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014fe:	f7ff fa49 	bl	8000994 <__aeabi_fsub>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff fb4b 	bl	8000ba8 <__aeabi_fmul>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fa3e 	bl	8000998 <__addsf3>
 800151c:	4603      	mov	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
        filter->previous = ema;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	605a      	str	r2, [r3, #4]
        return ema;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	e001      	b.n	800152e <updateEMA+0x5a>
    }
    return 0.0; // Handle errors appropriately
 800152a:	f04f 0300 	mov.w	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
	...

08001538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_GPIO_Init+0x90>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <MX_GPIO_Init+0x90>)
 8001552:	f043 0320 	orr.w	r3, r3, #32
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_GPIO_Init+0x90>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_GPIO_Init+0x90>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <MX_GPIO_Init+0x90>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_GPIO_Init+0x90>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_GPIO_Init+0x90>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <MX_GPIO_Init+0x90>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_GPIO_Init+0x90>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|ENA2_Pin|INA_Pin
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <MX_GPIO_Init+0x94>)
 800159c:	f002 fa66 	bl	8003a6c <HAL_GPIO_WritePin>
                          |INB_Pin|ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|ENA2_Pin|INA_Pin
 80015a0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80015a4:	613b      	str	r3, [r7, #16]
                          |INB_Pin|ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4619      	mov	r1, r3
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_GPIO_Init+0x94>)
 80015ba:	f002 f8d3 	bl	8003764 <HAL_GPIO_Init>

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f001 f8f7 	bl	80027c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 f965 	bl	80018a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f7ff ffab 	bl	8001538 <MX_GPIO_Init>
  MX_DMA_Init();
 80015e2:	f7ff fd83 	bl	80010ec <MX_DMA_Init>
  MX_TIM1_Init();
 80015e6:	f000 fef7 	bl	80023d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015ea:	f000 ff4d 	bl	8002488 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015ee:	f000 ff9f 	bl	8002530 <MX_TIM3_Init>
  MX_ADC1_Init();
 80015f2:	f7ff fcc5 	bl	8000f80 <MX_ADC1_Init>
  MX_SPI2_Init();
 80015f6:	f000 fd77 	bl	80020e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 80015fa:	4893      	ldr	r0, [pc, #588]	; (8001848 <main+0x278>)
 80015fc:	f001 fd08 	bl	8003010 <HAL_ADCEx_Calibration_Start>

	// Initialization of 1st motor controller
	servo_baseInit(&servo1, Double, 1200, 21.3, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4b91      	ldr	r3, [pc, #580]	; (800184c <main+0x27c>)
 8001606:	4a92      	ldr	r2, [pc, #584]	; (8001850 <main+0x280>)
 8001608:	2101      	movs	r1, #1
 800160a:	4892      	ldr	r0, [pc, #584]	; (8001854 <main+0x284>)
 800160c:	f000 fb48 	bl	8001ca0 <servo_baseInit>
	servo_encoderInit(&servo1, &htim1, 44);
 8001610:	222c      	movs	r2, #44	; 0x2c
 8001612:	4991      	ldr	r1, [pc, #580]	; (8001858 <main+0x288>)
 8001614:	488f      	ldr	r0, [pc, #572]	; (8001854 <main+0x284>)
 8001616:	f000 fb7a 	bl	8001d0e <servo_encoderInit>
	servo_driverInit(&servo1, &htim3, 1, INA_GPIO_Port, INA_Pin, INB_GPIO_Port,
 800161a:	f240 33e6 	movw	r3, #998	; 0x3e6
 800161e:	9304      	str	r3, [sp, #16]
 8001620:	2300      	movs	r3, #0
 8001622:	9303      	str	r3, [sp, #12]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	4b8c      	ldr	r3, [pc, #560]	; (800185c <main+0x28c>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4b8a      	ldr	r3, [pc, #552]	; (800185c <main+0x28c>)
 8001632:	2201      	movs	r2, #1
 8001634:	498a      	ldr	r1, [pc, #552]	; (8001860 <main+0x290>)
 8001636:	4887      	ldr	r0, [pc, #540]	; (8001854 <main+0x284>)
 8001638:	f000 fb7b 	bl	8001d32 <servo_driverInit>
	INB_Pin, 0, 998);
	servo_positionInit(&servo1, 50, 0, 0, 0.00033333, 0);
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <main+0x294>)
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4986      	ldr	r1, [pc, #536]	; (8001868 <main+0x298>)
 8001650:	4880      	ldr	r0, [pc, #512]	; (8001854 <main+0x284>)
 8001652:	f000 fbdb 	bl	8001e0c <servo_positionInit>
	servo_velocityInit(&servo1, 20, 10, 0, 0.01, 1);
 8001656:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	4b83      	ldr	r3, [pc, #524]	; (800186c <main+0x29c>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	4a82      	ldr	r2, [pc, #520]	; (8001870 <main+0x2a0>)
 8001666:	4983      	ldr	r1, [pc, #524]	; (8001874 <main+0x2a4>)
 8001668:	487a      	ldr	r0, [pc, #488]	; (8001854 <main+0x284>)
 800166a:	f000 fbea 	bl	8001e42 <servo_velocityInit>
	servo_setPositionTolerance(&servo1, 0.026);
 800166e:	4982      	ldr	r1, [pc, #520]	; (8001878 <main+0x2a8>)
 8001670:	4878      	ldr	r0, [pc, #480]	; (8001854 <main+0x284>)
 8001672:	f000 fc05 	bl	8001e80 <servo_setPositionTolerance>

	// Initialization of 2nd motor controller
	servo_baseInit(&servo2, Double, 1200, 21.3, 1);
 8001676:	2301      	movs	r3, #1
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4b74      	ldr	r3, [pc, #464]	; (800184c <main+0x27c>)
 800167c:	4a74      	ldr	r2, [pc, #464]	; (8001850 <main+0x280>)
 800167e:	2101      	movs	r1, #1
 8001680:	487e      	ldr	r0, [pc, #504]	; (800187c <main+0x2ac>)
 8001682:	f000 fb0d 	bl	8001ca0 <servo_baseInit>
	servo_encoderInit(&servo2, &htim2, 44);
 8001686:	222c      	movs	r2, #44	; 0x2c
 8001688:	497d      	ldr	r1, [pc, #500]	; (8001880 <main+0x2b0>)
 800168a:	487c      	ldr	r0, [pc, #496]	; (800187c <main+0x2ac>)
 800168c:	f000 fb3f 	bl	8001d0e <servo_encoderInit>
	servo_driverInit(&servo2, &htim3, 2, INA2_GPIO_Port, INA2_Pin,
 8001690:	f240 33e6 	movw	r3, #998	; 0x3e6
 8001694:	9304      	str	r3, [sp, #16]
 8001696:	2300      	movs	r3, #0
 8001698:	9303      	str	r3, [sp, #12]
 800169a:	2310      	movs	r3, #16
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	4b6f      	ldr	r3, [pc, #444]	; (800185c <main+0x28c>)
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	2308      	movs	r3, #8
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <main+0x28c>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	496d      	ldr	r1, [pc, #436]	; (8001860 <main+0x290>)
 80016ac:	4873      	ldr	r0, [pc, #460]	; (800187c <main+0x2ac>)
 80016ae:	f000 fb40 	bl	8001d32 <servo_driverInit>
	INB2_GPIO_Port, INB2_Pin, 0, 998);
	servo_positionInit(&servo2, 50, 0, 0, 0.00033333, 0);
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <main+0x294>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4968      	ldr	r1, [pc, #416]	; (8001868 <main+0x298>)
 80016c6:	486d      	ldr	r0, [pc, #436]	; (800187c <main+0x2ac>)
 80016c8:	f000 fba0 	bl	8001e0c <servo_positionInit>
	servo_velocityInit(&servo2, 20, 10, 0, 0.01, 1);
 80016cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	4b66      	ldr	r3, [pc, #408]	; (800186c <main+0x29c>)
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	4a65      	ldr	r2, [pc, #404]	; (8001870 <main+0x2a0>)
 80016dc:	4965      	ldr	r1, [pc, #404]	; (8001874 <main+0x2a4>)
 80016de:	4867      	ldr	r0, [pc, #412]	; (800187c <main+0x2ac>)
 80016e0:	f000 fbaf 	bl	8001e42 <servo_velocityInit>
	servo_setPositionTolerance(&servo2, 0.026);
 80016e4:	4964      	ldr	r1, [pc, #400]	; (8001878 <main+0x2a8>)
 80016e6:	4865      	ldr	r0, [pc, #404]	; (800187c <main+0x2ac>)
 80016e8:	f000 fbca 	bl	8001e80 <servo_setPositionTolerance>

	// Clear CNT and start timers in encoder mode
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 80016ec:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <main+0x288>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0201 	mvn.w	r2, #1
 80016f4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80016f6:	213c      	movs	r1, #60	; 0x3c
 80016f8:	4857      	ldr	r0, [pc, #348]	; (8001858 <main+0x288>)
 80016fa:	f003 f9a1 	bl	8004a40 <HAL_TIM_Encoder_Start>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80016fe:	4b60      	ldr	r3, [pc, #384]	; (8001880 <main+0x2b0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f06f 0201 	mvn.w	r2, #1
 8001706:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001708:	213c      	movs	r1, #60	; 0x3c
 800170a:	485d      	ldr	r0, [pc, #372]	; (8001880 <main+0x2b0>)
 800170c:	f003 f998 	bl	8004a40 <HAL_TIM_Encoder_Start>

	// Start TIM3 in PWM mode and also turn on interrupts
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001710:	2100      	movs	r1, #0
 8001712:	4853      	ldr	r0, [pc, #332]	; (8001860 <main+0x290>)
 8001714:	f003 f850 	bl	80047b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001718:	2104      	movs	r1, #4
 800171a:	4851      	ldr	r0, [pc, #324]	; (8001860 <main+0x290>)
 800171c:	f003 f84c 	bl	80047b8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001720:	484f      	ldr	r0, [pc, #316]	; (8001860 <main+0x290>)
 8001722:	f002 ffa7 	bl	8004674 <HAL_TIM_Base_Start_IT>

	// Allow powering motors by setting Enable pins HIGH
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172c:	484b      	ldr	r0, [pc, #300]	; (800185c <main+0x28c>)
 800172e:	f002 f99d 	bl	8003a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA2_GPIO_Port, ENA2_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2120      	movs	r1, #32
 8001736:	4849      	ldr	r0, [pc, #292]	; (800185c <main+0x28c>)
 8001738:	f002 f998 	bl	8003a6c <HAL_GPIO_WritePin>

	// Starting DMA for capturing current measures from ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc, 2);
 800173c:	2202      	movs	r2, #2
 800173e:	4951      	ldr	r1, [pc, #324]	; (8001884 <main+0x2b4>)
 8001740:	4841      	ldr	r0, [pc, #260]	; (8001848 <main+0x278>)
 8001742:	f001 f97b 	bl	8002a3c <HAL_ADC_Start_DMA>

	// Initialization of filters
	ema_filter1 = initEMAFilter(0.09, 0);
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	484f      	ldr	r0, [pc, #316]	; (8001888 <main+0x2b8>)
 800174c:	f7ff feaa 	bl	80014a4 <initEMAFilter>
 8001750:	4603      	mov	r3, r0
 8001752:	4a4e      	ldr	r2, [pc, #312]	; (800188c <main+0x2bc>)
 8001754:	6013      	str	r3, [r2, #0]
	median_filter1 = initMedianFilter(CUR_MED_ORDER);
 8001756:	200f      	movs	r0, #15
 8001758:	f7ff fe0f 	bl	800137a <initMedianFilter>
 800175c:	4603      	mov	r3, r0
 800175e:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <main+0x2c0>)
 8001760:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (convCpltFlag) {
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <main+0x2c4>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0fb      	beq.n	8001762 <main+0x192>
			adc1_med = updateAndGetMedian(median_filter1, adc[0]);
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <main+0x2c0>)
 800176c:	681c      	ldr	r4, [r3, #0]
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <main+0x2b4>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f9bf 	bl	8000af8 <__aeabi_ui2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4619      	mov	r1, r3
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fe18 	bl	80013b4 <updateAndGetMedian>
 8001784:	4603      	mov	r3, r0
 8001786:	4a44      	ldr	r2, [pc, #272]	; (8001898 <main+0x2c8>)
 8001788:	6013      	str	r3, [r2, #0]
			adc1_med_ema = updateEMA(ema_filter1, adc1_med);
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <main+0x2bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a42      	ldr	r2, [pc, #264]	; (8001898 <main+0x2c8>)
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe9d 	bl	80014d4 <updateEMA>
 800179a:	4603      	mov	r3, r0
 800179c:	4a3f      	ldr	r2, [pc, #252]	; (800189c <main+0x2cc>)
 800179e:	6013      	str	r3, [r2, #0]
			currentdirtest = servo_getCurrentDirection(&servo1);
 80017a0:	482c      	ldr	r0, [pc, #176]	; (8001854 <main+0x284>)
 80017a2:	f000 fb7a 	bl	8001e9a <servo_getCurrentDirection>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <main+0x2d0>)
 80017ac:	701a      	strb	r2, [r3, #0]
			current = (adc1_med_ema*adc1_med_ema*A1+adc1_med_ema*B1)*servo_getCurrentDirection(&servo1);
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <main+0x2cc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <main+0x2cc>)
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f9f5 	bl	8000ba8 <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe29 	bl	8000418 <__aeabi_f2d>
 80017c6:	a31c      	add	r3, pc, #112	; (adr r3, 8001838 <main+0x268>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fe7c 	bl	80004c8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <main+0x2cc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe1b 	bl	8000418 <__aeabi_f2d>
 80017e2:	a317      	add	r3, pc, #92	; (adr r3, 8001840 <main+0x270>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe fe6e 	bl	80004c8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fcb2 	bl	800015c <__adddf3>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	461d      	mov	r5, r3
 8001800:	4814      	ldr	r0, [pc, #80]	; (8001854 <main+0x284>)
 8001802:	f000 fb4a 	bl	8001e9a <servo_getCurrentDirection>
 8001806:	4603      	mov	r3, r0
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fdf3 	bl	80003f4 <__aeabi_i2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fe57 	bl	80004c8 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f863 	bl	80008ec <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <main+0x2d4>)
 800182a:	6013      	str	r3, [r2, #0]
			//TODO: Add lookup table and then servo_getCurrentDirection(servocontrol_t *servo);

			convCpltFlag = 0;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <main+0x2c4>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
		if (convCpltFlag) {
 8001832:	e796      	b.n	8001762 <main+0x192>
 8001834:	f3af 8000 	nop.w
 8001838:	84d70241 	.word	0x84d70241
 800183c:	3eb501a4 	.word	0x3eb501a4
 8001840:	adcf724b 	.word	0xadcf724b
 8001844:	3f1cce39 	.word	0x3f1cce39
 8001848:	2000007c 	.word	0x2000007c
 800184c:	41aa6666 	.word	0x41aa6666
 8001850:	44960000 	.word	0x44960000
 8001854:	200000f0 	.word	0x200000f0
 8001858:	200003a0 	.word	0x200003a0
 800185c:	40010c00 	.word	0x40010c00
 8001860:	20000430 	.word	0x20000430
 8001864:	39aec2cc 	.word	0x39aec2cc
 8001868:	42480000 	.word	0x42480000
 800186c:	3c23d70a 	.word	0x3c23d70a
 8001870:	41200000 	.word	0x41200000
 8001874:	41a00000 	.word	0x41a00000
 8001878:	3cd4fdf4 	.word	0x3cd4fdf4
 800187c:	20000204 	.word	0x20000204
 8001880:	200003e8 	.word	0x200003e8
 8001884:	20000318 	.word	0x20000318
 8001888:	3db851ec 	.word	0x3db851ec
 800188c:	20000330 	.word	0x20000330
 8001890:	2000032c 	.word	0x2000032c
 8001894:	2000031c 	.word	0x2000031c
 8001898:	20000320 	.word	0x20000320
 800189c:	20000324 	.word	0x20000324
 80018a0:	20000334 	.word	0x20000334
 80018a4:	20000328 	.word	0x20000328

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b094      	sub	sp, #80	; 0x50
 80018ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	2228      	movs	r2, #40	; 0x28
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fe82 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d8:	2301      	movs	r3, #1
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e6:	2301      	movs	r3, #1
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ea:	2302      	movs	r3, #2
 80018ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 f8cc 	bl	8003a9c <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800190a:	f000 f83f 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2102      	movs	r1, #2
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fb38 	bl	8003fa0 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001936:	f000 f829 	bl	800198c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800193a:	2302      	movs	r3, #2
 800193c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800193e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001942:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fca4 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001952:	f000 f81b 	bl	800198c <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3750      	adds	r7, #80	; 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_ADC_ConvCpltCallback+0x24>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d102      	bne.n	8001978 <HAL_ADC_ConvCpltCallback+0x18>
		convCpltFlag = 1;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_ADC_ConvCpltCallback+0x28>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
	}
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40012400 	.word	0x40012400
 8001988:	2000031c 	.word	0x2000031c

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>

08001996 <pid_calculate>:
#include <pid.h>

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

// Calculates output based on passed setpoint and feedback, must be called with specified period
void pid_calculate(pid_t *pid, float setpoint, float feedback) {
 8001996:	b5b0      	push	{r4, r5, r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	pid->error = setpoint - feedback;
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f7fe fff5 	bl	8000994 <__aeabi_fsub>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]

	if ((pid->error > -(pid->toleranceBand)) && (pid->error < pid->toleranceBand)) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f7ff faad 	bl	8000f20 <__aeabi_fcmpgt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d011      	beq.n	80019f0 <pid_calculate+0x5a>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff fa84 	bl	8000ee4 <__aeabi_fcmplt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <pid_calculate+0x5a>
		pid->error = 0;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
		pid_reset(pid);
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f896 	bl	8001b1c <pid_reset>
	}

	pid->P = pid->error * pid->kp;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7ff f8d4 	bl	8000ba8 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	619a      	str	r2, [r3, #24]
	pid->I += (pid->output - pid->rawOutput) * pid->kt + pid->error * pid->dt * pid->ki;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	69dc      	ldr	r4, [r3, #28]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f7fe ffbc 	bl	8000994 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f7ff f8be 	bl	8000ba8 <__aeabi_fmul>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461d      	mov	r5, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f7ff f8b4 	bl	8000ba8 <__aeabi_fmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f7ff f8ac 	bl	8000ba8 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4619      	mov	r1, r3
 8001a54:	4628      	mov	r0, r5
 8001a56:	f7fe ff9f 	bl	8000998 <__addsf3>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7fe ff9a 	bl	8000998 <__addsf3>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	61da      	str	r2, [r3, #28]
	pid->D = ((pid->error - pid->previousError) * pid->kd) / pid->dt;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7fe ff8c 	bl	8000994 <__aeabi_fsub>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f7ff f88e 	bl	8000ba8 <__aeabi_fmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7ff f93a 	bl	8000d10 <__aeabi_fdiv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	621a      	str	r2, [r3, #32]

	pid->rawOutput = pid->P + pid->I + pid->D;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f7fe ff72 	bl	8000998 <__addsf3>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7fe ff6a 	bl	8000998 <__addsf3>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
	pid->output = constrain(pid->rawOutput, pid->lowerLimit, pid->upperLimit);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f7ff fa04 	bl	8000ee4 <__aeabi_fcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <pid_calculate+0x152>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	e00f      	b.n	8001b08 <pid_calculate+0x172>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f7ff fa14 	bl	8000f20 <__aeabi_fcmpgt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <pid_calculate+0x16e>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	e001      	b.n	8001b08 <pid_calculate+0x172>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	6353      	str	r3, [r2, #52]	; 0x34
	pid->previousError = pid->error;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}

08001b1c <pid_reset>:

// Resets all the components and previous error
void pid_reset(pid_t *pid) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	pid->P = 0;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	pid->I = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
	pid->D = 0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
	pid->previousError = 0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
	pid->output = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <pid_getOutput>:

float pid_getOutput(pid_t *pid) {
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
	return pid->output;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <pwm_setSpeed>:
void pwm_dutyLimits(pwmControl_t *driver, uint16_t minDuty, uint16_t maxDuty) {
	driver->minDuty = minDuty;
	driver->maxDuty = maxDuty;
}

void pwm_setSpeed(pwmControl_t *driver, int32_t duty) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	if (!duty) {
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d119      	bne.n	8001bb0 <pwm_setSpeed+0x44>
		driver->_duty = 0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68d8      	ldr	r0, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f001 ff6c 	bl	8003a6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6958      	ldr	r0, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f001 ff63 	bl	8003a6c <HAL_GPIO_WritePin>
		driver->dir = 0;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]
 8001bae:	e045      	b.n	8001c3c <pwm_setSpeed+0xd0>
	} else {
		driver->_duty = constrain(ABS(duty), driver->minDuty, driver->maxDuty);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfb8      	it	lt
 8001bb6:	425b      	neglt	r3, r3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	8b52      	ldrh	r2, [r2, #26]
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	da02      	bge.n	8001bc6 <pwm_setSpeed+0x5a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8b5b      	ldrh	r3, [r3, #26]
 8001bc4:	e008      	b.n	8001bd8 <pwm_setSpeed+0x6c>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bfb8      	it	lt
 8001bcc:	425b      	neglt	r3, r3
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	8b12      	ldrh	r2, [r2, #24]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	bfa8      	it	ge
 8001bd6:	4613      	movge	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	61d3      	str	r3, [r2, #28]
		if (duty > 0) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	dd16      	ble.n	8001c10 <pwm_setSpeed+0xa4>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68d8      	ldr	r0, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f001 ff3c 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6958      	ldr	r0, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	f001 ff33 	bl	8003a6c <HAL_GPIO_WritePin>
			driver->dir = 1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]
 8001c0e:	e015      	b.n	8001c3c <pwm_setSpeed+0xd0>
		} else {
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68d8      	ldr	r0, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f001 ff25 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6958      	ldr	r0, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f001 ff1c 	bl	8003a6c <HAL_GPIO_WritePin>
			driver->dir = -1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	22ff      	movs	r2, #255	; 0xff
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}

	switch (driver->timerChannel) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d826      	bhi.n	8001c94 <pwm_setSpeed+0x128>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <pwm_setSpeed+0xe0>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c6b 	.word	0x08001c6b
 8001c54:	08001c79 	.word	0x08001c79
 8001c58:	08001c87 	.word	0x08001c87
	case 1:
		driver->htim->Instance->CCR1 = driver->_duty;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c68:	e015      	b.n	8001c96 <pwm_setSpeed+0x12a>
	case 2:
		driver->htim->Instance->CCR2 = driver->_duty;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001c76:	e00e      	b.n	8001c96 <pwm_setSpeed+0x12a>
	case 3:
		driver->htim->Instance->CCR3 = driver->_duty;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001c84:	e007      	b.n	8001c96 <pwm_setSpeed+0x12a>
	case 4:
		driver->htim->Instance->CCR4 = driver->_duty;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001c92:	e000      	b.n	8001c96 <pwm_setSpeed+0x12a>
	default:
		break;
 8001c94:	bf00      	nop
	}
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop

08001ca0 <servo_baseInit>:
 3. Speed of motor before gearbox in rad/s

 4. Gear ratio of reducer (e.g. if reducer is 1:21.3, pass 21.3)
 */
void servo_baseInit(servocontrol_t *servo, enum loops servoLoops,
		float motorSpeed, float gearRatio, uint8_t reverse) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	72fb      	strb	r3, [r7, #11]
	servo->controllerLoops = servoLoops;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	7afa      	ldrb	r2, [r7, #11]
 8001cb4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	servo->encoder.gearRatio = gearRatio;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	61da      	str	r2, [r3, #28]
	if (reverse) {
 8001cbe:	7e3b      	ldrb	r3, [r7, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <servo_baseInit+0x2e>
		servo->reverseFlag = -1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	22ff      	movs	r2, #255	; 0xff
 8001cc8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8001ccc:	e003      	b.n	8001cd6 <servo_baseInit+0x36>
	} else {
		servo->reverseFlag = 1;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
	}
	servo->maxShaftSpeed = motorSpeed / gearRatio;
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff f819 	bl	8000d10 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	if (servoLoops != Single) {
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <servo_baseInit+0x66>
		servo->pid_position.lowerLimit = -servo->maxShaftSpeed;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001cf4:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	651a      	str	r2, [r3, #80]	; 0x50
		servo->pid_position.upperLimit = servo->maxShaftSpeed;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <servo_encoderInit>:

 htim - pointer to handler of timer in encoder mode.
 CPR - counts per revolution. If you are using both channels and rising/falling edges of encoder, CPR=PPR*4.
 */
void servo_encoderInit(servocontrol_t *servo, TIM_HandleTypeDef *htim,
		uint16_t CPR) {
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	80fb      	strh	r3, [r7, #6]
	servo->encoder.htim = htim;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	601a      	str	r2, [r3, #0]
	servo->encoder.countsPerRevolution = CPR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	809a      	strh	r2, [r3, #4]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <servo_driverInit>:
 GPIOs are needed to control direction with a dc-motor driver
 */
void servo_driverInit(servocontrol_t *servo, TIM_HandleTypeDef *htim,
		uint8_t timerChannel, GPIO_TypeDef *dir1_Port, uint32_t dir1_Pin,
		GPIO_TypeDef *dir2_Port, uint32_t dir2_Pin, uint16_t minDuty,
		uint16_t maxDuty) {
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	71fb      	strb	r3, [r7, #7]
	servo->driver.htim = htim;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	servo->driver.timerChannel = timerChannel;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	servo->driver.dir1_Port = dir1_Port;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	servo->driver.dir1_Pin = dir1_Pin;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	servo->driver.dir2_Port = dir2_Port;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	servo->driver.dir2_Pin = dir2_Pin;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	servo->driver.minDuty = minDuty;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d76:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
	servo->driver.maxDuty = maxDuty;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d7e:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

	switch (servo->controllerLoops) {
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d028      	beq.n	8001dde <servo_driverInit+0xac>
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	dc38      	bgt.n	8001e02 <servo_driverInit+0xd0>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <servo_driverInit+0x68>
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d010      	beq.n	8001dba <servo_driverInit+0x88>
	case Triple:
		servo->pid_current.lowerLimit = -maxDuty;
		servo->pid_current.upperLimit = maxDuty;
		break;
	default:
		break;
 8001d98:	e033      	b.n	8001e02 <servo_driverInit+0xd0>
		servo->pid_position.lowerLimit = -maxDuty;
 8001d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe feae 	bl	8000b00 <__aeabi_i2f>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
		servo->pid_position.upperLimit = maxDuty;
 8001daa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fea3 	bl	8000af8 <__aeabi_ui2f>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
		break;
 8001db8:	e024      	b.n	8001e04 <servo_driverInit+0xd2>
		servo->pid_velocity.lowerLimit = -maxDuty;
 8001dba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fe9e 	bl	8000b00 <__aeabi_i2f>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		servo->pid_velocity.upperLimit = maxDuty;
 8001dcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fe92 	bl	8000af8 <__aeabi_ui2f>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		break;
 8001ddc:	e012      	b.n	8001e04 <servo_driverInit+0xd2>
		servo->pid_current.lowerLimit = -maxDuty;
 8001dde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001de0:	425b      	negs	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fe8c 	bl	8000b00 <__aeabi_i2f>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		servo->pid_current.upperLimit = maxDuty;
 8001df0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fe80 	bl	8000af8 <__aeabi_ui2f>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 8001e00:	e000      	b.n	8001e04 <servo_driverInit+0xd2>
		break;
 8001e02:	bf00      	nop
	}
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <servo_positionInit>:

// Initialization of controller loops with PID gains and period
void servo_positionInit(servocontrol_t *servo, float kp, float ki, float kd,
		float dt, float kt) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
	servo->pid_position.kp = kp;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
	servo->pid_position.ki = ki;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c
	servo->pid_position.kd = kd;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
	servo->pid_position.dt = dt;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	649a      	str	r2, [r3, #72]	; 0x48
	servo->pid_position.kt = kt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <servo_velocityInit>:
void servo_velocityInit(servocontrol_t *servo, float kp, float ki, float kd,
		float dt, float kt) {
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
	servo->pid_velocity.kp = kp;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	665a      	str	r2, [r3, #100]	; 0x64
	servo->pid_velocity.ki = ki;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	669a      	str	r2, [r3, #104]	; 0x68
	servo->pid_velocity.kd = kd;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	66da      	str	r2, [r3, #108]	; 0x6c
	servo->pid_velocity.dt = dt;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	servo->pid_velocity.kt = kt;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	671a      	str	r2, [r3, #112]	; 0x70
	servo->encoder.dt = dt;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <servo_setPositionTolerance>:
		servo->pid_velocity.upperLimit = ratedCurrent;
	}
}

// Specifies tolerated error of shaft angle
void servo_setPositionTolerance(servocontrol_t *servo, float tolerance) {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	servo->pid_position.toleranceBand = tolerance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <servo_getCurrentDirection>:
 Returns direction of motor current direction:
 -1 : backward
 0  : no current
 1  : forward
 */
int servo_getCurrentDirection(servocontrol_t *servo) {
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
	return servo->driver.dir * servo->reverseFlag;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f993 30f8 	ldrsb.w	r3, [r3, #248]	; 0xf8
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f993 30fc 	ldrsb.w	r3, [r3, #252]	; 0xfc
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <servo_positionLoop>:
 Position controller loop. Contains PID controller and algorithm which decides whether output should be passed
 to velocity loop (if system is Double/Triple-loop) or used as pwm duty cycle (Single-loop).

 Must be called with specified period for position controller.
 */
void servo_positionLoop(servocontrol_t *servo) {
 8001ebe:	b5b0      	push	{r4, r5, r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	encoder_updatePosition(&servo->encoder);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f92d 	bl	8001128 <encoder_updatePosition>

	switch (servo->currentMode) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d130      	bne.n	8001f3a <servo_positionLoop+0x7c>
	case Position: {
		pid_calculate(&servo->pid_position, servo->positionSetpoint,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f9b6 	bl	8001258 <encoder_getAngle>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff fd4f 	bl	8001996 <pid_calculate>
				encoder_getAngle(&servo->encoder));
		if (servo->controllerLoops == Single) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <servo_positionLoop+0x68>
			pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_position));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3324      	adds	r3, #36	; 0x24
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fe22 	bl	8001b56 <pid_getOutput>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f80d 	bl	8000f34 <__aeabi_f2iz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fe24 	bl	8001b6c <pwm_setSpeed>
		} else {
			servo->velocitySetpoint = pid_getOutput(&servo->pid_position);
		}
		break;
 8001f24:	e014      	b.n	8001f50 <servo_positionLoop+0x92>
			servo->velocitySetpoint = pid_getOutput(&servo->pid_position);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3324      	adds	r3, #36	; 0x24
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fe13 	bl	8001b56 <pid_getOutput>
 8001f30:	4602      	mov	r2, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		break;
 8001f38:	e00a      	b.n	8001f50 <servo_positionLoop+0x92>
	}
	default: {
		pid_reset(&servo->pid_position);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3324      	adds	r3, #36	; 0x24
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fdec 	bl	8001b1c <pid_reset>
		servo->positionSetpoint = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
 8001f4e:	bf00      	nop
	}
	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}

08001f58 <servo_velocityLoop>:
 to current loop (if system is Triple-loop) or used as pwm duty cycle (Double-loop).

 Must be called with specified period for velocity controller.
 If controller is single-loop, should not be used.
 */
void servo_velocityLoop(servocontrol_t *servo) {
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	encoder_updateVelocity(&servo->encoder);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f958 	bl	8001218 <encoder_updateVelocity>
	pid_calculate(&servo->pid_velocity, servo->velocitySetpoint,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f979 	bl	800126e <encoder_getVelocity>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4629      	mov	r1, r5
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fd07 	bl	8001996 <pid_calculate>
			encoder_getVelocity(&servo->encoder));
	switch (servo->controllerLoops) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d023      	beq.n	8001fda <servo_velocityLoop+0x82>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	dc2b      	bgt.n	8001fee <servo_velocityLoop+0x96>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <servo_velocityLoop+0x48>
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d00b      	beq.n	8001fb6 <servo_velocityLoop+0x5e>
		break;
	case Triple:
		servo->currentSetpoint = pid_getOutput(&servo->pid_velocity);
		break;
	}
}
 8001f9e:	e026      	b.n	8001fee <servo_velocityLoop+0x96>
		pid_reset(&servo->pid_velocity);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3360      	adds	r3, #96	; 0x60
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fdb9 	bl	8001b1c <pid_reset>
		servo->velocitySetpoint = 0;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		break;
 8001fb4:	e01b      	b.n	8001fee <servo_velocityLoop+0x96>
		pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_velocity));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3360      	adds	r3, #96	; 0x60
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fdc8 	bl	8001b56 <pid_getOutput>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe ffb3 	bl	8000f34 <__aeabi_f2iz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff fdca 	bl	8001b6c <pwm_setSpeed>
		break;
 8001fd8:	e009      	b.n	8001fee <servo_velocityLoop+0x96>
		servo->currentSetpoint = pid_getOutput(&servo->pid_velocity);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3360      	adds	r3, #96	; 0x60
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fdb9 	bl	8001b56 <pid_getOutput>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		break;
 8001fec:	bf00      	nop
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}

08001ff6 <servo_controlPosition>:
		pid_reset(&servo->pid_current);
		servo->currentSetpoint = 0;
	}
}

void servo_controlPosition(servocontrol_t *servo, float setpoint) {
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
	servo->currentMode = Position;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	servo->positionSetpoint = setpoint * servo->reverseFlag;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f993 30fc 	ldrsb.w	r3, [r3, #252]	; 0xfc
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fd76 	bl	8000b00 <__aeabi_i2f>
 8002014:	4603      	mov	r3, r0
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fdc5 	bl	8000ba8 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <servo_controlVelocity>:

void servo_controlVelocity(servocontrol_t *servo, float setpoint) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	if (servo->controllerLoops != Single) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8002040:	2b00      	cmp	r3, #0
 8002042:	d04c      	beq.n	80020de <servo_controlVelocity+0xae>
		servo->currentMode = Velocity;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
		servo->velocitySetpoint = constrain(setpoint * servo->reverseFlag,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f993 30fc 	ldrsb.w	r3, [r3, #252]	; 0xfc
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fd54 	bl	8000b00 <__aeabi_i2f>
 8002058:	4603      	mov	r3, r0
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fda3 	bl	8000ba8 <__aeabi_fmul>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800206c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7fe ff36 	bl	8000ee4 <__aeabi_fcmplt>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <servo_controlVelocity+0x5a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002088:	e026      	b.n	80020d8 <servo_controlVelocity+0xa8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f993 30fc 	ldrsb.w	r3, [r3, #252]	; 0xfc
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fd35 	bl	8000b00 <__aeabi_i2f>
 8002096:	4603      	mov	r3, r0
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fd84 	bl	8000ba8 <__aeabi_fmul>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f7fe ff37 	bl	8000f20 <__aeabi_fcmpgt>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <servo_controlVelocity+0x90>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80020be:	e00b      	b.n	80020d8 <servo_controlVelocity+0xa8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f993 30fc 	ldrsb.w	r3, [r3, #252]	; 0xfc
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fd1a 	bl	8000b00 <__aeabi_i2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fd69 	bl	8000ba8 <__aeabi_fmul>
 80020d6:	4603      	mov	r3, r0
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
				-servo->maxShaftSpeed, servo->maxShaftSpeed);
	}
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_SPI2_Init+0x5c>)
 80020ee:	4a16      	ldr	r2, [pc, #88]	; (8002148 <MX_SPI2_Init+0x60>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_SPI2_Init+0x5c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <MX_SPI2_Init+0x5c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_SPI2_Init+0x5c>)
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <MX_SPI2_Init+0x5c>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_SPI2_Init+0x5c>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_SPI2_Init+0x5c>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_SPI2_Init+0x5c>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_SPI2_Init+0x5c>)
 800211e:	2200      	movs	r2, #0
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_SPI2_Init+0x5c>)
 8002124:	2200      	movs	r2, #0
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_SPI2_Init+0x5c>)
 800212a:	220a      	movs	r2, #10
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_SPI2_Init+0x5c>)
 8002130:	f002 fa1c 	bl	800456c <HAL_SPI_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 800213a:	f7ff fc27 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000338 	.word	0x20000338
 8002148:	40003800 	.word	0x40003800

0800214c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d131      	bne.n	80021d0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_SPI_MspInit+0x90>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_SPI_MspInit+0x90>)
 8002172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002176:	61d3      	str	r3, [r2, #28]
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_SPI_MspInit+0x90>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_SPI_MspInit+0x90>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_SPI_MspInit+0x90>)
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_SPI_MspInit+0x90>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800219c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80021a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4619      	mov	r1, r3
 80021b0:	480b      	ldr	r0, [pc, #44]	; (80021e0 <HAL_SPI_MspInit+0x94>)
 80021b2:	f001 fad7 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_SPI_MspInit+0x94>)
 80021cc:	f001 faca 	bl	8003764 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40003800 	.word	0x40003800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010c00 	.word	0x40010c00

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_MspInit+0x5c>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_MspInit+0x5c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_MspInit+0x5c>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_MspInit+0x5c>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_MspInit+0x5c>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_MspInit+0x5c>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_MspInit+0x60>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_MspInit+0x60>)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800224c:	e7fe      	b.n	800224c <NMI_Handler+0x4>

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228e:	f000 fae1 	bl	8002854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Channel1_IRQHandler+0x10>)
 800229e:	f001 f92d 	bl	80034fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200000ac 	.word	0x200000ac

080022ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	freq3khz++;
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <TIM3_IRQHandler+0x94>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <TIM3_IRQHandler+0x94>)
 80022ba:	801a      	strh	r2, [r3, #0]
	freq100hz++;
 80022bc:	4b21      	ldr	r3, [pc, #132]	; (8002344 <TIM3_IRQHandler+0x98>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <TIM3_IRQHandler+0x98>)
 80022c6:	801a      	strh	r2, [r3, #0]
	if (!mode) {
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <TIM3_IRQHandler+0x9c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10c      	bne.n	80022ea <TIM3_IRQHandler+0x3e>
		servo_controlPosition(&servo1, setAngle);
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <TIM3_IRQHandler+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	481e      	ldr	r0, [pc, #120]	; (8002350 <TIM3_IRQHandler+0xa4>)
 80022d8:	f7ff fe8d 	bl	8001ff6 <servo_controlPosition>
		servo_controlPosition(&servo2, setAngle);
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <TIM3_IRQHandler+0xa0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	481c      	ldr	r0, [pc, #112]	; (8002354 <TIM3_IRQHandler+0xa8>)
 80022e4:	f7ff fe87 	bl	8001ff6 <servo_controlPosition>
 80022e8:	e00b      	b.n	8002302 <TIM3_IRQHandler+0x56>
	}
	else{
		servo_controlVelocity(&servo1, setSpeed);
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <TIM3_IRQHandler+0xac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4817      	ldr	r0, [pc, #92]	; (8002350 <TIM3_IRQHandler+0xa4>)
 80022f2:	f7ff fe9d 	bl	8002030 <servo_controlVelocity>
		servo_controlVelocity(&servo2, setSpeed);
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <TIM3_IRQHandler+0xac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4815      	ldr	r0, [pc, #84]	; (8002354 <TIM3_IRQHandler+0xa8>)
 80022fe:	f7ff fe97 	bl	8002030 <servo_controlVelocity>
	}

	if (freq3khz >= 6) {
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <TIM3_IRQHandler+0x94>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d908      	bls.n	800231c <TIM3_IRQHandler+0x70>
		servo_positionLoop(&servo1);
 800230a:	4811      	ldr	r0, [pc, #68]	; (8002350 <TIM3_IRQHandler+0xa4>)
 800230c:	f7ff fdd7 	bl	8001ebe <servo_positionLoop>
		servo_positionLoop(&servo2);
 8002310:	4810      	ldr	r0, [pc, #64]	; (8002354 <TIM3_IRQHandler+0xa8>)
 8002312:	f7ff fdd4 	bl	8001ebe <servo_positionLoop>
		freq3khz = 0;
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <TIM3_IRQHandler+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]
	}
	if (freq100hz >= 180) {
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <TIM3_IRQHandler+0x98>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	2bb3      	cmp	r3, #179	; 0xb3
 8002322:	d908      	bls.n	8002336 <TIM3_IRQHandler+0x8a>
		servo_velocityLoop(&servo1);
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <TIM3_IRQHandler+0xa4>)
 8002326:	f7ff fe17 	bl	8001f58 <servo_velocityLoop>
		servo_velocityLoop(&servo2);
 800232a:	480a      	ldr	r0, [pc, #40]	; (8002354 <TIM3_IRQHandler+0xa8>)
 800232c:	f7ff fe14 	bl	8001f58 <servo_velocityLoop>
		freq100hz = 0;
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <TIM3_IRQHandler+0x98>)
 8002332:	2200      	movs	r2, #0
 8002334:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002336:	4809      	ldr	r0, [pc, #36]	; (800235c <TIM3_IRQHandler+0xb0>)
 8002338:	f002 fc10 	bl	8004b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000390 	.word	0x20000390
 8002344:	20000392 	.word	0x20000392
 8002348:	20000398 	.word	0x20000398
 800234c:	20000394 	.word	0x20000394
 8002350:	200000f0 	.word	0x200000f0
 8002354:	20000204 	.word	0x20000204
 8002358:	20000000 	.word	0x20000000
 800235c:	20000430 	.word	0x20000430

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f003 f92e 	bl	80055f0 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20005000 	.word	0x20005000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	2000039c 	.word	0x2000039c
 80023c8:	200005c8 	.word	0x200005c8

080023cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 f8ea 	bl	80055c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <MX_TIM1_Init+0xa8>)
 80023f6:	4a23      	ldr	r2, [pc, #140]	; (8002484 <MX_TIM1_Init+0xac>)
 80023f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <MX_TIM1_Init+0xa8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_TIM1_Init+0xa8>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <MX_TIM1_Init+0xa8>)
 8002408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800240c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_TIM1_Init+0xa8>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_TIM1_Init+0xa8>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <MX_TIM1_Init+0xa8>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002420:	2303      	movs	r3, #3
 8002422:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002428:	2301      	movs	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002430:	230f      	movs	r3, #15
 8002432:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002438:	2301      	movs	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002440:	230f      	movs	r3, #15
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	4619      	mov	r1, r3
 800244a:	480d      	ldr	r0, [pc, #52]	; (8002480 <MX_TIM1_Init+0xa8>)
 800244c:	f002 fa56 	bl	80048fc <HAL_TIM_Encoder_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002456:	f7ff fa99 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4806      	ldr	r0, [pc, #24]	; (8002480 <MX_TIM1_Init+0xa8>)
 8002468:	f002 ff7e 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002472:	f7ff fa8b 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3730      	adds	r7, #48	; 0x30
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200003a0 	.word	0x200003a0
 8002484:	40012c00 	.word	0x40012c00

08002488 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f003 f892 	bl	80055c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <MX_TIM2_Init+0xa4>)
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <MX_TIM2_Init+0xa4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <MX_TIM2_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <MX_TIM2_Init+0xa4>)
 80024ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_TIM2_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <MX_TIM2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024cc:	2303      	movs	r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d4:	2301      	movs	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e4:	2301      	movs	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4619      	mov	r1, r3
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <MX_TIM2_Init+0xa4>)
 80024f8:	f002 fa00 	bl	80048fc <HAL_TIM_Encoder_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002502:	f7ff fa43 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4806      	ldr	r0, [pc, #24]	; (800252c <MX_TIM2_Init+0xa4>)
 8002514:	f002 ff28 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800251e:	f7ff fa35 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002522:	bf00      	nop
 8002524:	3730      	adds	r7, #48	; 0x30
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200003e8 	.word	0x200003e8

08002530 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002536:	f107 0320 	add.w	r3, r7, #32
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002552:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <MX_TIM3_Init+0xc4>)
 8002556:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800255a:	2203      	movs	r2, #3
 800255c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002566:	f240 32e7 	movw	r2, #999	; 0x3e7
 800256a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002578:	481d      	ldr	r0, [pc, #116]	; (80025f0 <MX_TIM3_Init+0xc0>)
 800257a:	f002 f8cd 	bl	8004718 <HAL_TIM_PWM_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002584:	f7ff fa02 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002588:	2320      	movs	r3, #32
 800258a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002590:	f107 0320 	add.w	r3, r7, #32
 8002594:	4619      	mov	r1, r3
 8002596:	4816      	ldr	r0, [pc, #88]	; (80025f0 <MX_TIM3_Init+0xc0>)
 8002598:	f002 fee6 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025a2:	f7ff f9f3 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a6:	2360      	movs	r3, #96	; 0x60
 80025a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	4619      	mov	r1, r3
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <MX_TIM3_Init+0xc0>)
 80025be:	f002 fbd5 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80025c8:	f7ff f9e0 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2204      	movs	r2, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4807      	ldr	r0, [pc, #28]	; (80025f0 <MX_TIM3_Init+0xc0>)
 80025d4:	f002 fbca 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025de:	f7ff f9d5 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025e2:	4803      	ldr	r0, [pc, #12]	; (80025f0 <MX_TIM3_Init+0xc0>)
 80025e4:	f000 f898 	bl	8002718 <HAL_TIM_MspPostInit>

}
 80025e8:	bf00      	nop
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000430 	.word	0x20000430
 80025f4:	40000400 	.word	0x40000400

080025f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0318 	add.w	r3, r7, #24
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d125      	bne.n	8002664 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800261e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002648:	f44f 7340 	mov.w	r3, #768	; 0x300
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	4619      	mov	r1, r3
 800265c:	481a      	ldr	r0, [pc, #104]	; (80026c8 <HAL_TIM_Encoder_MspInit+0xd0>)
 800265e:	f001 f881 	bl	8003764 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002662:	e028      	b.n	80026b6 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d123      	bne.n	80026b6 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6193      	str	r3, [r2, #24]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800269e:	2303      	movs	r3, #3
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0318 	add.w	r3, r7, #24
 80026ae:	4619      	mov	r1, r3
 80026b0:	4805      	ldr	r0, [pc, #20]	; (80026c8 <HAL_TIM_Encoder_MspInit+0xd0>)
 80026b2:	f001 f857 	bl	8003764 <HAL_GPIO_Init>
}
 80026b6:	bf00      	nop
 80026b8:	3728      	adds	r7, #40	; 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010800 	.word	0x40010800

080026cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <HAL_TIM_PWM_MspInit+0x44>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d113      	bne.n	8002706 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_TIM_PWM_MspInit+0x48>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_TIM_PWM_MspInit+0x48>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_TIM_PWM_MspInit+0x48>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	201d      	movs	r0, #29
 80026fc:	f000 fe0d 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002700:	201d      	movs	r0, #29
 8002702:	f000 fe26 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40000400 	.word	0x40000400
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_TIM_MspPostInit+0x58>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d117      	bne.n	8002768 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_TIM_MspPostInit+0x5c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_TIM_MspPostInit+0x5c>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_TIM_MspPostInit+0x5c>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2302      	movs	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <HAL_TIM_MspPostInit+0x60>)
 8002764:	f000 fffe 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40000400 	.word	0x40000400
 8002774:	40021000 	.word	0x40021000
 8002778:	40010800 	.word	0x40010800

0800277c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800277e:	490d      	ldr	r1, [pc, #52]	; (80027b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027a2:	f7ff fe13 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a6:	f002 ff29 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027aa:	f7fe ff11 	bl	80015d0 <main>
  bx lr
 80027ae:	4770      	bx	lr
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80027b8:	08005738 	.word	0x08005738
  ldr r2, =_sbss
 80027bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80027c0:	200005c4 	.word	0x200005c4

080027c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC1_2_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_Init+0x28>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_Init+0x28>)
 80027d2:	f043 0310 	orr.w	r3, r3, #16
 80027d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 fd93 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027de:	200f      	movs	r0, #15
 80027e0:	f000 f808 	bl	80027f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e4:	f7ff fcfe 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x54>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_InitTick+0x58>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280a:	fbb3 f3f1 	udiv	r3, r3, r1
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fdab 	bl	800336e <HAL_SYSTICK_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e00e      	b.n	8002840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b0f      	cmp	r3, #15
 8002826:	d80a      	bhi.n	800283e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002828:	2200      	movs	r2, #0
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f000 fd73 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <HAL_InitTick+0x5c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000004 	.word	0x20000004
 800284c:	2000000c 	.word	0x2000000c
 8002850:	20000008 	.word	0x20000008

08002854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x1c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x20>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_IncTick+0x20>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	2000000c 	.word	0x2000000c
 8002874:	20000478 	.word	0x20000478

08002878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_GetTick+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000478 	.word	0x20000478

0800288c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0be      	b.n	8002a2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fba6 	bl	800101c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 faf5 	bl	8002ec0 <ADC_ConversionStop_Disable>
 80028d6:	4603      	mov	r3, r0
 80028d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 8099 	bne.w	8002a1a <HAL_ADC_Init+0x18e>
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 8095 	bne.w	8002a1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f8:	f023 0302 	bic.w	r3, r3, #2
 80028fc:	f043 0202 	orr.w	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800290c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7b1b      	ldrb	r3, [r3, #12]
 8002912:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002914:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4313      	orrs	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002924:	d003      	beq.n	800292e <HAL_ADC_Init+0xa2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_ADC_Init+0xa8>
 800292e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002932:	e000      	b.n	8002936 <HAL_ADC_Init+0xaa>
 8002934:	2300      	movs	r3, #0
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7d1b      	ldrb	r3, [r3, #20]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d119      	bne.n	8002978 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7b1b      	ldrb	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	3b01      	subs	r3, #1
 8002952:	035a      	lsls	r2, r3, #13
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e00b      	b.n	8002978 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_ADC_Init+0x1a8>)
 8002994:	4013      	ands	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	430b      	orrs	r3, r1
 800299e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a8:	d003      	beq.n	80029b2 <HAL_ADC_Init+0x126>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d104      	bne.n	80029bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_ADC_Init+0x1ac>)
 80029d8:	4013      	ands	r3, r2
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10b      	bne.n	80029f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029f6:	e018      	b.n	8002a2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	f023 0312 	bic.w	r3, r3, #18
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a18:	e007      	b.n	8002a2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	ffe1f7fd 	.word	0xffe1f7fd
 8002a38:	ff1f0efe 	.word	0xff1f0efe

08002a3c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a64      	ldr	r2, [pc, #400]	; (8002be4 <HAL_ADC_Start_DMA+0x1a8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_ADC_Start_DMA+0x24>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_ADC_Start_DMA+0x1ac>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d106      	bne.n	8002a6e <HAL_ADC_Start_DMA+0x32>
 8002a60:	4b60      	ldr	r3, [pc, #384]	; (8002be4 <HAL_ADC_Start_DMA+0x1a8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 80b3 	bne.w	8002bd4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_Start_DMA+0x40>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e0ae      	b.n	8002bda <HAL_ADC_Start_DMA+0x19e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9c1 	bl	8002e0c <ADC_Enable>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 809a 	bne.w	8002bca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a4e      	ldr	r2, [pc, #312]	; (8002be8 <HAL_ADC_Start_DMA+0x1ac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d105      	bne.n	8002ac0 <HAL_ADC_Start_DMA+0x84>
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_ADC_Start_DMA+0x1a8>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d115      	bne.n	8002aec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d026      	beq.n	8002b28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aea:	e01d      	b.n	8002b28 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <HAL_ADC_Start_DMA+0x1a8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_ADC_Start_DMA+0xd0>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <HAL_ADC_Start_DMA+0x1ac>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10d      	bne.n	8002b28 <HAL_ADC_Start_DMA+0xec>
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_ADC_Start_DMA+0x1a8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f023 0206 	bic.w	r2, r3, #6
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b40:	e002      	b.n	8002b48 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a25      	ldr	r2, [pc, #148]	; (8002bec <HAL_ADC_Start_DMA+0x1b0>)
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <HAL_ADC_Start_DMA+0x1b4>)
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <HAL_ADC_Start_DMA+0x1b8>)
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0202 	mvn.w	r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a18      	ldr	r0, [r3, #32]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	334c      	adds	r3, #76	; 0x4c
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f000 fc53 	bl	800343c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ba0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002bb4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bb6:	e00f      	b.n	8002bd8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bc6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bc8:	e006      	b.n	8002bd8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002bd2:	e001      	b.n	8002bd8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40012400 	.word	0x40012400
 8002be8:	40012800 	.word	0x40012800
 8002bec:	08002f43 	.word	0x08002f43
 8002bf0:	08002fbf 	.word	0x08002fbf
 8002bf4:	08002fdb 	.word	0x08002fdb

08002bf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x20>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e0dc      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x1da>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d81c      	bhi.n	8002c86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3b05      	subs	r3, #5
 8002c5e:	221f      	movs	r2, #31
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4019      	ands	r1, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	3b05      	subs	r3, #5
 8002c78:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34
 8002c84:	e03c      	b.n	8002d00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d81c      	bhi.n	8002cc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b23      	subs	r3, #35	; 0x23
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4019      	ands	r1, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b23      	subs	r3, #35	; 0x23
 8002cba:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc6:	e01b      	b.n	8002d00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b41      	subs	r3, #65	; 0x41
 8002cda:	221f      	movs	r2, #31
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	4019      	ands	r1, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b41      	subs	r3, #65	; 0x41
 8002cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d91c      	bls.n	8002d42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68d9      	ldr	r1, [r3, #12]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	3b1e      	subs	r3, #30
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	4019      	ands	r1, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6898      	ldr	r0, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	3b1e      	subs	r3, #30
 8002d34:	fa00 f203 	lsl.w	r2, r0, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	e019      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	2207      	movs	r2, #7
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4019      	ands	r1, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6898      	ldr	r0, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d003      	beq.n	8002d86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d82:	2b11      	cmp	r3, #17
 8002d84:	d132      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d125      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d126      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d11a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_ADC_ConfigChannel+0x1e8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <HAL_ADC_ConfigChannel+0x1ec>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	0c9a      	lsrs	r2, r3, #18
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dcc:	e002      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x1b2>
 8002dda:	e007      	b.n	8002dec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	40012400 	.word	0x40012400
 8002e04:	20000004 	.word	0x20000004
 8002e08:	431bde83 	.word	0x431bde83

08002e0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d040      	beq.n	8002eac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <ADC_Enable+0xac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <ADC_Enable+0xb0>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	0c9b      	lsrs	r3, r3, #18
 8002e46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e48:	e002      	b.n	8002e50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e56:	f7ff fd0f 	bl	8002878 <HAL_GetTick>
 8002e5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e5c:	e01f      	b.n	8002e9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e5e:	f7ff fd0b 	bl	8002878 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d918      	bls.n	8002e9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d011      	beq.n	8002e9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f043 0210 	orr.w	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e007      	b.n	8002eae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d1d8      	bne.n	8002e5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000004 	.word	0x20000004
 8002ebc:	431bde83 	.word	0x431bde83

08002ec0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d12e      	bne.n	8002f38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eea:	f7ff fcc5 	bl	8002878 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ef0:	e01b      	b.n	8002f2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ef2:	f7ff fcc1 	bl	8002878 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d914      	bls.n	8002f2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10d      	bne.n	8002f2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f043 0210 	orr.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e007      	b.n	8002f3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d0dc      	beq.n	8002ef2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d127      	bne.n	8002fac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f76:	d115      	bne.n	8002fa4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d111      	bne.n	8002fa4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7fe fcdb 	bl	8001960 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002faa:	e004      	b.n	8002fb6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff fe13 	bl	8002bf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff fe02 	bl	8002c0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_ADCEx_Calibration_Start+0x1e>
 800302a:	2302      	movs	r3, #2
 800302c:	e097      	b.n	800315e <HAL_ADCEx_Calibration_Start+0x14e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff42 	bl	8002ec0 <ADC_ConversionStop_Disable>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fee3 	bl	8002e0c <ADC_Enable>
 8003046:	4603      	mov	r3, r0
 8003048:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8081 	bne.w	8003154 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800305a:	f023 0302 	bic.w	r3, r3, #2
 800305e:	f043 0202 	orr.w	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003066:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_ADCEx_Calibration_Start+0x158>)
 8003068:	681c      	ldr	r4, [r3, #0]
 800306a:	2002      	movs	r0, #2
 800306c:	f001 f9c8 	bl	8004400 <HAL_RCCEx_GetPeriphCLKFreq>
 8003070:	4603      	mov	r3, r0
 8003072:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003076:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003078:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800307a:	e002      	b.n	8003082 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b01      	subs	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0208 	orr.w	r2, r2, #8
 8003096:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003098:	f7ff fbee 	bl	8002878 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800309e:	e01b      	b.n	80030d8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80030a0:	f7ff fbea 	bl	8002878 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b0a      	cmp	r3, #10
 80030ac:	d914      	bls.n	80030d8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f023 0312 	bic.w	r3, r3, #18
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e042      	b.n	800315e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1dc      	bne.n	80030a0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0204 	orr.w	r2, r2, #4
 80030f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80030f6:	f7ff fbbf 	bl	8002878 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030fc:	e01b      	b.n	8003136 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80030fe:	f7ff fbbb 	bl	8002878 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b0a      	cmp	r3, #10
 800310a:	d914      	bls.n	8003136 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f023 0312 	bic.w	r3, r3, #18
 8003122:	f043 0210 	orr.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e013      	b.n	800315e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1dc      	bne.n	80030fe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f023 0303 	bic.w	r3, r3, #3
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}
 8003166:	bf00      	nop
 8003168:	20000004 	.word	0x20000004

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4906      	ldr	r1, [pc, #24]	; (8003204 <__NVIC_EnableIRQ+0x34>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	; (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	; (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff90 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff2d 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff42 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff90 	bl	800325c <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5f 	bl	8003208 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff35 	bl	80031d0 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e043      	b.n	8003426 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_DMA_Init+0xa8>)
 80033a6:	4413      	add	r3, r2
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <HAL_DMA_Init+0xac>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	009a      	lsls	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_DMA_Init+0xb0>)
 80033ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	bffdfff8 	.word	0xbffdfff8
 8003434:	cccccccd 	.word	0xcccccccd
 8003438:	40020000 	.word	0x40020000

0800343c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_DMA_Start_IT+0x20>
 8003458:	2302      	movs	r3, #2
 800345a:	e04b      	b.n	80034f4 <HAL_DMA_Start_IT+0xb8>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d13a      	bne.n	80034e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f937 	bl	8003708 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 020e 	orr.w	r2, r2, #14
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e00f      	b.n	80034d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0204 	bic.w	r2, r2, #4
 80034c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 020a 	orr.w	r2, r2, #10
 80034d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e005      	b.n	80034f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2204      	movs	r2, #4
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d04f      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xc8>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04a      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_DMA_IRQHandler+0x1f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d029      	beq.n	80035aa <HAL_DMA_IRQHandler+0xae>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_DMA_IRQHandler+0x1f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xaa>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a63      	ldr	r2, [pc, #396]	; (80036f4 <HAL_DMA_IRQHandler+0x1f8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0xa4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <HAL_DMA_IRQHandler+0x1fc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d012      	beq.n	800359a <HAL_DMA_IRQHandler+0x9e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a60      	ldr	r2, [pc, #384]	; (80036fc <HAL_DMA_IRQHandler+0x200>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x98>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <HAL_DMA_IRQHandler+0x204>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d102      	bne.n	800358e <HAL_DMA_IRQHandler+0x92>
 8003588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800358c:	e00e      	b.n	80035ac <HAL_DMA_IRQHandler+0xb0>
 800358e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003592:	e00b      	b.n	80035ac <HAL_DMA_IRQHandler+0xb0>
 8003594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003598:	e008      	b.n	80035ac <HAL_DMA_IRQHandler+0xb0>
 800359a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800359e:	e005      	b.n	80035ac <HAL_DMA_IRQHandler+0xb0>
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a4:	e002      	b.n	80035ac <HAL_DMA_IRQHandler+0xb0>
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	e000      	b.n	80035ac <HAL_DMA_IRQHandler+0xb0>
 80035aa:	2304      	movs	r3, #4
 80035ac:	4a55      	ldr	r2, [pc, #340]	; (8003704 <HAL_DMA_IRQHandler+0x208>)
 80035ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8094 	beq.w	80036e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035c2:	e08e      	b.n	80036e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2202      	movs	r2, #2
 80035ca:	409a      	lsls	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d056      	beq.n	8003682 <HAL_DMA_IRQHandler+0x186>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d051      	beq.n	8003682 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 020a 	bic.w	r2, r2, #10
 80035fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a38      	ldr	r2, [pc, #224]	; (80036ec <HAL_DMA_IRQHandler+0x1f0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d029      	beq.n	8003662 <HAL_DMA_IRQHandler+0x166>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_DMA_IRQHandler+0x1f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_DMA_IRQHandler+0x162>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <HAL_DMA_IRQHandler+0x1f8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01a      	beq.n	8003658 <HAL_DMA_IRQHandler+0x15c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a34      	ldr	r2, [pc, #208]	; (80036f8 <HAL_DMA_IRQHandler+0x1fc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d012      	beq.n	8003652 <HAL_DMA_IRQHandler+0x156>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_DMA_IRQHandler+0x200>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00a      	beq.n	800364c <HAL_DMA_IRQHandler+0x150>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a31      	ldr	r2, [pc, #196]	; (8003700 <HAL_DMA_IRQHandler+0x204>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d102      	bne.n	8003646 <HAL_DMA_IRQHandler+0x14a>
 8003640:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003644:	e00e      	b.n	8003664 <HAL_DMA_IRQHandler+0x168>
 8003646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364a:	e00b      	b.n	8003664 <HAL_DMA_IRQHandler+0x168>
 800364c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003650:	e008      	b.n	8003664 <HAL_DMA_IRQHandler+0x168>
 8003652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003656:	e005      	b.n	8003664 <HAL_DMA_IRQHandler+0x168>
 8003658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800365c:	e002      	b.n	8003664 <HAL_DMA_IRQHandler+0x168>
 800365e:	2320      	movs	r3, #32
 8003660:	e000      	b.n	8003664 <HAL_DMA_IRQHandler+0x168>
 8003662:	2302      	movs	r3, #2
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <HAL_DMA_IRQHandler+0x208>)
 8003666:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d034      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003680:	e02f      	b.n	80036e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2208      	movs	r2, #8
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d028      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x1e8>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020e 	bic.w	r2, r2, #14
 80036aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
    }
  }
  return;
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
}
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40020008 	.word	0x40020008
 80036f0:	4002001c 	.word	0x4002001c
 80036f4:	40020030 	.word	0x40020030
 80036f8:	40020044 	.word	0x40020044
 80036fc:	40020058 	.word	0x40020058
 8003700:	4002006c 	.word	0x4002006c
 8003704:	40020000 	.word	0x40020000

08003708 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d108      	bne.n	8003748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003746:	e007      	b.n	8003758 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003776:	e169      	b.n	8003a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003778:	2201      	movs	r2, #1
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8158 	bne.w	8003a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a9a      	ldr	r2, [pc, #616]	; (8003a04 <HAL_GPIO_Init+0x2a0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d05e      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037a0:	4a98      	ldr	r2, [pc, #608]	; (8003a04 <HAL_GPIO_Init+0x2a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d875      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037a6:	4a98      	ldr	r2, [pc, #608]	; (8003a08 <HAL_GPIO_Init+0x2a4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d058      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037ac:	4a96      	ldr	r2, [pc, #600]	; (8003a08 <HAL_GPIO_Init+0x2a4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d86f      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037b2:	4a96      	ldr	r2, [pc, #600]	; (8003a0c <HAL_GPIO_Init+0x2a8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d052      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037b8:	4a94      	ldr	r2, [pc, #592]	; (8003a0c <HAL_GPIO_Init+0x2a8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d869      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037be:	4a94      	ldr	r2, [pc, #592]	; (8003a10 <HAL_GPIO_Init+0x2ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04c      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037c4:	4a92      	ldr	r2, [pc, #584]	; (8003a10 <HAL_GPIO_Init+0x2ac>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d863      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037ca:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <HAL_GPIO_Init+0x2b0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d046      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037d0:	4a90      	ldr	r2, [pc, #576]	; (8003a14 <HAL_GPIO_Init+0x2b0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d85d      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d82a      	bhi.n	8003830 <HAL_GPIO_Init+0xcc>
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d859      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037de:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <HAL_GPIO_Init+0x80>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	0800385f 	.word	0x0800385f
 80037e8:	08003839 	.word	0x08003839
 80037ec:	0800384b 	.word	0x0800384b
 80037f0:	0800388d 	.word	0x0800388d
 80037f4:	08003893 	.word	0x08003893
 80037f8:	08003893 	.word	0x08003893
 80037fc:	08003893 	.word	0x08003893
 8003800:	08003893 	.word	0x08003893
 8003804:	08003893 	.word	0x08003893
 8003808:	08003893 	.word	0x08003893
 800380c:	08003893 	.word	0x08003893
 8003810:	08003893 	.word	0x08003893
 8003814:	08003893 	.word	0x08003893
 8003818:	08003893 	.word	0x08003893
 800381c:	08003893 	.word	0x08003893
 8003820:	08003893 	.word	0x08003893
 8003824:	08003893 	.word	0x08003893
 8003828:	08003841 	.word	0x08003841
 800382c:	08003855 	.word	0x08003855
 8003830:	4a79      	ldr	r2, [pc, #484]	; (8003a18 <HAL_GPIO_Init+0x2b4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003836:	e02c      	b.n	8003892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	623b      	str	r3, [r7, #32]
          break;
 800383e:	e029      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	623b      	str	r3, [r7, #32]
          break;
 8003848:	e024      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	3308      	adds	r3, #8
 8003850:	623b      	str	r3, [r7, #32]
          break;
 8003852:	e01f      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	330c      	adds	r3, #12
 800385a:	623b      	str	r3, [r7, #32]
          break;
 800385c:	e01a      	b.n	8003894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003866:	2304      	movs	r3, #4
 8003868:	623b      	str	r3, [r7, #32]
          break;
 800386a:	e013      	b.n	8003894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003874:	2308      	movs	r3, #8
 8003876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	611a      	str	r2, [r3, #16]
          break;
 800387e:	e009      	b.n	8003894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003880:	2308      	movs	r3, #8
 8003882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	615a      	str	r2, [r3, #20]
          break;
 800388a:	e003      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
          break;
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x130>
          break;
 8003892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d801      	bhi.n	800389e <HAL_GPIO_Init+0x13a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	e001      	b.n	80038a2 <HAL_GPIO_Init+0x13e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d802      	bhi.n	80038b0 <HAL_GPIO_Init+0x14c>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	e002      	b.n	80038b6 <HAL_GPIO_Init+0x152>
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	3b08      	subs	r3, #8
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	210f      	movs	r1, #15
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	6a39      	ldr	r1, [r7, #32]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	431a      	orrs	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80b1 	beq.w	8003a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038e4:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	4a4c      	ldr	r2, [pc, #304]	; (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6193      	str	r3, [r2, #24]
 80038f0:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038fc:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_GPIO_Init+0x2bc>)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <HAL_GPIO_Init+0x2c0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_GPIO_Init+0x1ec>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <HAL_GPIO_Init+0x2c4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00d      	beq.n	800394c <HAL_GPIO_Init+0x1e8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3e      	ldr	r2, [pc, #248]	; (8003a2c <HAL_GPIO_Init+0x2c8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d007      	beq.n	8003948 <HAL_GPIO_Init+0x1e4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3d      	ldr	r2, [pc, #244]	; (8003a30 <HAL_GPIO_Init+0x2cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_GPIO_Init+0x1e0>
 8003940:	2303      	movs	r3, #3
 8003942:	e006      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003944:	2304      	movs	r3, #4
 8003946:	e004      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003948:	2302      	movs	r3, #2
 800394a:	e002      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003950:	2300      	movs	r3, #0
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	f002 0203 	and.w	r2, r2, #3
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	4093      	lsls	r3, r2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003962:	492f      	ldr	r1, [pc, #188]	; (8003a20 <HAL_GPIO_Init+0x2bc>)
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	492c      	ldr	r1, [pc, #176]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	4928      	ldr	r1, [pc, #160]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039a4:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	4922      	ldr	r1, [pc, #136]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	491e      	ldr	r1, [pc, #120]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4918      	ldr	r1, [pc, #96]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4914      	ldr	r1, [pc, #80]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	e021      	b.n	8003a46 <HAL_GPIO_Init+0x2e2>
 8003a02:	bf00      	nop
 8003a04:	10320000 	.word	0x10320000
 8003a08:	10310000 	.word	0x10310000
 8003a0c:	10220000 	.word	0x10220000
 8003a10:	10210000 	.word	0x10210000
 8003a14:	10120000 	.word	0x10120000
 8003a18:	10110000 	.word	0x10110000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010800 	.word	0x40010800
 8003a28:	40010c00 	.word	0x40010c00
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	4909      	ldr	r1, [pc, #36]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	3301      	adds	r3, #1
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f47f ae8e 	bne.w	8003778 <HAL_GPIO_Init+0x14>
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	372c      	adds	r7, #44	; 0x2c
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e272      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8087 	beq.w	8003bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003abc:	4b92      	ldr	r3, [pc, #584]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ac8:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d112      	bne.n	8003afa <HAL_RCC_OscConfig+0x5e>
 8003ad4:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d10b      	bne.n	8003afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	4b89      	ldr	r3, [pc, #548]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d06c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x12c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d168      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e24c      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x76>
 8003b04:	4b80      	ldr	r3, [pc, #512]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7f      	ldr	r2, [pc, #508]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e02e      	b.n	8003b70 <HAL_RCC_OscConfig+0xd4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x98>
 8003b1a:	4b7b      	ldr	r3, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7a      	ldr	r2, [pc, #488]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b78      	ldr	r3, [pc, #480]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a77      	ldr	r2, [pc, #476]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e01d      	b.n	8003b70 <HAL_RCC_OscConfig+0xd4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0xbc>
 8003b3e:	4b72      	ldr	r3, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a71      	ldr	r2, [pc, #452]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0xd4>
 8003b58:	4b6b      	ldr	r3, [pc, #428]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6a      	ldr	r2, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b68      	ldr	r3, [pc, #416]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a67      	ldr	r2, [pc, #412]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fe7e 	bl	8002878 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fe7a 	bl	8002878 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e200      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0xe4>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fe6a 	bl	8002878 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fe66 	bl	8002878 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1ec      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x10c>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d063      	beq.n	8003c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd6:	4b4c      	ldr	r3, [pc, #304]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003be2:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x18c>
 8003bee:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_RCC_OscConfig+0x176>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1c0      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4939      	ldr	r1, [pc, #228]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	e03a      	b.n	8003c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d020      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_RCC_OscConfig+0x270>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fe fe1f 	bl	8002878 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fe1b 	bl	8002878 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1a1      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4927      	ldr	r1, [pc, #156]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
 8003c70:	e015      	b.n	8003c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <HAL_RCC_OscConfig+0x270>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe fdfe 	bl	8002878 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c80:	f7fe fdfa 	bl	8002878 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e180      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d03a      	beq.n	8003d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d019      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fe fdde 	bl	8002878 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc0:	f7fe fdda 	bl	8002878 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e160      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f000 faba 	bl	8004258 <RCC_Delay>
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fe fdc4 	bl	8002878 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf2:	e00f      	b.n	8003d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fdc0 	bl	8002878 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d908      	bls.n	8003d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e146      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	42420000 	.word	0x42420000
 8003d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b92      	ldr	r3, [pc, #584]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e9      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a6 	beq.w	8003e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d32:	4b8b      	ldr	r3, [pc, #556]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	4a87      	ldr	r2, [pc, #540]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	61d3      	str	r3, [r2, #28]
 8003d4a:	4b85      	ldr	r3, [pc, #532]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b82      	ldr	r3, [pc, #520]	; (8003f64 <HAL_RCC_OscConfig+0x4c8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <HAL_RCC_OscConfig+0x4c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7e      	ldr	r2, [pc, #504]	; (8003f64 <HAL_RCC_OscConfig+0x4c8>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fe fd81 	bl	8002878 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fe fd7d 	bl	8002878 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	; 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e103      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_OscConfig+0x4c8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x312>
 8003da0:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6213      	str	r3, [r2, #32]
 8003dac:	e02d      	b.n	8003e0a <HAL_RCC_OscConfig+0x36e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x334>
 8003db6:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4a69      	ldr	r2, [pc, #420]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6213      	str	r3, [r2, #32]
 8003dc2:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4a66      	ldr	r2, [pc, #408]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	6213      	str	r3, [r2, #32]
 8003dce:	e01c      	b.n	8003e0a <HAL_RCC_OscConfig+0x36e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d10c      	bne.n	8003df2 <HAL_RCC_OscConfig+0x356>
 8003dd8:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4a60      	ldr	r2, [pc, #384]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	f043 0304 	orr.w	r3, r3, #4
 8003de2:	6213      	str	r3, [r2, #32]
 8003de4:	4b5e      	ldr	r3, [pc, #376]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4a5d      	ldr	r2, [pc, #372]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6213      	str	r3, [r2, #32]
 8003df0:	e00b      	b.n	8003e0a <HAL_RCC_OscConfig+0x36e>
 8003df2:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a5a      	ldr	r2, [pc, #360]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6213      	str	r3, [r2, #32]
 8003dfe:	4b58      	ldr	r3, [pc, #352]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a57      	ldr	r2, [pc, #348]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d015      	beq.n	8003e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fe fd31 	bl	8002878 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fd2d 	bl	8002878 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0b1      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ee      	beq.n	8003e1a <HAL_RCC_OscConfig+0x37e>
 8003e3c:	e014      	b.n	8003e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fd1b 	bl	8002878 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fe fd17 	bl	8002878 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e09b      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5c:	4b40      	ldr	r3, [pc, #256]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ee      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d105      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8087 	beq.w	8003f92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d061      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d146      	bne.n	8003f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fe fceb 	bl	8002878 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fe fce7 	bl	8002878 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e06d      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d108      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	4921      	ldr	r1, [pc, #132]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a19      	ldr	r1, [r3, #32]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	491b      	ldr	r1, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fe fcbb 	bl	8002878 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fe fcb7 	bl	8002878 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e03d      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x46a>
 8003f24:	e035      	b.n	8003f92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_RCC_OscConfig+0x4cc>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fca4 	bl	8002878 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe fca0 	bl	8002878 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e026      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x498>
 8003f52:	e01e      	b.n	8003f92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e019      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40007000 	.word	0x40007000
 8003f68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x500>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0d0      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d910      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b67      	ldr	r3, [pc, #412]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 0207 	bic.w	r2, r3, #7
 8003fca:	4965      	ldr	r1, [pc, #404]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b63      	ldr	r3, [pc, #396]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0b8      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d020      	beq.n	8004032 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ffc:	4b59      	ldr	r3, [pc, #356]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a58      	ldr	r2, [pc, #352]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004006:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004014:	4b53      	ldr	r3, [pc, #332]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a52      	ldr	r2, [pc, #328]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800401e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	494d      	ldr	r1, [pc, #308]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d040      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d115      	bne.n	800407e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e07f      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405e:	4b41      	ldr	r3, [pc, #260]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e073      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e06b      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407e:	4b39      	ldr	r3, [pc, #228]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f023 0203 	bic.w	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4936      	ldr	r1, [pc, #216]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004090:	f7fe fbf2 	bl	8002878 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	e00a      	b.n	80040ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004098:	f7fe fbee 	bl	8002878 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e053      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 020c 	and.w	r2, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1eb      	bne.n	8004098 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d210      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 0207 	bic.w	r2, r3, #7
 80040d6:	4922      	ldr	r1, [pc, #136]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e032      	b.n	8004156 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4916      	ldr	r1, [pc, #88]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	490e      	ldr	r1, [pc, #56]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412e:	f000 f821 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8004132:	4602      	mov	r2, r0
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	490a      	ldr	r1, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x1c8>)
 8004140:	5ccb      	ldrb	r3, [r1, r3]
 8004142:	fa22 f303 	lsr.w	r3, r2, r3
 8004146:	4a09      	ldr	r2, [pc, #36]	; (800416c <HAL_RCC_ClockConfig+0x1cc>)
 8004148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1d0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fb50 	bl	80027f4 <HAL_InitTick>

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
 8004168:	080056f0 	.word	0x080056f0
 800416c:	20000004 	.word	0x20000004
 8004170:	20000008 	.word	0x20000008

08004174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_GetSysClockFreq+0x94>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x30>
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x36>
 80041a2:	e027      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_GetSysClockFreq+0x98>)
 80041a6:	613b      	str	r3, [r7, #16]
      break;
 80041a8:	e027      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0c9b      	lsrs	r3, r3, #18
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RCC_GetSysClockFreq+0x94>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	0c5b      	lsrs	r3, r3, #17
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ce:	5cd3      	ldrb	r3, [r2, r3]
 80041d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <HAL_RCC_GetSysClockFreq+0x98>)
 80041d6:	fb03 f202 	mul.w	r2, r3, r2
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e004      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	613b      	str	r3, [r7, #16]
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetSysClockFreq+0x98>)
 80041f6:	613b      	str	r3, [r7, #16]
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	693b      	ldr	r3, [r7, #16]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	007a1200 	.word	0x007a1200
 8004210:	08005708 	.word	0x08005708
 8004214:	08005718 	.word	0x08005718
 8004218:	003d0900 	.word	0x003d0900

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <HAL_RCC_GetHCLKFreq+0x10>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004234:	f7ff fff2 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	0adb      	lsrs	r3, r3, #11
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	08005700 	.word	0x08005700

08004258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <RCC_Delay+0x34>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <RCC_Delay+0x38>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0a5b      	lsrs	r3, r3, #9
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004274:	bf00      	nop
  }
  while (Delay --);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f9      	bne.n	8004274 <RCC_Delay+0x1c>
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	20000004 	.word	0x20000004
 8004290:	10624dd3 	.word	0x10624dd3

08004294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d07d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
 80042cc:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b46      	ldr	r3, [pc, #280]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a42      	ldr	r2, [pc, #264]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fe fac0 	bl	8002878 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	e008      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fe fabc 	bl	8002878 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e06d      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800431a:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02e      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	429a      	cmp	r2, r3
 8004336:	d027      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004338:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004348:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800434e:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe fa8b 	bl	8002878 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe fa87 	bl	8002878 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e036      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4917      	ldr	r1, [pc, #92]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	4313      	orrs	r3, r2
 8004398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	490b      	ldr	r1, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42420440 	.word	0x42420440

08004400 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b10      	cmp	r3, #16
 8004426:	f200 808a 	bhi.w	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d045      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d075      	beq.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004436:	e082      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800443e:	4b45      	ldr	r3, [pc, #276]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d07b      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	0c9b      	lsrs	r3, r3, #18
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	4a41      	ldr	r2, [pc, #260]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004454:	5cd3      	ldrb	r3, [r2, r3]
 8004456:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004462:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	0c5b      	lsrs	r3, r3, #17
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	4a3b      	ldr	r2, [pc, #236]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800447c:	4a38      	ldr	r2, [pc, #224]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	e004      	b.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4a34      	ldr	r2, [pc, #208]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004498:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a4:	d102      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	61bb      	str	r3, [r7, #24]
      break;
 80044aa:	e04a      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4a2d      	ldr	r2, [pc, #180]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
      break;
 80044ba:	e042      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d108      	bne.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80044d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e01f      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ea:	d109      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044f8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e00f      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450a:	d11c      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800450c:	4b11      	ldr	r3, [pc, #68]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004518:	f24f 4324 	movw	r3, #62500	; 0xf424
 800451c:	61bb      	str	r3, [r7, #24]
      break;
 800451e:	e012      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004520:	e011      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004522:	f7ff fe85 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 8004526:	4602      	mov	r2, r0
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0b9b      	lsrs	r3, r3, #14
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	61bb      	str	r3, [r7, #24]
      break;
 800453c:	e004      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004546:	bf00      	nop
    }
  }
  return (frequency);
 8004548:	69bb      	ldr	r3, [r7, #24]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	0800571c 	.word	0x0800571c
 800455c:	0800572c 	.word	0x0800572c
 8004560:	007a1200 	.word	0x007a1200
 8004564:	003d0900 	.word	0x003d0900
 8004568:	aaaaaaab 	.word	0xaaaaaaab

0800456c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e076      	b.n	800466c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458e:	d009      	beq.n	80045a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
 8004596:	e005      	b.n	80045a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fd fdc4 	bl	800214c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	ea42 0103 	orr.w	r1, r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	0c1a      	lsrs	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f002 0204 	and.w	r2, r2, #4
 800464a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d001      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e03a      	b.n	8004702 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_TIM_Base_Start_IT+0x98>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_TIM_Base_Start_IT+0x58>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d009      	beq.n	80046cc <HAL_TIM_Base_Start_IT+0x58>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_TIM_Base_Start_IT+0x9c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIM_Base_Start_IT+0x58>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <HAL_TIM_Base_Start_IT+0xa0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d111      	bne.n	80046f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d010      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ee:	e007      	b.n	8004700 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800

08004718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e041      	b.n	80047ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd ffc4 	bl	80026cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fbf8 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_TIM_PWM_Start+0x24>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e022      	b.n	8004822 <HAL_TIM_PWM_Start+0x6a>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d109      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x3e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	bf14      	ite	ne
 80047ee:	2301      	movne	r3, #1
 80047f0:	2300      	moveq	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	e015      	b.n	8004822 <HAL_TIM_PWM_Start+0x6a>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d109      	bne.n	8004810 <HAL_TIM_PWM_Start+0x58>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e008      	b.n	8004822 <HAL_TIM_PWM_Start+0x6a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e05e      	b.n	80048e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0x82>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004838:	e013      	b.n	8004862 <HAL_TIM_PWM_Start+0xaa>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0x92>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004848:	e00b      	b.n	8004862 <HAL_TIM_PWM_Start+0xaa>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xa2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	e003      	b.n	8004862 <HAL_TIM_PWM_Start+0xaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2201      	movs	r2, #1
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fd58 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_TIM_PWM_Start+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d107      	bne.n	800488a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_TIM_PWM_Start+0x138>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_TIM_PWM_Start+0xfa>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d009      	beq.n	80048b2 <HAL_TIM_PWM_Start+0xfa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <HAL_TIM_PWM_Start+0x13c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIM_PWM_Start+0xfa>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <HAL_TIM_PWM_Start+0x140>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d010      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	e007      	b.n	80048e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800

080048fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e093      	b.n	8004a38 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd fe67 	bl	80025f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f000 fafb 	bl	8004f4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4313      	orrs	r3, r2
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800499c:	f023 030c 	bic.w	r3, r3, #12
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	4313      	orrs	r3, r2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	031b      	lsls	r3, r3, #12
 80049cc:	4313      	orrs	r3, r2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	4313      	orrs	r3, r2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d102      	bne.n	8004a7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a76:	7b7b      	ldrb	r3, [r7, #13]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e069      	b.n	8004b54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	e031      	b.n	8004af6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d110      	bne.n	8004aba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d102      	bne.n	8004aa4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a9e:	7b3b      	ldrb	r3, [r7, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d001      	beq.n	8004aa8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e055      	b.n	8004b54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab8:	e01d      	b.n	8004af6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d108      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac0:	7bbb      	ldrb	r3, [r7, #14]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac6:	7b7b      	ldrb	r3, [r7, #13]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004acc:	7b3b      	ldrb	r3, [r7, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e03e      	b.n	8004b54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_TIM_Encoder_Start+0xc4>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d008      	beq.n	8004b14 <HAL_TIM_Encoder_Start+0xd4>
 8004b02:	e00f      	b.n	8004b24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fc07 	bl	8005320 <TIM_CCxChannelCmd>
      break;
 8004b12:	e016      	b.n	8004b42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fbff 	bl	8005320 <TIM_CCxChannelCmd>
      break;
 8004b22:	e00e      	b.n	8004b42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fbf7 	bl	8005320 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	2104      	movs	r1, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fbf0 	bl	8005320 <TIM_CCxChannelCmd>
      break;
 8004b40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0202 	mvn.w	r2, #2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f9b8 	bl	8004f14 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f9ab 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f9ba 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0204 	mvn.w	r2, #4
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f98e 	bl	8004f14 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f981 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f990 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f964 	bl	8004f14 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f957 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f966 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f93a 	bl	8004f14 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f92d 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f93c 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f908 	bl	8004ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fb95 	bl	8005436 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f900 	bl	8004f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0220 	mvn.w	r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb60 	bl	8005424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0ae      	b.n	8004ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	f200 809f 	bhi.w	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004ed9 	.word	0x08004ed9
 8004da8:	08004ed9 	.word	0x08004ed9
 8004dac:	08004ed9 	.word	0x08004ed9
 8004db0:	08004e15 	.word	0x08004e15
 8004db4:	08004ed9 	.word	0x08004ed9
 8004db8:	08004ed9 	.word	0x08004ed9
 8004dbc:	08004ed9 	.word	0x08004ed9
 8004dc0:	08004e57 	.word	0x08004e57
 8004dc4:	08004ed9 	.word	0x08004ed9
 8004dc8:	08004ed9 	.word	0x08004ed9
 8004dcc:	08004ed9 	.word	0x08004ed9
 8004dd0:	08004e97 	.word	0x08004e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f918 	bl	8005010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	619a      	str	r2, [r3, #24]
      break;
 8004e12:	e064      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f95e 	bl	80050dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
      break;
 8004e54:	e043      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f9a7 	bl	80051b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0208 	orr.w	r2, r2, #8
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0204 	bic.w	r2, r2, #4
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	61da      	str	r2, [r3, #28]
      break;
 8004e94:	e023      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f9f1 	bl	8005284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	61da      	str	r2, [r3, #28]
      break;
 8004ed6:	e002      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
      break;
 8004edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
	...

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0xb8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0x30>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0x30>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a26      	ldr	r2, [pc, #152]	; (8005008 <TIM_Base_SetConfig+0xbc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x30>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a25      	ldr	r2, [pc, #148]	; (800500c <TIM_Base_SetConfig+0xc0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <TIM_Base_SetConfig+0xb8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	; (8005008 <TIM_Base_SetConfig+0xbc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a18      	ldr	r2, [pc, #96]	; (800500c <TIM_Base_SetConfig+0xc0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a07      	ldr	r2, [pc, #28]	; (8005004 <TIM_Base_SetConfig+0xb8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800

08005010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	f023 0201 	bic.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 0302 	bic.w	r3, r3, #2
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <TIM_OC1_SetConfig+0xc8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <TIM_OC1_SetConfig+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d111      	bne.n	80050b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00

080050dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 0210 	bic.w	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0320 	bic.w	r3, r3, #32
 8005126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <TIM_OC2_SetConfig+0xd0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10d      	bne.n	8005158 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <TIM_OC2_SetConfig+0xd0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d113      	bne.n	8005188 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00

080051b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <TIM_OC3_SetConfig+0xd0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10d      	bne.n	800522a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a14      	ldr	r2, [pc, #80]	; (8005280 <TIM_OC3_SetConfig+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d113      	bne.n	800525a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40012c00 	.word	0x40012c00

08005284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a0f      	ldr	r2, [pc, #60]	; (800531c <TIM_OC4_SetConfig+0x98>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d109      	bne.n	80052f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40012c00 	.word	0x40012c00

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e046      	b.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d009      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a12      	ldr	r2, [pc, #72]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10c      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800

08005424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <malloc>:
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <malloc+0xc>)
 800544a:	4601      	mov	r1, r0
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	f000 b82b 	b.w	80054a8 <_malloc_r>
 8005452:	bf00      	nop
 8005454:	2000005c 	.word	0x2000005c

08005458 <free>:
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <free+0xc>)
 800545a:	4601      	mov	r1, r0
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	f000 b8f3 	b.w	8005648 <_free_r>
 8005462:	bf00      	nop
 8005464:	2000005c 	.word	0x2000005c

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0e      	ldr	r6, [pc, #56]	; (80054a4 <sbrk_aligned+0x3c>)
 800546c:	460c      	mov	r4, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	4605      	mov	r5, r0
 8005472:	b911      	cbnz	r1, 800547a <sbrk_aligned+0x12>
 8005474:	f000 f8ac 	bl	80055d0 <_sbrk_r>
 8005478:	6030      	str	r0, [r6, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f8a7 	bl	80055d0 <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d00a      	beq.n	800549c <sbrk_aligned+0x34>
 8005486:	1cc4      	adds	r4, r0, #3
 8005488:	f024 0403 	bic.w	r4, r4, #3
 800548c:	42a0      	cmp	r0, r4
 800548e:	d007      	beq.n	80054a0 <sbrk_aligned+0x38>
 8005490:	1a21      	subs	r1, r4, r0
 8005492:	4628      	mov	r0, r5
 8005494:	f000 f89c 	bl	80055d0 <_sbrk_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d101      	bne.n	80054a0 <sbrk_aligned+0x38>
 800549c:	f04f 34ff 	mov.w	r4, #4294967295
 80054a0:	4620      	mov	r0, r4
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	20000480 	.word	0x20000480

080054a8 <_malloc_r>:
 80054a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ac:	1ccd      	adds	r5, r1, #3
 80054ae:	f025 0503 	bic.w	r5, r5, #3
 80054b2:	3508      	adds	r5, #8
 80054b4:	2d0c      	cmp	r5, #12
 80054b6:	bf38      	it	cc
 80054b8:	250c      	movcc	r5, #12
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	4607      	mov	r7, r0
 80054be:	db01      	blt.n	80054c4 <_malloc_r+0x1c>
 80054c0:	42a9      	cmp	r1, r5
 80054c2:	d905      	bls.n	80054d0 <_malloc_r+0x28>
 80054c4:	230c      	movs	r3, #12
 80054c6:	2600      	movs	r6, #0
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4630      	mov	r0, r6
 80054cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055a4 <_malloc_r+0xfc>
 80054d4:	f000 f868 	bl	80055a8 <__malloc_lock>
 80054d8:	f8d8 3000 	ldr.w	r3, [r8]
 80054dc:	461c      	mov	r4, r3
 80054de:	bb5c      	cbnz	r4, 8005538 <_malloc_r+0x90>
 80054e0:	4629      	mov	r1, r5
 80054e2:	4638      	mov	r0, r7
 80054e4:	f7ff ffc0 	bl	8005468 <sbrk_aligned>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	4604      	mov	r4, r0
 80054ec:	d155      	bne.n	800559a <_malloc_r+0xf2>
 80054ee:	f8d8 4000 	ldr.w	r4, [r8]
 80054f2:	4626      	mov	r6, r4
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	d145      	bne.n	8005584 <_malloc_r+0xdc>
 80054f8:	2c00      	cmp	r4, #0
 80054fa:	d048      	beq.n	800558e <_malloc_r+0xe6>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	4631      	mov	r1, r6
 8005500:	4638      	mov	r0, r7
 8005502:	eb04 0903 	add.w	r9, r4, r3
 8005506:	f000 f863 	bl	80055d0 <_sbrk_r>
 800550a:	4581      	cmp	r9, r0
 800550c:	d13f      	bne.n	800558e <_malloc_r+0xe6>
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	4638      	mov	r0, r7
 8005512:	1a6d      	subs	r5, r5, r1
 8005514:	4629      	mov	r1, r5
 8005516:	f7ff ffa7 	bl	8005468 <sbrk_aligned>
 800551a:	3001      	adds	r0, #1
 800551c:	d037      	beq.n	800558e <_malloc_r+0xe6>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	442b      	add	r3, r5
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	f8d8 3000 	ldr.w	r3, [r8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d038      	beq.n	800559e <_malloc_r+0xf6>
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	42a2      	cmp	r2, r4
 8005530:	d12b      	bne.n	800558a <_malloc_r+0xe2>
 8005532:	2200      	movs	r2, #0
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	e00f      	b.n	8005558 <_malloc_r+0xb0>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	1b52      	subs	r2, r2, r5
 800553c:	d41f      	bmi.n	800557e <_malloc_r+0xd6>
 800553e:	2a0b      	cmp	r2, #11
 8005540:	d917      	bls.n	8005572 <_malloc_r+0xca>
 8005542:	1961      	adds	r1, r4, r5
 8005544:	42a3      	cmp	r3, r4
 8005546:	6025      	str	r5, [r4, #0]
 8005548:	bf18      	it	ne
 800554a:	6059      	strne	r1, [r3, #4]
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	bf08      	it	eq
 8005550:	f8c8 1000 	streq.w	r1, [r8]
 8005554:	5162      	str	r2, [r4, r5]
 8005556:	604b      	str	r3, [r1, #4]
 8005558:	4638      	mov	r0, r7
 800555a:	f104 060b 	add.w	r6, r4, #11
 800555e:	f000 f829 	bl	80055b4 <__malloc_unlock>
 8005562:	f026 0607 	bic.w	r6, r6, #7
 8005566:	1d23      	adds	r3, r4, #4
 8005568:	1af2      	subs	r2, r6, r3
 800556a:	d0ae      	beq.n	80054ca <_malloc_r+0x22>
 800556c:	1b9b      	subs	r3, r3, r6
 800556e:	50a3      	str	r3, [r4, r2]
 8005570:	e7ab      	b.n	80054ca <_malloc_r+0x22>
 8005572:	42a3      	cmp	r3, r4
 8005574:	6862      	ldr	r2, [r4, #4]
 8005576:	d1dd      	bne.n	8005534 <_malloc_r+0x8c>
 8005578:	f8c8 2000 	str.w	r2, [r8]
 800557c:	e7ec      	b.n	8005558 <_malloc_r+0xb0>
 800557e:	4623      	mov	r3, r4
 8005580:	6864      	ldr	r4, [r4, #4]
 8005582:	e7ac      	b.n	80054de <_malloc_r+0x36>
 8005584:	4634      	mov	r4, r6
 8005586:	6876      	ldr	r6, [r6, #4]
 8005588:	e7b4      	b.n	80054f4 <_malloc_r+0x4c>
 800558a:	4613      	mov	r3, r2
 800558c:	e7cc      	b.n	8005528 <_malloc_r+0x80>
 800558e:	230c      	movs	r3, #12
 8005590:	4638      	mov	r0, r7
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	f000 f80e 	bl	80055b4 <__malloc_unlock>
 8005598:	e797      	b.n	80054ca <_malloc_r+0x22>
 800559a:	6025      	str	r5, [r4, #0]
 800559c:	e7dc      	b.n	8005558 <_malloc_r+0xb0>
 800559e:	605b      	str	r3, [r3, #4]
 80055a0:	deff      	udf	#255	; 0xff
 80055a2:	bf00      	nop
 80055a4:	2000047c 	.word	0x2000047c

080055a8 <__malloc_lock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__malloc_lock+0x8>)
 80055aa:	f000 b84b 	b.w	8005644 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	200005c0 	.word	0x200005c0

080055b4 <__malloc_unlock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__malloc_unlock+0x8>)
 80055b6:	f000 b846 	b.w	8005646 <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	200005c0 	.word	0x200005c0

080055c0 <memset>:
 80055c0:	4603      	mov	r3, r0
 80055c2:	4402      	add	r2, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <_sbrk_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	2300      	movs	r3, #0
 80055d4:	4d05      	ldr	r5, [pc, #20]	; (80055ec <_sbrk_r+0x1c>)
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fc fec0 	bl	8002360 <_sbrk>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_sbrk_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_sbrk_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	200005bc 	.word	0x200005bc

080055f0 <__errno>:
 80055f0:	4b01      	ldr	r3, [pc, #4]	; (80055f8 <__errno+0x8>)
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	2000005c 	.word	0x2000005c

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	2600      	movs	r6, #0
 8005600:	4d0c      	ldr	r5, [pc, #48]	; (8005634 <__libc_init_array+0x38>)
 8005602:	4c0d      	ldr	r4, [pc, #52]	; (8005638 <__libc_init_array+0x3c>)
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	f000 f864 	bl	80056d8 <_init>
 8005610:	2600      	movs	r6, #0
 8005612:	4d0a      	ldr	r5, [pc, #40]	; (800563c <__libc_init_array+0x40>)
 8005614:	4c0a      	ldr	r4, [pc, #40]	; (8005640 <__libc_init_array+0x44>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	08005730 	.word	0x08005730
 8005638:	08005730 	.word	0x08005730
 800563c:	08005730 	.word	0x08005730
 8005640:	08005734 	.word	0x08005734

08005644 <__retarget_lock_acquire_recursive>:
 8005644:	4770      	bx	lr

08005646 <__retarget_lock_release_recursive>:
 8005646:	4770      	bx	lr

08005648 <_free_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4605      	mov	r5, r0
 800564c:	2900      	cmp	r1, #0
 800564e:	d040      	beq.n	80056d2 <_free_r+0x8a>
 8005650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005654:	1f0c      	subs	r4, r1, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfb8      	it	lt
 800565a:	18e4      	addlt	r4, r4, r3
 800565c:	f7ff ffa4 	bl	80055a8 <__malloc_lock>
 8005660:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <_free_r+0x8c>)
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	b933      	cbnz	r3, 8005674 <_free_r+0x2c>
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	4628      	mov	r0, r5
 800566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005670:	f7ff bfa0 	b.w	80055b4 <__malloc_unlock>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d908      	bls.n	800568a <_free_r+0x42>
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	1821      	adds	r1, r4, r0
 800567c:	428b      	cmp	r3, r1
 800567e:	bf01      	itttt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	1809      	addeq	r1, r1, r0
 8005686:	6021      	streq	r1, [r4, #0]
 8005688:	e7ed      	b.n	8005666 <_free_r+0x1e>
 800568a:	461a      	mov	r2, r3
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b10b      	cbz	r3, 8005694 <_free_r+0x4c>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x42>
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	1850      	adds	r0, r2, r1
 8005698:	42a0      	cmp	r0, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x6c>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	4401      	add	r1, r0
 80056a0:	1850      	adds	r0, r2, r1
 80056a2:	4283      	cmp	r3, r0
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	d1e0      	bne.n	800566a <_free_r+0x22>
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4408      	add	r0, r1
 80056ae:	6010      	str	r0, [r2, #0]
 80056b0:	6053      	str	r3, [r2, #4]
 80056b2:	e7da      	b.n	800566a <_free_r+0x22>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x74>
 80056b6:	230c      	movs	r3, #12
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	e7d6      	b.n	800566a <_free_r+0x22>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	1821      	adds	r1, r4, r0
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf01      	itttt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	1809      	addeq	r1, r1, r0
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	6063      	str	r3, [r4, #4]
 80056ce:	6054      	str	r4, [r2, #4]
 80056d0:	e7cb      	b.n	800566a <_free_r+0x22>
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000047c 	.word	0x2000047c

080056d8 <_init>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr

080056e4 <_fini>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr
