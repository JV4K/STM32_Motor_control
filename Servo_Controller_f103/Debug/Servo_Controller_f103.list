
Servo_Controller_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005e28  08005e28  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e28  08005e28  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000060  08005e90  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08005e90  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f86  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000307d  00000000  00000000  00031052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000340d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e78  00000000  00000000  000350f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019008  00000000  00000000  00035f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145b5  00000000  00000000  0004ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f108  00000000  00000000  00063525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004660  00000000  00000000  000f2630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005dd0 	.word	0x08005dd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005dd0 	.word	0x08005dd0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC1_Init+0x94>)
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC1_Init+0x98>)
 8000f94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC1_Init+0x94>)
 8000f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fc0:	f001 fe34 	bl	8002c2c <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fca:	f000 fd41 	bl	8001a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_ADC1_Init+0x94>)
 8000fe0:	f001 ffec 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fd31 	bl	8001a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC1_Init+0x94>)
 8000ffc:	f001 ffde 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001006:	f000 fd23 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000007c 	.word	0x2000007c
 8001018:	40012400 	.word	0x40012400

0800101c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_ADC_MspInit+0xbc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d149      	bne.n	80010d0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_ADC_MspInit+0xc0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800106c:	230c      	movs	r3, #12
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4819      	ldr	r0, [pc, #100]	; (80010e0 <HAL_ADC_MspInit+0xc4>)
 800107c:	f002 fd42 	bl	8003b04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_ADC_MspInit+0xcc>)
 8001084:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 800109a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010aa:	2220      	movs	r2, #32
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010b6:	f002 fb37 	bl	8003728 <HAL_DMA_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010c0:	f000 fcc6 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010c8:	621a      	str	r2, [r3, #32]
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_ADC_MspInit+0xc8>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40012400 	.word	0x40012400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	200000ac 	.word	0x200000ac
 80010e8:	40020008 	.word	0x40020008

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_DMA_Init+0x38>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <MX_DMA_Init+0x38>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_DMA_Init+0x38>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	200b      	movs	r0, #11
 8001110:	f002 fad3 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001114:	200b      	movs	r0, #11
 8001116:	f002 faec 	bl	80036f2 <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <encoder_updatePosition>:
		encoder->gearRatio = 1;
	}
}

// Calculates current relative position in rad. Should be called with a specified period (dt) or less
void encoder_updatePosition(encoder_t *encoder) {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	encoder->currentTicks = (int16_t) encoder->htim->Instance->CNT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	b21a      	sxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	821a      	strh	r2, [r3, #16]

	encoder->fullRevolutions += encoder->currentTicks
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001148:	4619      	mov	r1, r3
			/ encoder->countsPerRevolution;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	fb91 f3f3 	sdiv	r3, r1, r3
	encoder->fullRevolutions += encoder->currentTicks
 8001152:	441a      	add	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	615a      	str	r2, [r3, #20]
	encoder->currentTicks = encoder->currentTicks
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
			% encoder->countsPerRevolution;
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	8892      	ldrh	r2, [r2, #4]
 8001162:	fb93 f1f2 	sdiv	r1, r3, r2
 8001166:	fb01 f202 	mul.w	r2, r1, r2
 800116a:	1a9b      	subs	r3, r3, r2
	encoder->currentTicks = encoder->currentTicks
 800116c:	b21a      	sxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	821a      	strh	r2, [r3, #16]
	encoder->htim->Instance->CNT = (uint16_t) encoder->currentTicks;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	625a      	str	r2, [r3, #36]	; 0x24

	encoder->angle = (((float) encoder->fullRevolutions
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fcba 	bl	8000b00 <__aeabi_i2f>
 800118c:	4604      	mov	r4, r0
			+ ((float) encoder->currentTicks / encoder->countsPerRevolution))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fcb3 	bl	8000b00 <__aeabi_i2f>
 800119a:	4605      	mov	r5, r0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fcad 	bl	8000b00 <__aeabi_i2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff fdb0 	bl	8000d10 <__aeabi_fdiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fbef 	bl	8000998 <__addsf3>
 80011ba:	4603      	mov	r3, r0
			* 2 * M_PI) / encoder->gearRatio;
 80011bc:	4619      	mov	r1, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fbea 	bl	8000998 <__addsf3>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f926 	bl	8000418 <__aeabi_f2d>
 80011cc:	a310      	add	r3, pc, #64	; (adr r3, 8001210 <encoder_updatePosition+0xe8>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f979 	bl	80004c8 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4614      	mov	r4, r2
 80011dc:	461d      	mov	r5, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f918 	bl	8000418 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff fa94 	bl	800071c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fb76 	bl	80008ec <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
	encoder->angle = (((float) encoder->fullRevolutions
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
 800120e:	bf00      	nop
 8001210:	54442d18 	.word	0x54442d18
 8001214:	400921fb 	.word	0x400921fb

08001218 <encoder_updateVelocity>:

// Calculates current angular velocity in rad/s. Must be called with a specified period (dt)
void encoder_updateVelocity(encoder_t *encoder) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	float velocity = (encoder->angle - encoder->previousAngle) / encoder->dt;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fbb2 	bl	8000994 <__aeabi_fsub>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4619      	mov	r1, r3
 800123a:	4610      	mov	r0, r2
 800123c:	f7ff fd68 	bl	8000d10 <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	60fb      	str	r3, [r7, #12]
//	encoder->angularVelocity = updateAndGetMedian(encoder->filter, velocity);
	encoder->angularVelocity = (encoder->angle - encoder->previousAngle)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff fba0 	bl	8000994 <__aeabi_fsub>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
			/ encoder->dt;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff fd56 	bl	8000d10 <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
	encoder->angularVelocity = (encoder->angle - encoder->previousAngle)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
	encoder->previousAngle = encoder->angle;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	621a      	str	r2, [r3, #32]
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <encoder_getAngle>:
	encoder->angle = 0;
	encoder->fullRevolutions = 0;
	encoder->currentTicks = 0;
}

float encoder_getAngle(encoder_t *encoder) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return encoder->angle;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <encoder_getVelocity>:
float encoder_getVelocity(encoder_t *encoder) {
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	return encoder->angularVelocity;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <swap>:
 * 			|MEDIAN FILTER|
 * __________________________________
 */

// Function to swap two float values
void swap(float* a, float* b) {
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    float temp = *a;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
    *b = temp;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <partition>:

// Quick Sort partition function
int partition(float arr[], int low, int high) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
    float pivot = arr[high];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	617b      	str	r3, [r7, #20]
    int i = (low - 1);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]

    for (int j = low; j < high; j++) {
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	e01c      	b.n	800132e <partition+0x5e>
        if (arr[j] <= pivot) {
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	6978      	ldr	r0, [r7, #20]
 8001302:	f7ff fe03 	bl	8000f0c <__aeabi_fcmpge>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00d      	beq.n	8001328 <partition+0x58>
            i++;
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	3301      	adds	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	18d0      	adds	r0, r2, r3
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff ffc0 	bl	80012a8 <swap>
    for (int j = low; j < high; j++) {
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	3301      	adds	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbde      	blt.n	80012f4 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	18d0      	adds	r0, r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff ffad 	bl	80012a8 <swap>
    return (i + 1);
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <quickSort>:

// Quick Sort algorithm
void quickSort(float arr[], int low, int high) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
    if (low < high) {
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	da13      	bge.n	8001396 <quickSort+0x3c>
        int pi = partition(arr, low, high);
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff ffac 	bl	80012d0 <partition>
 8001378:	6178      	str	r0, [r7, #20]
        quickSort(arr, low, pi - 1);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3b01      	subs	r3, #1
 800137e:	461a      	mov	r2, r3
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff ffe9 	bl	800135a <quickSort>
        quickSort(arr, pi + 1, high);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4619      	mov	r1, r3
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff ffe2 	bl	800135a <quickSort>
    }
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <initMedianFilter>:

// Initialize the filter
MedianFilter* initMedianFilter(int bufferSize) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
    MedianFilter* filter = (MedianFilter*)malloc(sizeof(MedianFilter));
 80013a6:	200c      	movs	r0, #12
 80013a8:	f004 fbca 	bl	8005b40 <malloc>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]
    filter->buffer = (float*)malloc(bufferSize * sizeof(float));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 fbc3 	bl	8005b40 <malloc>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
    filter->bufferSize = bufferSize;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	605a      	str	r2, [r3, #4]
    filter->currentIndex = 0;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    return filter;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <updateAndGetMedian>:

// Add a new value to the filter and get the filtered median
float updateAndGetMedian(MedianFilter* filter, float newValue) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    filter->buffer[filter->currentIndex] = newValue;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	601a      	str	r2, [r3, #0]
    filter->currentIndex = (filter->currentIndex + 1) % filter->bufferSize;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6852      	ldr	r2, [r2, #4]
 80013fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001400:	fb01 f202 	mul.w	r2, r1, r2
 8001404:	1a9a      	subs	r2, r3, r2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	609a      	str	r2, [r3, #8]

    // Create a copy of the buffer for sorting
    float* sortedBuffer = (float*)malloc(filter->bufferSize * sizeof(float));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fb95 	bl	8005b40 <malloc>
 8001416:	4603      	mov	r3, r0
 8001418:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < filter->bufferSize; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e00d      	b.n	800143c <updateAndGetMedian+0x64>
        sortedBuffer[i] = filter->buffer[i];
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	441a      	add	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	68f9      	ldr	r1, [r7, #12]
 8001430:	440b      	add	r3, r1
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < filter->bufferSize; i++) {
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbec      	blt.n	8001420 <updateAndGetMedian+0x48>
    }

    // Sort the buffer using Quick Sort
    quickSort(sortedBuffer, 0, filter->bufferSize - 1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	461a      	mov	r2, r3
 800144e:	2100      	movs	r1, #0
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ff82 	bl	800135a <quickSort>

    // Get the median value
    float median;
    if (filter->bufferSize % 2 == 0) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d120      	bne.n	80014a4 <updateAndGetMedian+0xcc>
        // If the buffer size is even, take the average of the two middle values
        median = (sortedBuffer[filter->bufferSize / 2 - 1] + sortedBuffer[filter->bufferSize / 2]) / 2.0;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	0fda      	lsrs	r2, r3, #31
 8001468:	4413      	add	r3, r2
 800146a:	105b      	asrs	r3, r3, #1
 800146c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001470:	3b01      	subs	r3, #1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	0fda      	lsrs	r2, r3, #31
 8001480:	4413      	add	r3, r2
 8001482:	105b      	asrs	r3, r3, #1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fa83 	bl	8000998 <__addsf3>
 8001492:	4603      	mov	r3, r0
 8001494:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc39 	bl	8000d10 <__aeabi_fdiv>
 800149e:	4603      	mov	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e009      	b.n	80014b8 <updateAndGetMedian+0xe0>
    } else {
        // If the buffer size is odd, take the middle value
        median = sortedBuffer[filter->bufferSize / 2];
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	0fda      	lsrs	r2, r3, #31
 80014aa:	4413      	add	r3, r2
 80014ac:	105b      	asrs	r3, r3, #1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
    }

    free(sortedBuffer);
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f004 fb49 	bl	8005b50 <free>
    return median;
 80014be:	693b      	ldr	r3, [r7, #16]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <initEMAFilter>:
 * 			|EXPONENTIAL MOVING AVERAGE FILTER|
 * ____________________________________________________
 */

// Initialize the EMA filter and return a pointer to it
EMAFilter* initEMAFilter(float alpha, float initial) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    EMAFilter* filter = (EMAFilter*)malloc(sizeof(EMAFilter));
 80014d2:	2008      	movs	r0, #8
 80014d4:	f004 fb34 	bl	8005b40 <malloc>
 80014d8:	4603      	mov	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
    if (filter != NULL) {
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <initEMAFilter+0x26>
        filter->alpha = alpha;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
        filter->previous = initial;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	605a      	str	r2, [r3, #4]
    }
    return filter;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <updateEMA>:

// Update the EMA filter with a new value and return the filtered result
float updateEMA(EMAFilter* filter, float newValue) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
    if (filter != NULL) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d022      	beq.n	800154e <updateEMA+0x56>
        float ema = filter->alpha * newValue + (1 - filter->alpha) * filter->previous;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fb4a 	bl	8000ba8 <__aeabi_fmul>
 8001514:	4603      	mov	r3, r0
 8001516:	461c      	mov	r4, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001522:	f7ff fa37 	bl	8000994 <__aeabi_fsub>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fb39 	bl	8000ba8 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fa2c 	bl	8000998 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]
        filter->previous = ema;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]
        return ema;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	e001      	b.n	8001552 <updateEMA+0x5a>
    }
    return 0.0; // Handle errors appropriately
 800154e:	f04f 0300 	mov.w	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
	...

0800155c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_GPIO_Init+0x90>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <MX_GPIO_Init+0x90>)
 8001576:	f043 0320 	orr.w	r3, r3, #32
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_GPIO_Init+0x90>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_GPIO_Init+0x90>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <MX_GPIO_Init+0x90>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_GPIO_Init+0x90>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_GPIO_Init+0x90>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <MX_GPIO_Init+0x90>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_GPIO_Init+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|ENA2_Pin|INA_Pin
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_GPIO_Init+0x94>)
 80015c0:	f002 fc24 	bl	8003e0c <HAL_GPIO_WritePin>
                          |INB_Pin|ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|ENA2_Pin|INA_Pin
 80015c4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80015c8:	613b      	str	r3, [r7, #16]
                          |INB_Pin|ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4619      	mov	r1, r3
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_GPIO_Init+0x94>)
 80015de:	f002 fa91 	bl	8003b04 <HAL_GPIO_Init>

}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	00000000 	.word	0x00000000

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fc:	f001 fab4 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001600:	f000 f8da 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001604:	f7ff ffaa 	bl	800155c <MX_GPIO_Init>
  MX_DMA_Init();
 8001608:	f7ff fd70 	bl	80010ec <MX_DMA_Init>
  MX_TIM1_Init();
 800160c:	f001 f848 	bl	80026a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001610:	f001 f89e 	bl	8002750 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001614:	f001 f8f0 	bl	80027f8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001618:	f7ff fcb2 	bl	8000f80 <MX_ADC1_Init>
  MX_SPI2_Init();
 800161c:	f000 fe9c 	bl	8002358 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001620:	f001 f94e 	bl	80028c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001624:	4856      	ldr	r0, [pc, #344]	; (8001780 <main+0x188>)
 8001626:	f001 fec3 	bl	80033b0 <HAL_ADCEx_Calibration_Start>

	// Initialization of 1st motor controller
	initServo1Func();
 800162a:	f000 f937 	bl	800189c <initServo1Func>

	// Initialization of 2nd motor controller
	initServo2Func();
 800162e:	f000 f9a3 	bl	8001978 <initServo2Func>

	// Clear CNT and start timers in encoder mode
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <main+0x18c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f06f 0201 	mvn.w	r2, #1
 800163a:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800163c:	213c      	movs	r1, #60	; 0x3c
 800163e:	4851      	ldr	r0, [pc, #324]	; (8001784 <main+0x18c>)
 8001640:	f003 fc1e 	bl	8004e80 <HAL_TIM_Encoder_Start>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001644:	4b50      	ldr	r3, [pc, #320]	; (8001788 <main+0x190>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0201 	mvn.w	r2, #1
 800164c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800164e:	213c      	movs	r1, #60	; 0x3c
 8001650:	484d      	ldr	r0, [pc, #308]	; (8001788 <main+0x190>)
 8001652:	f003 fc15 	bl	8004e80 <HAL_TIM_Encoder_Start>

	// Start TIM3 in PWM mode and also turn on interrupts
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	484c      	ldr	r0, [pc, #304]	; (800178c <main+0x194>)
 800165a:	f003 facd 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	484a      	ldr	r0, [pc, #296]	; (800178c <main+0x194>)
 8001662:	f003 fac9 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001666:	4849      	ldr	r0, [pc, #292]	; (800178c <main+0x194>)
 8001668:	f003 fa24 	bl	8004ab4 <HAL_TIM_Base_Start_IT>

	// Allow powering motors by setting Enable pins of a driver HIGH
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	4847      	ldr	r0, [pc, #284]	; (8001790 <main+0x198>)
 8001674:	f002 fbca 	bl	8003e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA2_GPIO_Port, ENA2_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2120      	movs	r1, #32
 800167c:	4844      	ldr	r0, [pc, #272]	; (8001790 <main+0x198>)
 800167e:	f002 fbc5 	bl	8003e0c <HAL_GPIO_WritePin>

	// Starting DMA for capturing current measures from ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc, 2);
 8001682:	2202      	movs	r2, #2
 8001684:	4943      	ldr	r1, [pc, #268]	; (8001794 <main+0x19c>)
 8001686:	483e      	ldr	r0, [pc, #248]	; (8001780 <main+0x188>)
 8001688:	f001 fba8 	bl	8002ddc <HAL_ADC_Start_DMA>

	// Initialization of filters
	ema_filter1 = initEMAFilter(0.05, 0);
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	4841      	ldr	r0, [pc, #260]	; (8001798 <main+0x1a0>)
 8001692:	f7ff ff19 	bl	80014c8 <initEMAFilter>
 8001696:	4603      	mov	r3, r0
 8001698:	4a40      	ldr	r2, [pc, #256]	; (800179c <main+0x1a4>)
 800169a:	6013      	str	r3, [r2, #0]
	median_filter1 = initMedianFilter(CUR_MED_ORDER);
 800169c:	200a      	movs	r0, #10
 800169e:	f7ff fe7e 	bl	800139e <initMedianFilter>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <main+0x1a8>)
 80016a6:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// TODO write comments about this code, make functions for multiple filtering
		if (convCpltFlag) {
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <main+0x1ac>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0fb      	beq.n	80016a8 <main+0xb0>
			adc1_med = updateAndGetMedian(median_filter1, adc[0]);
 80016b0:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <main+0x1a8>)
 80016b2:	681c      	ldr	r4, [r3, #0]
 80016b4:	4b37      	ldr	r3, [pc, #220]	; (8001794 <main+0x19c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa1c 	bl	8000af8 <__aeabi_ui2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4619      	mov	r1, r3
 80016c4:	4620      	mov	r0, r4
 80016c6:	f7ff fe87 	bl	80013d8 <updateAndGetMedian>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a36      	ldr	r2, [pc, #216]	; (80017a8 <main+0x1b0>)
 80016ce:	6013      	str	r3, [r2, #0]
//			adc1_med_ema = updateEMA(ema_filter1, adc[0]);
			adc1_med_ema = updateEMA(ema_filter1, adc1_med);
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <main+0x1a4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <main+0x1b0>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff0c 	bl	80014f8 <updateEMA>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a32      	ldr	r2, [pc, #200]	; (80017ac <main+0x1b4>)
 80016e4:	6013      	str	r3, [r2, #0]
			current = (adc1_med_ema * adc1_med_ema * A1 + adc1_med_ema * B1)
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <main+0x1b4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a30      	ldr	r2, [pc, #192]	; (80017ac <main+0x1b4>)
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa59 	bl	8000ba8 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fe8d 	bl	8000418 <__aeabi_f2d>
 80016fe:	a31c      	add	r3, pc, #112	; (adr r3, 8001770 <main+0x178>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fee0 	bl	80004c8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <main+0x1b4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fe7f 	bl	8000418 <__aeabi_f2d>
 800171a:	a317      	add	r3, pc, #92	; (adr r3, 8001778 <main+0x180>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fed2 	bl	80004c8 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fd16 	bl	800015c <__adddf3>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4614      	mov	r4, r2
 8001736:	461d      	mov	r5, r3
					* servo_getCurrentDirection(&servo1);
 8001738:	481d      	ldr	r0, [pc, #116]	; (80017b0 <main+0x1b8>)
 800173a:	f000 fc43 	bl	8001fc4 <servo_getCurrentDirection>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe57 	bl	80003f4 <__aeabi_i2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe febb 	bl	80004c8 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff f8c7 	bl	80008ec <__aeabi_d2f>
 800175e:	4603      	mov	r3, r0
			current = (adc1_med_ema * adc1_med_ema * A1 + adc1_med_ema * B1)
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <main+0x1bc>)
 8001762:	6013      	str	r3, [r2, #0]
			convCpltFlag = 0;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <main+0x1ac>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
		if (convCpltFlag) {
 800176a:	e79d      	b.n	80016a8 <main+0xb0>
 800176c:	f3af 8000 	nop.w
 8001770:	84d70241 	.word	0x84d70241
 8001774:	3eb501a4 	.word	0x3eb501a4
 8001778:	adcf724b 	.word	0xadcf724b
 800177c:	3f1cce39 	.word	0x3f1cce39
 8001780:	2000007c 	.word	0x2000007c
 8001784:	200003b8 	.word	0x200003b8
 8001788:	20000400 	.word	0x20000400
 800178c:	20000448 	.word	0x20000448
 8001790:	40010c00 	.word	0x40010c00
 8001794:	20000328 	.word	0x20000328
 8001798:	3d4ccccd 	.word	0x3d4ccccd
 800179c:	2000033c 	.word	0x2000033c
 80017a0:	20000338 	.word	0x20000338
 80017a4:	2000032c 	.word	0x2000032c
 80017a8:	20000330 	.word	0x20000330
 80017ac:	20000334 	.word	0x20000334
 80017b0:	200000f0 	.word	0x200000f0
 80017b4:	200003b0 	.word	0x200003b0

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c2:	2228      	movs	r2, #40	; 0x28
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fa76 	bl	8005cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f6:	2301      	movs	r3, #1
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fa:	2302      	movs	r3, #2
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001804:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001808:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fb14 	bl	8003e3c <HAL_RCC_OscConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800181a:	f000 f919 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	230f      	movs	r3, #15
 8001820:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2102      	movs	r1, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fd80 	bl	8004340 <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001846:	f000 f903 	bl	8001a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800184a:	2302      	movs	r3, #2
 800184c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f002 feec 	bl	8004634 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001862:	f000 f8f5 	bl	8001a50 <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3750      	adds	r7, #80	; 0x50
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a05      	ldr	r2, [pc, #20]	; (8001894 <HAL_ADC_ConvCpltCallback+0x24>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d102      	bne.n	8001888 <HAL_ADC_ConvCpltCallback+0x18>
		convCpltFlag = 1;
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_ADC_ConvCpltCallback+0x28>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
	}
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40012400 	.word	0x40012400
 8001898:	2000032c 	.word	0x2000032c

0800189c <initServo1Func>:

void initServo1Func() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af06      	add	r7, sp, #24
	servo_baseInit(&servo1, Triple, 1200, 21.3, 0);
 80018a2:	2300      	movs	r3, #0
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <initServo1Func+0x9c>)
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <initServo1Func+0xa0>)
 80018aa:	2102      	movs	r1, #2
 80018ac:	4824      	ldr	r0, [pc, #144]	; (8001940 <initServo1Func+0xa4>)
 80018ae:	f000 fa59 	bl	8001d64 <servo_baseInit>
	servo_encoderInit(&servo1, &htim1, 48);
 80018b2:	2230      	movs	r2, #48	; 0x30
 80018b4:	4923      	ldr	r1, [pc, #140]	; (8001944 <initServo1Func+0xa8>)
 80018b6:	4822      	ldr	r0, [pc, #136]	; (8001940 <initServo1Func+0xa4>)
 80018b8:	f000 fa8b 	bl	8001dd2 <servo_encoderInit>
	servo_driverInit(&servo1, &htim3, 1, INA_GPIO_Port, INA_Pin, INB_GPIO_Port,
 80018bc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80018c0:	9304      	str	r3, [sp, #16]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9303      	str	r3, [sp, #12]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <initServo1Func+0xac>)
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2340      	movs	r3, #64	; 0x40
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <initServo1Func+0xac>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	491d      	ldr	r1, [pc, #116]	; (800194c <initServo1Func+0xb0>)
 80018d8:	4819      	ldr	r0, [pc, #100]	; (8001940 <initServo1Func+0xa4>)
 80018da:	f000 fa8c 	bl	8001df6 <servo_driverInit>
	INB_Pin, 0, 999);
	servo_positionInit(&servo1, 4.26844128761844, 4.61720524119749, 0, 0.002, 1);
 80018de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <initServo1Func+0xb4>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <initServo1Func+0xb8>)
 80018ee:	491a      	ldr	r1, [pc, #104]	; (8001958 <initServo1Func+0xbc>)
 80018f0:	4813      	ldr	r0, [pc, #76]	; (8001940 <initServo1Func+0xa4>)
 80018f2:	f000 faed 	bl	8001ed0 <servo_positionInit>
	servo_velocityInit(&servo1, 0.007185, 0.00603, 0, 0.002, 1);
 80018f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <initServo1Func+0xb4>)
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	4a15      	ldr	r2, [pc, #84]	; (800195c <initServo1Func+0xc0>)
 8001906:	4916      	ldr	r1, [pc, #88]	; (8001960 <initServo1Func+0xc4>)
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <initServo1Func+0xa4>)
 800190a:	f000 fafc 	bl	8001f06 <servo_velocityInit>
	servo_currentInit(&servo1, 0.3, 1024.537964, 277452.562500, 0, 0.000333, 1);
 800190e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <initServo1Func+0xc8>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <initServo1Func+0xcc>)
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <initServo1Func+0xd0>)
 8001922:	4913      	ldr	r1, [pc, #76]	; (8001970 <initServo1Func+0xd4>)
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <initServo1Func+0xa4>)
 8001926:	f000 fb0d 	bl	8001f44 <servo_currentInit>
	servo_setPositionTolerance(&servo1, 0.05);
 800192a:	4912      	ldr	r1, [pc, #72]	; (8001974 <initServo1Func+0xd8>)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <initServo1Func+0xa4>)
 800192e:	f000 fb3c 	bl	8001faa <servo_setPositionTolerance>
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	41aa6666 	.word	0x41aa6666
 800193c:	44960000 	.word	0x44960000
 8001940:	200000f0 	.word	0x200000f0
 8001944:	200003b8 	.word	0x200003b8
 8001948:	40010c00 	.word	0x40010c00
 800194c:	20000448 	.word	0x20000448
 8001950:	3b03126f 	.word	0x3b03126f
 8001954:	4093c025 	.word	0x4093c025
 8001958:	40889712 	.word	0x40889712
 800195c:	3bc5974e 	.word	0x3bc5974e
 8001960:	3beb7026 	.word	0x3beb7026
 8001964:	39ae9681 	.word	0x39ae9681
 8001968:	48877992 	.word	0x48877992
 800196c:	44801137 	.word	0x44801137
 8001970:	3e99999a 	.word	0x3e99999a
 8001974:	3d4ccccd 	.word	0x3d4ccccd

08001978 <initServo2Func>:

void initServo2Func() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af06      	add	r7, sp, #24
	servo_baseInit(&servo2, Triple, 1200, 21.3, 1);
 800197e:	2301      	movs	r3, #1
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <initServo2Func+0xa4>)
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <initServo2Func+0xa8>)
 8001986:	2102      	movs	r1, #2
 8001988:	4826      	ldr	r0, [pc, #152]	; (8001a24 <initServo2Func+0xac>)
 800198a:	f000 f9eb 	bl	8001d64 <servo_baseInit>
	servo_encoderInit(&servo2, &htim2, 44);
 800198e:	222c      	movs	r2, #44	; 0x2c
 8001990:	4925      	ldr	r1, [pc, #148]	; (8001a28 <initServo2Func+0xb0>)
 8001992:	4824      	ldr	r0, [pc, #144]	; (8001a24 <initServo2Func+0xac>)
 8001994:	f000 fa1d 	bl	8001dd2 <servo_encoderInit>
	servo_driverInit(&servo2, &htim3, 2, INA2_GPIO_Port, INA2_Pin,
 8001998:	f240 33e6 	movw	r3, #998	; 0x3e6
 800199c:	9304      	str	r3, [sp, #16]
 800199e:	2300      	movs	r3, #0
 80019a0:	9303      	str	r3, [sp, #12]
 80019a2:	2310      	movs	r3, #16
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <initServo2Func+0xb4>)
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2308      	movs	r3, #8
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <initServo2Func+0xb4>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	491f      	ldr	r1, [pc, #124]	; (8001a30 <initServo2Func+0xb8>)
 80019b4:	481b      	ldr	r0, [pc, #108]	; (8001a24 <initServo2Func+0xac>)
 80019b6:	f000 fa1e 	bl	8001df6 <servo_driverInit>
	INB2_GPIO_Port, INB2_Pin, 0, 998);
	servo_positionInit(&servo2, 50, 0, 0, 0.00033333, 0);
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <initServo2Func+0xbc>)
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	491a      	ldr	r1, [pc, #104]	; (8001a38 <initServo2Func+0xc0>)
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <initServo2Func+0xac>)
 80019d0:	f000 fa7e 	bl	8001ed0 <servo_positionInit>
	servo_velocityInit(&servo2, 20, 10, 0, 0.01, 1);
 80019d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <initServo2Func+0xc4>)
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <initServo2Func+0xc8>)
 80019e4:	4917      	ldr	r1, [pc, #92]	; (8001a44 <initServo2Func+0xcc>)
 80019e6:	480f      	ldr	r0, [pc, #60]	; (8001a24 <initServo2Func+0xac>)
 80019e8:	f000 fa8d 	bl	8001f06 <servo_velocityInit>
	servo_currentInit(&servo2, 0.5, 0.01, 0, 0, 0.000055555, 0);
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <initServo2Func+0xd0>)
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <initServo2Func+0xc4>)
 8001a02:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <initServo2Func+0xac>)
 8001a08:	f000 fa9c 	bl	8001f44 <servo_currentInit>
	servo_setPositionTolerance(&servo2, 0.05);
 8001a0c:	490f      	ldr	r1, [pc, #60]	; (8001a4c <initServo2Func+0xd4>)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <initServo2Func+0xac>)
 8001a10:	f000 facb 	bl	8001faa <servo_setPositionTolerance>
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	41aa6666 	.word	0x41aa6666
 8001a20:	44960000 	.word	0x44960000
 8001a24:	2000020c 	.word	0x2000020c
 8001a28:	20000400 	.word	0x20000400
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	20000448 	.word	0x20000448
 8001a34:	39aec2cc 	.word	0x39aec2cc
 8001a38:	42480000 	.word	0x42480000
 8001a3c:	3c23d70a 	.word	0x3c23d70a
 8001a40:	41200000 	.word	0x41200000
 8001a44:	41a00000 	.word	0x41a00000
 8001a48:	386903ba 	.word	0x386903ba
 8001a4c:	3d4ccccd 	.word	0x3d4ccccd

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>

08001a5a <pid_calculate>:
#include <pid.h>

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

// Calculates output based on passed setpoint and feedback, must be called with specified period
void pid_calculate(pid_t *pid, float setpoint, float feedback) {
 8001a5a:	b5b0      	push	{r4, r5, r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
	pid->error = setpoint - feedback;
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f7fe ff93 	bl	8000994 <__aeabi_fsub>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]

	if ((pid->error > -(pid->toleranceBand)) && (pid->error < pid->toleranceBand)) {
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff fa4b 	bl	8000f20 <__aeabi_fcmpgt>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d011      	beq.n	8001ab4 <pid_calculate+0x5a>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7ff fa22 	bl	8000ee4 <__aeabi_fcmplt>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <pid_calculate+0x5a>
		pid->error = 0;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
		pid_reset(pid);
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f896 	bl	8001be0 <pid_reset>
	}

	pid->P = pid->error * pid->kp;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff f872 	bl	8000ba8 <__aeabi_fmul>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	619a      	str	r2, [r3, #24]
	pid->I += (pid->output - pid->rawOutput) * pid->kt + pid->error * pid->dt * pid->ki;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	69dc      	ldr	r4, [r3, #28]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7fe ff5a 	bl	8000994 <__aeabi_fsub>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f7ff f85c 	bl	8000ba8 <__aeabi_fmul>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461d      	mov	r5, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff f852 	bl	8000ba8 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f7ff f84a 	bl	8000ba8 <__aeabi_fmul>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f7fe ff3d 	bl	8000998 <__addsf3>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7fe ff38 	bl	8000998 <__addsf3>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	61da      	str	r2, [r3, #28]
	pid->D = ((pid->error - pid->previousError) * pid->kd) / pid->dt;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f7fe ff2a 	bl	8000994 <__aeabi_fsub>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f7ff f82c 	bl	8000ba8 <__aeabi_fmul>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f7ff f8d8 	bl	8000d10 <__aeabi_fdiv>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	621a      	str	r2, [r3, #32]

	pid->rawOutput = pid->P + pid->I + pid->D;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7fe ff10 	bl	8000998 <__addsf3>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f7fe ff08 	bl	8000998 <__addsf3>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
	pid->output = constrain(pid->rawOutput, pid->lowerLimit, pid->upperLimit);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f7ff f9a2 	bl	8000ee4 <__aeabi_fcmplt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <pid_calculate+0x152>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	e00f      	b.n	8001bcc <pid_calculate+0x172>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7ff f9b2 	bl	8000f20 <__aeabi_fcmpgt>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <pid_calculate+0x16e>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	e001      	b.n	8001bcc <pid_calculate+0x172>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	6353      	str	r3, [r2, #52]	; 0x34
	pid->previousError = pid->error;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}

08001be0 <pid_reset>:

// Resets all the components and previous error
void pid_reset(pid_t *pid) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	pid->P = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
	pid->I = 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
	pid->D = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
	pid->previousError = 0;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	639a      	str	r2, [r3, #56]	; 0x38
	pid->output = 0;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <pid_getOutput>:

float pid_getOutput(pid_t *pid) {
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return pid->output;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <pwm_setSpeed>:
void pwm_dutyLimits(pwmControl_t *driver, uint16_t minDuty, uint16_t maxDuty) {
	driver->minDuty = minDuty;
	driver->maxDuty = maxDuty;
}

void pwm_setSpeed(pwmControl_t *driver, int32_t duty) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	if (!duty) {
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d119      	bne.n	8001c74 <pwm_setSpeed+0x44>
		driver->_duty = 0;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68d8      	ldr	r0, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	f002 f8da 	bl	8003e0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6958      	ldr	r0, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2200      	movs	r2, #0
 8001c64:	4619      	mov	r1, r3
 8001c66:	f002 f8d1 	bl	8003e0c <HAL_GPIO_WritePin>
		driver->dir = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]
 8001c72:	e045      	b.n	8001d00 <pwm_setSpeed+0xd0>
	} else {
		driver->_duty = constrain(ABS(duty), driver->minDuty, driver->maxDuty);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bfb8      	it	lt
 8001c7a:	425b      	neglt	r3, r3
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	8b52      	ldrh	r2, [r2, #26]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	da02      	bge.n	8001c8a <pwm_setSpeed+0x5a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8b5b      	ldrh	r3, [r3, #26]
 8001c88:	e008      	b.n	8001c9c <pwm_setSpeed+0x6c>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bfb8      	it	lt
 8001c90:	425b      	neglt	r3, r3
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	8b12      	ldrh	r2, [r2, #24]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	bfa8      	it	ge
 8001c9a:	4613      	movge	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	61d3      	str	r3, [r2, #28]
		if (duty > 0) {
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dd16      	ble.n	8001cd4 <pwm_setSpeed+0xa4>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68d8      	ldr	r0, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f002 f8aa 	bl	8003e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6958      	ldr	r0, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f002 f8a1 	bl	8003e0c <HAL_GPIO_WritePin>
			driver->dir = 1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]
 8001cd2:	e015      	b.n	8001d00 <pwm_setSpeed+0xd0>
		} else {
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68d8      	ldr	r0, [r3, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f002 f893 	bl	8003e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6958      	ldr	r0, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f002 f88a 	bl	8003e0c <HAL_GPIO_WritePin>
			driver->dir = -1;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	22ff      	movs	r2, #255	; 0xff
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}

	switch (driver->timerChannel) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	791b      	ldrb	r3, [r3, #4]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d826      	bhi.n	8001d58 <pwm_setSpeed+0x128>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <pwm_setSpeed+0xe0>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d2f 	.word	0x08001d2f
 8001d18:	08001d3d 	.word	0x08001d3d
 8001d1c:	08001d4b 	.word	0x08001d4b
	case 1:
		driver->htim->Instance->CCR1 = driver->_duty;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001d2c:	e015      	b.n	8001d5a <pwm_setSpeed+0x12a>
	case 2:
		driver->htim->Instance->CCR2 = driver->_duty;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001d3a:	e00e      	b.n	8001d5a <pwm_setSpeed+0x12a>
	case 3:
		driver->htim->Instance->CCR3 = driver->_duty;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001d48:	e007      	b.n	8001d5a <pwm_setSpeed+0x12a>
	case 4:
		driver->htim->Instance->CCR4 = driver->_duty;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001d56:	e000      	b.n	8001d5a <pwm_setSpeed+0x12a>
	default:
		break;
 8001d58:	bf00      	nop
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop

08001d64 <servo_baseInit>:
 3. Speed of motor before gearbox in rad/s

 4. Gear ratio of reducer (e.g. if reducer is 1:21.3, pass 21.3)
 */
void servo_baseInit(servocontrol_t *servo, enum loops servoLoops,
		float motorSpeed, float gearRatio, uint8_t reverse) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	460b      	mov	r3, r1
 8001d72:	72fb      	strb	r3, [r7, #11]
	servo->controllerLoops = servoLoops;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	7afa      	ldrb	r2, [r7, #11]
 8001d78:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	servo->encoder.gearRatio = gearRatio;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	61da      	str	r2, [r3, #28]
	if (reverse) {
 8001d82:	7e3b      	ldrb	r3, [r7, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <servo_baseInit+0x2e>
		servo->reverseFlag = -1;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001d90:	e003      	b.n	8001d9a <servo_baseInit+0x36>
	} else {
		servo->reverseFlag = 1;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	}
	servo->maxShaftSpeed = motorSpeed / gearRatio;
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7fe ffb7 	bl	8000d10 <__aeabi_fdiv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	if (servoLoops != Single) {
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <servo_baseInit+0x66>
		servo->pid_position.lowerLimit = -servo->maxShaftSpeed;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001db8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
		servo->pid_position.upperLimit = servo->maxShaftSpeed;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <servo_encoderInit>:

 htim - pointer to handler of timer in encoder mode.
 CPR - counts per revolution. If you are using both channels and rising/falling edges of encoder, CPR=PPR*4.
 */
void servo_encoderInit(servocontrol_t *servo, TIM_HandleTypeDef *htim,
		uint16_t CPR) {
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	80fb      	strh	r3, [r7, #6]
	servo->encoder.htim = htim;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	601a      	str	r2, [r3, #0]
	servo->encoder.countsPerRevolution = CPR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	88fa      	ldrh	r2, [r7, #6]
 8001dea:	809a      	strh	r2, [r3, #4]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <servo_driverInit>:
 GPIOs are needed to control direction with a dc-motor driver
 */
void servo_driverInit(servocontrol_t *servo, TIM_HandleTypeDef *htim,
		uint8_t timerChannel, GPIO_TypeDef *dir1_Port, uint32_t dir1_Pin,
		GPIO_TypeDef *dir2_Port, uint32_t dir2_Pin, uint16_t minDuty,
		uint16_t maxDuty) {
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4613      	mov	r3, r2
 8001e04:	71fb      	strb	r3, [r7, #7]
	servo->driver.htim = htim;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	servo->driver.timerChannel = timerChannel;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	servo->driver.dir1_Port = dir1_Port;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	servo->driver.dir1_Pin = dir1_Pin;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	servo->driver.dir2_Port = dir2_Port;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	servo->driver.dir2_Pin = dir2_Pin;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a3a      	ldr	r2, [r7, #32]
 8001e32:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	servo->driver.minDuty = minDuty;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e3a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	servo->driver.maxDuty = maxDuty;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e42:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4

	switch (servo->controllerLoops) {
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d028      	beq.n	8001ea2 <servo_driverInit+0xac>
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	dc38      	bgt.n	8001ec6 <servo_driverInit+0xd0>
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <servo_driverInit+0x68>
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d010      	beq.n	8001e7e <servo_driverInit+0x88>
	case Triple:
		servo->pid_current.lowerLimit = -maxDuty;
		servo->pid_current.upperLimit = maxDuty;
		break;
	default:
		break;
 8001e5c:	e033      	b.n	8001ec6 <servo_driverInit+0xd0>
		servo->pid_position.lowerLimit = -maxDuty;
 8001e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e60:	425b      	negs	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fe4c 	bl	8000b00 <__aeabi_i2f>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
		servo->pid_position.upperLimit = maxDuty;
 8001e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fe41 	bl	8000af8 <__aeabi_ui2f>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	651a      	str	r2, [r3, #80]	; 0x50
		break;
 8001e7c:	e024      	b.n	8001ec8 <servo_driverInit+0xd2>
		servo->pid_velocity.lowerLimit = -maxDuty;
 8001e7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e80:	425b      	negs	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fe3c 	bl	8000b00 <__aeabi_i2f>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		servo->pid_velocity.upperLimit = maxDuty;
 8001e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fe30 	bl	8000af8 <__aeabi_ui2f>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		break;
 8001ea0:	e012      	b.n	8001ec8 <servo_driverInit+0xd2>
		servo->pid_current.lowerLimit = -maxDuty;
 8001ea2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fe2a 	bl	8000b00 <__aeabi_i2f>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		servo->pid_current.upperLimit = maxDuty;
 8001eb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fe1e 	bl	8000af8 <__aeabi_ui2f>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		break;
 8001ec4:	e000      	b.n	8001ec8 <servo_driverInit+0xd2>
		break;
 8001ec6:	bf00      	nop
	}
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <servo_positionInit>:

// Initialization of controller loops with PID gains and period
void servo_positionInit(servocontrol_t *servo, float kp, float ki, float kd,
		float dt, float kt) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
	servo->pid_position.kp = kp;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
	servo->pid_position.ki = ki;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
	servo->pid_position.kd = kd;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
	servo->pid_position.dt = dt;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	64da      	str	r2, [r3, #76]	; 0x4c
	servo->pid_position.kt = kt;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <servo_velocityInit>:
void servo_velocityInit(servocontrol_t *servo, float kp, float ki, float kd,
		float dt, float kt) {
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
	servo->pid_velocity.kp = kp;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	669a      	str	r2, [r3, #104]	; 0x68
	servo->pid_velocity.ki = ki;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	66da      	str	r2, [r3, #108]	; 0x6c
	servo->pid_velocity.kd = kd;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	671a      	str	r2, [r3, #112]	; 0x70
	servo->pid_velocity.dt = dt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	servo->pid_velocity.kt = kt;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	675a      	str	r2, [r3, #116]	; 0x74
	servo->encoder.dt = dt;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <servo_currentInit>:
void servo_currentInit(servocontrol_t *servo, float ratedCurrent, float kp,
		float ki, float kd, float dt, float kt) {
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
	servo->pid_current.kp = kp;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	servo->pid_current.ki = ki;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	servo->pid_current.kd = kd;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	servo->pid_current.dt = dt;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	servo->pid_current.kt = kt;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	servo->maxCurrent = ratedCurrent;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (servo->controllerLoops == Triple) {
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d109      	bne.n	8001fa0 <servo_currentInit+0x5c>
		servo->pid_velocity.lowerLimit = -ratedCurrent;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		servo->pid_velocity.upperLimit = ratedCurrent;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <servo_setPositionTolerance>:

// Specifies tolerated error of shaft angle
void servo_setPositionTolerance(servocontrol_t *servo, float tolerance) {
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
	servo->pid_position.toleranceBand = tolerance;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <servo_getCurrentDirection>:
 Returns direction of motor current direction:
 -1 : backward
 0  : no current
 1  : forward
 */
int servo_getCurrentDirection(servocontrol_t *servo) {
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	return servo->driver.dir * servo->reverseFlag;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f993 30fc 	ldrsb.w	r3, [r3, #252]	; 0xfc
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <servo_positionLoop>:
 Position controller loop. Contains PID controller and algorithm which decides whether output should be passed
 to velocity loop (if system is Double/Triple-loop) or used as pwm duty cycle (Single-loop).

 Must be called with specified period for position controller.
 */
void servo_positionLoop(servocontrol_t *servo) {
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	encoder_updatePosition(&servo->encoder);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f898 	bl	8001128 <encoder_updatePosition>

	switch (servo->currentMode) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d130      	bne.n	8002064 <servo_positionLoop+0x7c>
	case Position: {
		pid_calculate(&servo->pid_position, servo->positionSetpoint,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f933 	bl	800127c <encoder_getAngle>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4629      	mov	r1, r5
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fd1c 	bl	8001a5a <pid_calculate>
				encoder_getAngle(&servo->encoder));
		if (servo->controllerLoops == Single) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <servo_positionLoop+0x68>
			pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_position));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3328      	adds	r3, #40	; 0x28
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fdef 	bl	8001c1a <pid_getOutput>
 800203c:	4603      	mov	r3, r0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ff78 	bl	8000f34 <__aeabi_f2iz>
 8002044:	4603      	mov	r3, r0
 8002046:	4619      	mov	r1, r3
 8002048:	4620      	mov	r0, r4
 800204a:	f7ff fdf1 	bl	8001c30 <pwm_setSpeed>
		} else {
			servo->velocitySetpoint = pid_getOutput(&servo->pid_position);
		}
		break;
 800204e:	e014      	b.n	800207a <servo_positionLoop+0x92>
			servo->velocitySetpoint = pid_getOutput(&servo->pid_position);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3328      	adds	r3, #40	; 0x28
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fde0 	bl	8001c1a <pid_getOutput>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		break;
 8002062:	e00a      	b.n	800207a <servo_positionLoop+0x92>
	}
	default: {
		pid_reset(&servo->pid_position);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3328      	adds	r3, #40	; 0x28
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fdb9 	bl	8001be0 <pid_reset>
		servo->positionSetpoint = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		break;
 8002078:	bf00      	nop
	}
	}
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bdb0      	pop	{r4, r5, r7, pc}

08002082 <servo_velocityLoop>:
 to current loop (if system is Triple-loop) or used as pwm duty cycle (Double-loop).

 Must be called with specified period for velocity controller.
 If controller is single-loop, should not be used.
 */
void servo_velocityLoop(servocontrol_t *servo) {
 8002082:	b5b0      	push	{r4, r5, r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	encoder_updateVelocity(&servo->encoder);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f8c3 	bl	8001218 <encoder_updateVelocity>
	if (servo->currentMode != Current) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002098:	2b03      	cmp	r3, #3
 800209a:	d00f      	beq.n	80020bc <servo_velocityLoop+0x3a>
		pid_calculate(&servo->pid_velocity, servo->velocitySetpoint,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f8f1 	bl	8001292 <encoder_getVelocity>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	4629      	mov	r1, r5
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7ff fccf 	bl	8001a5a <pid_calculate>
				encoder_getVelocity(&servo->encoder));
	}
	switch (servo->controllerLoops) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d023      	beq.n	800210e <servo_velocityLoop+0x8c>
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	dc3b      	bgt.n	8002142 <servo_velocityLoop+0xc0>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <servo_velocityLoop+0x52>
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d00b      	beq.n	80020ea <servo_velocityLoop+0x68>
			pid_reset(&servo->pid_velocity);
			servo->velocitySetpoint = 0;
		}
		break;
	}
}
 80020d2:	e036      	b.n	8002142 <servo_velocityLoop+0xc0>
		pid_reset(&servo->pid_velocity);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3364      	adds	r3, #100	; 0x64
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fd81 	bl	8001be0 <pid_reset>
		servo->velocitySetpoint = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		break;
 80020e8:	e02b      	b.n	8002142 <servo_velocityLoop+0xc0>
		pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_velocity));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3364      	adds	r3, #100	; 0x64
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fd90 	bl	8001c1a <pid_getOutput>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe ff19 	bl	8000f34 <__aeabi_f2iz>
 8002102:	4603      	mov	r3, r0
 8002104:	4619      	mov	r1, r3
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff fd92 	bl	8001c30 <pwm_setSpeed>
		break;
 800210c:	e019      	b.n	8002142 <servo_velocityLoop+0xc0>
		if (servo->currentMode != Current) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002114:	2b03      	cmp	r3, #3
 8002116:	d009      	beq.n	800212c <servo_velocityLoop+0xaa>
			servo->currentSetpoint = pid_getOutput(&servo->pid_velocity);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3364      	adds	r3, #100	; 0x64
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fd7c 	bl	8001c1a <pid_getOutput>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		break;
 800212a:	e009      	b.n	8002140 <servo_velocityLoop+0xbe>
			pid_reset(&servo->pid_velocity);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3364      	adds	r3, #100	; 0x64
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fd55 	bl	8001be0 <pid_reset>
			servo->velocitySetpoint = 0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		break;
 8002140:	bf00      	nop
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bdb0      	pop	{r4, r5, r7, pc}

0800214a <servo_currentLoop>:
 Must be called with specified period for current controller.

 External current feedback must be passed.
 If controller is single/double-loop, should not be used.
 */
void servo_currentLoop(servocontrol_t *servo, float currentFeedback) {
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	if (servo->controllerLoops == Triple) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800215a:	2b02      	cmp	r3, #2
 800215c:	d11b      	bne.n	8002196 <servo_currentLoop+0x4c>
		pid_calculate(&servo->pid_current, servo->currentSetpoint,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f7ff fc74 	bl	8001a5a <pid_calculate>
				currentFeedback);
		pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_current));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	33a0      	adds	r3, #160	; 0xa0
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fd4c 	bl	8001c1a <pid_getOutput>
 8002182:	4603      	mov	r3, r0
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fed5 	bl	8000f34 <__aeabi_f2iz>
 800218a:	4603      	mov	r3, r0
 800218c:	4619      	mov	r1, r3
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff fd4e 	bl	8001c30 <pwm_setSpeed>
	} else {
		pid_reset(&servo->pid_current);
		servo->currentSetpoint = 0;
	}
}
 8002194:	e009      	b.n	80021aa <servo_currentLoop+0x60>
		pid_reset(&servo->pid_current);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	33a0      	adds	r3, #160	; 0xa0
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fd20 	bl	8001be0 <pid_reset>
		servo->currentSetpoint = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}

080021b2 <servo_controlPosition>:

void servo_controlPosition(servocontrol_t *servo, float setpoint) {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
	servo->currentMode = Position;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	servo->positionSetpoint = setpoint * servo->reverseFlag;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fc98 	bl	8000b00 <__aeabi_i2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fce7 	bl	8000ba8 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <servo_controlVelocity>:

void servo_controlVelocity(servocontrol_t *servo, float setpoint) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	if (servo->controllerLoops != Single) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d04c      	beq.n	800229a <servo_controlVelocity+0xae>
		servo->currentMode = Velocity;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		servo->velocitySetpoint = constrain(setpoint * servo->reverseFlag,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fc76 	bl	8000b00 <__aeabi_i2f>
 8002214:	4603      	mov	r3, r0
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fcc5 	bl	8000ba8 <__aeabi_fmul>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7fe fe58 	bl	8000ee4 <__aeabi_fcmplt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <servo_controlVelocity+0x5a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002244:	e026      	b.n	8002294 <servo_controlVelocity+0xa8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fc57 	bl	8000b00 <__aeabi_i2f>
 8002252:	4603      	mov	r3, r0
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fca6 	bl	8000ba8 <__aeabi_fmul>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7fe fe59 	bl	8000f20 <__aeabi_fcmpgt>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <servo_controlVelocity+0x90>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800227a:	e00b      	b.n	8002294 <servo_controlVelocity+0xa8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fc3c 	bl	8000b00 <__aeabi_i2f>
 8002288:	4603      	mov	r3, r0
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fc8b 	bl	8000ba8 <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
				-servo->maxShaftSpeed, servo->maxShaftSpeed);
	}
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <servo_controlCurrent>:

void servo_controlCurrent(servocontrol_t *servo, float setpoint) {
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
	if (servo->controllerLoops == Triple) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d14c      	bne.n	8002350 <servo_controlCurrent+0xae>
		servo->currentMode = Current;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		servo->currentSetpoint = constrain(setpoint * servo->reverseFlag,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fc1b 	bl	8000b00 <__aeabi_i2f>
 80022ca:	4603      	mov	r3, r0
 80022cc:	6839      	ldr	r1, [r7, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fc6a 	bl	8000ba8 <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80022de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7fe fdfd 	bl	8000ee4 <__aeabi_fcmplt>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <servo_controlCurrent+0x5a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80022f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022fa:	e026      	b.n	800234a <servo_controlCurrent+0xa8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fbfc 	bl	8000b00 <__aeabi_i2f>
 8002308:	4603      	mov	r3, r0
 800230a:	6839      	ldr	r1, [r7, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fc4b 	bl	8000ba8 <__aeabi_fmul>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f7fe fdfe 	bl	8000f20 <__aeabi_fcmpgt>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <servo_controlCurrent+0x90>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002330:	e00b      	b.n	800234a <servo_controlCurrent+0xa8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f993 3100 	ldrsb.w	r3, [r3, #256]	; 0x100
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fbe1 	bl	8000b00 <__aeabi_i2f>
 800233e:	4603      	mov	r3, r0
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fc30 	bl	8000ba8 <__aeabi_fmul>
 8002348:	4603      	mov	r3, r0
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
				-servo->maxCurrent, servo->maxCurrent);
	}
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <MX_SPI2_Init+0x5c>)
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <MX_SPI2_Init+0x60>)
 8002360:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_SPI2_Init+0x5c>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_SPI2_Init+0x5c>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_SPI2_Init+0x5c>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_SPI2_Init+0x5c>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_SPI2_Init+0x5c>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_SPI2_Init+0x5c>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <MX_SPI2_Init+0x5c>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_SPI2_Init+0x5c>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <MX_SPI2_Init+0x5c>)
 8002394:	2200      	movs	r2, #0
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_SPI2_Init+0x5c>)
 800239a:	220a      	movs	r2, #10
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_SPI2_Init+0x5c>)
 80023a0:	f002 fab4 	bl	800490c <HAL_SPI_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 80023aa:	f7ff fb51 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000340 	.word	0x20000340
 80023b8:	40003800 	.word	0x40003800

080023bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_SPI_MspInit+0x8c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d131      	bne.n	8002440 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_SPI_MspInit+0x90>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	; (800244c <HAL_SPI_MspInit+0x90>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_SPI_MspInit+0x90>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_SPI_MspInit+0x90>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_SPI_MspInit+0x90>)
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_SPI_MspInit+0x90>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800240c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4619      	mov	r1, r3
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <HAL_SPI_MspInit+0x94>)
 8002422:	f001 fb6f 	bl	8003b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800242a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	4619      	mov	r1, r3
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_SPI_MspInit+0x94>)
 800243c:	f001 fb62 	bl	8003b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40003800 	.word	0x40003800
 800244c:	40021000 	.word	0x40021000
 8002450:	40010c00 	.word	0x40010c00

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_MspInit+0x5c>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_MspInit+0x5c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_MspInit+0x5c>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_MspInit+0x5c>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <HAL_MspInit+0x5c>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_MspInit+0x5c>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_MspInit+0x60>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_MspInit+0x60>)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000

080024b8 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80024fe:	f000 fb79 	bl	8002bf4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <DMA1_Channel1_IRQHandler+0x10>)
 800250e:	f001 f9c5 	bl	800389c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200000ac 	.word	0x200000ac

0800251c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	freq3khz++;
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <TIM3_IRQHandler+0xdc>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <TIM3_IRQHandler+0xdc>)
 800252a:	801a      	strh	r2, [r3, #0]
	freq500hz++;
 800252c:	4b33      	ldr	r3, [pc, #204]	; (80025fc <TIM3_IRQHandler+0xe0>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <TIM3_IRQHandler+0xe0>)
 8002536:	801a      	strh	r2, [r3, #0]
	freq50hz++;
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <TIM3_IRQHandler+0xe4>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <TIM3_IRQHandler+0xe4>)
 8002542:	801a      	strh	r2, [r3, #0]
//	} else {
//		servo_controlVelocity(&servo1, setSpeed);
//		servo_controlVelocity(&servo2, setSpeed);
//	}

	switch (mode) {
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <TIM3_IRQHandler+0xe8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d026      	beq.n	800259a <TIM3_IRQHandler+0x7e>
 800254c:	2b02      	cmp	r3, #2
 800254e:	dc34      	bgt.n	80025ba <TIM3_IRQHandler+0x9e>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <TIM3_IRQHandler+0x3e>
 8002554:	2b01      	cmp	r3, #1
 8002556:	d010      	beq.n	800257a <TIM3_IRQHandler+0x5e>
 8002558:	e02f      	b.n	80025ba <TIM3_IRQHandler+0x9e>
	case Pos:
		debugMode = 0;
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <TIM3_IRQHandler+0xec>)
 800255c:	2200      	movs	r2, #0
 800255e:	801a      	strh	r2, [r3, #0]
		servo_controlPosition(&servo1, setAngle);
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <TIM3_IRQHandler+0xf0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	482a      	ldr	r0, [pc, #168]	; (8002610 <TIM3_IRQHandler+0xf4>)
 8002568:	f7ff fe23 	bl	80021b2 <servo_controlPosition>
		servo_controlPosition(&servo2, setAngle);
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <TIM3_IRQHandler+0xf0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4828      	ldr	r0, [pc, #160]	; (8002614 <TIM3_IRQHandler+0xf8>)
 8002574:	f7ff fe1d 	bl	80021b2 <servo_controlPosition>
		break;
 8002578:	e01f      	b.n	80025ba <TIM3_IRQHandler+0x9e>
	case Vel:
		debugMode = 1;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <TIM3_IRQHandler+0xec>)
 800257c:	2201      	movs	r2, #1
 800257e:	801a      	strh	r2, [r3, #0]
		servo_controlVelocity(&servo1, setSpeed);
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <TIM3_IRQHandler+0xfc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	4822      	ldr	r0, [pc, #136]	; (8002610 <TIM3_IRQHandler+0xf4>)
 8002588:	f7ff fe30 	bl	80021ec <servo_controlVelocity>
		servo_controlVelocity(&servo2, setSpeed);
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <TIM3_IRQHandler+0xfc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	4820      	ldr	r0, [pc, #128]	; (8002614 <TIM3_IRQHandler+0xf8>)
 8002594:	f7ff fe2a 	bl	80021ec <servo_controlVelocity>
		break;
 8002598:	e00f      	b.n	80025ba <TIM3_IRQHandler+0x9e>
	case Cur:
		debugMode = 2;
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <TIM3_IRQHandler+0xec>)
 800259c:	2202      	movs	r2, #2
 800259e:	801a      	strh	r2, [r3, #0]
		servo_controlCurrent(&servo1, setCurrent);
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <TIM3_IRQHandler+0x100>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	481a      	ldr	r0, [pc, #104]	; (8002610 <TIM3_IRQHandler+0xf4>)
 80025a8:	f7ff fe7b 	bl	80022a2 <servo_controlCurrent>
		servo_controlCurrent(&servo2, setCurrent);
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <TIM3_IRQHandler+0x100>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4818      	ldr	r0, [pc, #96]	; (8002614 <TIM3_IRQHandler+0xf8>)
 80025b4:	f7ff fe75 	bl	80022a2 <servo_controlCurrent>
		break;
 80025b8:	bf00      	nop
	}

	if (freq500hz >= 36) {
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <TIM3_IRQHandler+0xe0>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	2b23      	cmp	r3, #35	; 0x23
 80025c0:	d908      	bls.n	80025d4 <TIM3_IRQHandler+0xb8>
		servo_positionLoop(&servo1);
 80025c2:	4813      	ldr	r0, [pc, #76]	; (8002610 <TIM3_IRQHandler+0xf4>)
 80025c4:	f7ff fd10 	bl	8001fe8 <servo_positionLoop>
		// servo_positionLoop(&servo2);
		servo_velocityLoop(&servo1);
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <TIM3_IRQHandler+0xf4>)
 80025ca:	f7ff fd5a 	bl	8002082 <servo_velocityLoop>
		// servo_velocityLoop(&servo2);
		freq500hz = 0;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <TIM3_IRQHandler+0xe0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	801a      	strh	r2, [r3, #0]
	}
	if (freq3khz >= 6) {
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <TIM3_IRQHandler+0xdc>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d908      	bls.n	80025ee <TIM3_IRQHandler+0xd2>
		servo_currentLoop(&servo1, current);
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <TIM3_IRQHandler+0x104>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	480b      	ldr	r0, [pc, #44]	; (8002610 <TIM3_IRQHandler+0xf4>)
 80025e4:	f7ff fdb1 	bl	800214a <servo_currentLoop>
		freq3khz = 0;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <TIM3_IRQHandler+0xdc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	801a      	strh	r2, [r3, #0]
	}
//	pwm_setSpeed(&servo1.driver, setpwm);
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <TIM3_IRQHandler+0x108>)
 80025f0:	f002 fcd4 	bl	8004f9c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000398 	.word	0x20000398
 80025fc:	2000039a 	.word	0x2000039a
 8002600:	2000039c 	.word	0x2000039c
 8002604:	20000000 	.word	0x20000000
 8002608:	200003ac 	.word	0x200003ac
 800260c:	200003a0 	.word	0x200003a0
 8002610:	200000f0 	.word	0x200000f0
 8002614:	2000020c 	.word	0x2000020c
 8002618:	200003a4 	.word	0x200003a4
 800261c:	200003a8 	.word	0x200003a8
 8002620:	200003b0 	.word	0x200003b0
 8002624:	20000448 	.word	0x20000448

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f003 fb46 	bl	8005ce8 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20005000 	.word	0x20005000
 8002688:	00000400 	.word	0x00000400
 800268c:	200003b4 	.word	0x200003b4
 8002690:	20000628 	.word	0x20000628

08002694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	; 0x30
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fb02 	bl	8005cb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026be:	4a23      	ldr	r2, [pc, #140]	; (800274c <MX_TIM1_Init+0xac>)
 80026c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_TIM1_Init+0xa8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026e8:	2303      	movs	r3, #3
 80026ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026f0:	2301      	movs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80026f8:	230f      	movs	r3, #15
 80026fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002700:	2301      	movs	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002708:	230f      	movs	r3, #15
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	4619      	mov	r1, r3
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <MX_TIM1_Init+0xa8>)
 8002714:	f002 fb12 	bl	8004d3c <HAL_TIM_Encoder_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800271e:	f7ff f997 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <MX_TIM1_Init+0xa8>)
 8002730:	f003 f996 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800273a:	f7ff f989 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3730      	adds	r7, #48	; 0x30
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200003b8 	.word	0x200003b8
 800274c:	40012c00 	.word	0x40012c00

08002750 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f003 faaa 	bl	8005cb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <MX_TIM2_Init+0xa4>)
 800276e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <MX_TIM2_Init+0xa4>)
 8002776:	2200      	movs	r2, #0
 8002778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MX_TIM2_Init+0xa4>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <MX_TIM2_Init+0xa4>)
 8002782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_TIM2_Init+0xa4>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <MX_TIM2_Init+0xa4>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002794:	2303      	movs	r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800279c:	2301      	movs	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	4619      	mov	r1, r3
 80027be:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_TIM2_Init+0xa4>)
 80027c0:	f002 fabc 	bl	8004d3c <HAL_TIM_Encoder_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80027ca:	f7ff f941 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4806      	ldr	r0, [pc, #24]	; (80027f4 <MX_TIM2_Init+0xa4>)
 80027dc:	f003 f940 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80027e6:	f7ff f933 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	3730      	adds	r7, #48	; 0x30
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000400 	.word	0x20000400

080027f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fe:	f107 0320 	add.w	r3, r7, #32
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <MX_TIM3_Init+0xc0>)
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <MX_TIM3_Init+0xc4>)
 800281e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <MX_TIM3_Init+0xc0>)
 8002822:	2203      	movs	r2, #3
 8002824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <MX_TIM3_Init+0xc0>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <MX_TIM3_Init+0xc0>)
 800282e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <MX_TIM3_Init+0xc0>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <MX_TIM3_Init+0xc0>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002840:	481d      	ldr	r0, [pc, #116]	; (80028b8 <MX_TIM3_Init+0xc0>)
 8002842:	f002 f989 	bl	8004b58 <HAL_TIM_PWM_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800284c:	f7ff f900 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002850:	2320      	movs	r3, #32
 8002852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	4619      	mov	r1, r3
 800285e:	4816      	ldr	r0, [pc, #88]	; (80028b8 <MX_TIM3_Init+0xc0>)
 8002860:	f003 f8fe 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800286a:	f7ff f8f1 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800286e:	2360      	movs	r3, #96	; 0x60
 8002870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <MX_TIM3_Init+0xc0>)
 8002886:	f002 fc91 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002890:	f7ff f8de 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2204      	movs	r2, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <MX_TIM3_Init+0xc0>)
 800289c:	f002 fc86 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80028a6:	f7ff f8d3 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <MX_TIM3_Init+0xc0>)
 80028ac:	f000 f904 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000448 	.word	0x20000448
 80028bc:	40000400 	.word	0x40000400

080028c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d4:	463b      	mov	r3, r7
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <MX_TIM4_Init+0x94>)
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <MX_TIM4_Init+0x98>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12-1;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <MX_TIM4_Init+0x94>)
 80028e4:	220b      	movs	r2, #11
 80028e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <MX_TIM4_Init+0x94>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <MX_TIM4_Init+0x94>)
 80028f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <MX_TIM4_Init+0x94>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <MX_TIM4_Init+0x94>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002902:	4814      	ldr	r0, [pc, #80]	; (8002954 <MX_TIM4_Init+0x94>)
 8002904:	f002 f886 	bl	8004a14 <HAL_TIM_Base_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800290e:	f7ff f89f 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	4619      	mov	r1, r3
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <MX_TIM4_Init+0x94>)
 8002920:	f002 fd06 	bl	8005330 <HAL_TIM_ConfigClockSource>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800292a:	f7ff f891 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800292e:	2320      	movs	r3, #32
 8002930:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002936:	463b      	mov	r3, r7
 8002938:	4619      	mov	r1, r3
 800293a:	4806      	ldr	r0, [pc, #24]	; (8002954 <MX_TIM4_Init+0x94>)
 800293c:	f003 f890 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002946:	f7ff f883 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000490 	.word	0x20000490
 8002958:	40000800 	.word	0x40000800

0800295c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d125      	bne.n	80029c8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002982:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	4619      	mov	r1, r3
 80029c0:	481a      	ldr	r0, [pc, #104]	; (8002a2c <HAL_TIM_Encoder_MspInit+0xd0>)
 80029c2:	f001 f89f 	bl	8003b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029c6:	e028      	b.n	8002a1a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d123      	bne.n	8002a1a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	61d3      	str	r3, [r2, #28]
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6193      	str	r3, [r2, #24]
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a02:	2303      	movs	r3, #3
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0318 	add.w	r3, r7, #24
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <HAL_TIM_Encoder_MspInit+0xd0>)
 8002a16:	f001 f875 	bl	8003b04 <HAL_GPIO_Init>
}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010800 	.word	0x40010800

08002a30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_TIM_PWM_MspInit+0x44>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d113      	bne.n	8002a6a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_TIM_PWM_MspInit+0x48>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_TIM_PWM_MspInit+0x48>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_TIM_PWM_MspInit+0x48>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	201d      	movs	r0, #29
 8002a60:	f000 fe2b 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a64:	201d      	movs	r0, #29
 8002a66:	f000 fe44 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40021000 	.word	0x40021000

08002a7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_TIM_Base_MspInit+0x34>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_TIM_Base_MspInit+0x38>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_TIM_Base_MspInit+0x38>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	61d3      	str	r3, [r2, #28]
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_TIM_Base_MspInit+0x38>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_TIM_MspPostInit+0x58>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d117      	bne.n	8002b08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_TIM_MspPostInit+0x5c>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_TIM_MspPostInit+0x5c>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_TIM_MspPostInit+0x5c>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002af0:	23c0      	movs	r3, #192	; 0xc0
 8002af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <HAL_TIM_MspPostInit+0x60>)
 8002b04:	f000 fffe 	bl	8003b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010800 	.word	0x40010800

08002b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b1e:	490d      	ldr	r1, [pc, #52]	; (8002b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b24:	e002      	b.n	8002b2c <LoopCopyDataInit>

08002b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2a:	3304      	adds	r3, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b30:	d3f9      	bcc.n	8002b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b34:	4c0a      	ldr	r4, [pc, #40]	; (8002b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b38:	e001      	b.n	8002b3e <LoopFillZerobss>

08002b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3c:	3204      	adds	r2, #4

08002b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b40:	d3fb      	bcc.n	8002b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b42:	f7ff fda7 	bl	8002694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b46:	f003 f8d5 	bl	8005cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b4a:	f7fe fd55 	bl	80015f8 <main>
  bx lr
 8002b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002b58:	08005e30 	.word	0x08005e30
  ldr r2, =_sbss
 8002b5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002b60:	20000624 	.word	0x20000624

08002b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_Init+0x28>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_Init+0x28>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 fd93 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7e:	200f      	movs	r0, #15
 8002b80:	f000 f808 	bl	8002b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b84:	f7ff fc66 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_InitTick+0x54>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x58>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fdab 	bl	800370e <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d80a      	bhi.n	8002bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f000 fd73 	bl	80036ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <HAL_InitTick+0x5c>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000004 	.word	0x20000004
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_IncTick+0x1c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_IncTick+0x20>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_IncTick+0x20>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	2000000c 	.word	0x2000000c
 8002c14:	200004d8 	.word	0x200004d8

08002c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_GetTick+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	200004d8 	.word	0x200004d8

08002c2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0be      	b.n	8002dcc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe f9d6 	bl	800101c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 faf5 	bl	8003260 <ADC_ConversionStop_Disable>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 8099 	bne.w	8002dba <HAL_ADC_Init+0x18e>
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 8095 	bne.w	8002dba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c98:	f023 0302 	bic.w	r3, r3, #2
 8002c9c:	f043 0202 	orr.w	r2, r3, #2
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7b1b      	ldrb	r3, [r3, #12]
 8002cb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc4:	d003      	beq.n	8002cce <HAL_ADC_Init+0xa2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_Init+0xa8>
 8002cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd2:	e000      	b.n	8002cd6 <HAL_ADC_Init+0xaa>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7d1b      	ldrb	r3, [r3, #20]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d119      	bne.n	8002d18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7b1b      	ldrb	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	035a      	lsls	r2, r3, #13
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e00b      	b.n	8002d18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_ADC_Init+0x1a8>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d48:	d003      	beq.n	8002d52 <HAL_ADC_Init+0x126>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d104      	bne.n	8002d5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_ADC_Init+0x1ac>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10b      	bne.n	8002d98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d96:	e018      	b.n	8002dca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f023 0312 	bic.w	r3, r3, #18
 8002da0:	f043 0210 	orr.w	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002db8:	e007      	b.n	8002dca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffe1f7fd 	.word	0xffe1f7fd
 8002dd8:	ff1f0efe 	.word	0xff1f0efe

08002ddc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a64      	ldr	r2, [pc, #400]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_Start_DMA+0x24>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_ADC_Start_DMA+0x1ac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d106      	bne.n	8002e0e <HAL_ADC_Start_DMA+0x32>
 8002e00:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 80b3 	bne.w	8002f74 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_Start_DMA+0x40>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0ae      	b.n	8002f7a <HAL_ADC_Start_DMA+0x19e>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f9c1 	bl	80031ac <ADC_Enable>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 809a 	bne.w	8002f6a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4e      	ldr	r2, [pc, #312]	; (8002f88 <HAL_ADC_Start_DMA+0x1ac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_Start_DMA+0x84>
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d026      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e8a:	e01d      	b.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_Start_DMA+0xd0>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <HAL_ADC_Start_DMA+0x1ac>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f023 0206 	bic.w	r2, r3, #6
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee0:	e002      	b.n	8002ee8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <HAL_ADC_Start_DMA+0x1b0>)
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_ADC_Start_DMA+0x1b4>)
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_ADC_Start_DMA+0x1b8>)
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0202 	mvn.w	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a18      	ldr	r0, [r3, #32]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	334c      	adds	r3, #76	; 0x4c
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f000 fc53 	bl	80037dc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f44:	d108      	bne.n	8002f58 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f54:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f56:	e00f      	b.n	8002f78 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f66:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f68:	e006      	b.n	8002f78 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002f72:	e001      	b.n	8002f78 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40012400 	.word	0x40012400
 8002f88:	40012800 	.word	0x40012800
 8002f8c:	080032e3 	.word	0x080032e3
 8002f90:	0800335f 	.word	0x0800335f
 8002f94:	0800337b 	.word	0x0800337b

08002f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0dc      	b.n	8003196 <HAL_ADC_ConfigChannel+0x1da>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d81c      	bhi.n	8003026 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b05      	subs	r3, #5
 8002ffe:	221f      	movs	r2, #31
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	4019      	ands	r1, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b05      	subs	r3, #5
 8003018:	fa00 f203 	lsl.w	r2, r0, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	; 0x34
 8003024:	e03c      	b.n	80030a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d81c      	bhi.n	8003068 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b23      	subs	r3, #35	; 0x23
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	4019      	ands	r1, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b23      	subs	r3, #35	; 0x23
 800305a:	fa00 f203 	lsl.w	r2, r0, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
 8003066:	e01b      	b.n	80030a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	; 0x41
 800307a:	221f      	movs	r2, #31
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	4019      	ands	r1, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b41      	subs	r3, #65	; 0x41
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d91c      	bls.n	80030e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68d9      	ldr	r1, [r3, #12]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	3b1e      	subs	r3, #30
 80030ba:	2207      	movs	r2, #7
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4019      	ands	r1, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6898      	ldr	r0, [r3, #8]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	3b1e      	subs	r3, #30
 80030d4:	fa00 f203 	lsl.w	r2, r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	e019      	b.n	8003116 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6919      	ldr	r1, [r3, #16]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	2207      	movs	r2, #7
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	4019      	ands	r1, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6898      	ldr	r0, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d003      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003122:	2b11      	cmp	r3, #17
 8003124:	d132      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d125      	bne.n	800317c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d126      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800314c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b10      	cmp	r3, #16
 8003154:	d11a      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	0c9a      	lsrs	r2, r3, #18
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800316c:	e002      	b.n	8003174 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3b01      	subs	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f9      	bne.n	800316e <HAL_ADC_ConfigChannel+0x1b2>
 800317a:	e007      	b.n	800318c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012400 	.word	0x40012400
 80031a4:	20000004 	.word	0x20000004
 80031a8:	431bde83 	.word	0x431bde83

080031ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d040      	beq.n	800324c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031da:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <ADC_Enable+0xac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <ADC_Enable+0xb0>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031e8:	e002      	b.n	80031f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f9      	bne.n	80031ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031f6:	f7ff fd0f 	bl	8002c18 <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031fc:	e01f      	b.n	800323e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031fe:	f7ff fd0b 	bl	8002c18 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d918      	bls.n	800323e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d011      	beq.n	800323e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d1d8      	bne.n	80031fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000004 	.word	0x20000004
 800325c:	431bde83 	.word	0x431bde83

08003260 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d12e      	bne.n	80032d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328a:	f7ff fcc5 	bl	8002c18 <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003290:	e01b      	b.n	80032ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003292:	f7ff fcc1 	bl	8002c18 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d914      	bls.n	80032ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10d      	bne.n	80032ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e007      	b.n	80032da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d0dc      	beq.n	8003292 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d127      	bne.n	800334c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003312:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003316:	d115      	bne.n	8003344 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800331c:	2b00      	cmp	r3, #0
 800331e:	d111      	bne.n	8003344 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7fe fa93 	bl	8001870 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800334a:	e004      	b.n	8003356 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7ff fe13 	bl	8002f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff fe02 	bl	8002faa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_ADCEx_Calibration_Start+0x1e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e097      	b.n	80034fe <HAL_ADCEx_Calibration_Start+0x14e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff42 	bl	8003260 <ADC_ConversionStop_Disable>
 80033dc:	4603      	mov	r3, r0
 80033de:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fee3 	bl	80031ac <ADC_Enable>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 8081 	bne.w	80034f4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033fa:	f023 0302 	bic.w	r3, r3, #2
 80033fe:	f043 0202 	orr.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003406:	4b40      	ldr	r3, [pc, #256]	; (8003508 <HAL_ADCEx_Calibration_Start+0x158>)
 8003408:	681c      	ldr	r4, [r3, #0]
 800340a:	2002      	movs	r0, #2
 800340c:	f001 f9c8 	bl	80047a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003410:	4603      	mov	r3, r0
 8003412:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003416:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003418:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800341a:	e002      	b.n	8003422 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3b01      	subs	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0208 	orr.w	r2, r2, #8
 8003436:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003438:	f7ff fbee 	bl	8002c18 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800343e:	e01b      	b.n	8003478 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003440:	f7ff fbea 	bl	8002c18 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b0a      	cmp	r3, #10
 800344c:	d914      	bls.n	8003478 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f023 0312 	bic.w	r3, r3, #18
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e042      	b.n	80034fe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1dc      	bne.n	8003440 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0204 	orr.w	r2, r2, #4
 8003494:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003496:	f7ff fbbf 	bl	8002c18 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800349c:	e01b      	b.n	80034d6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800349e:	f7ff fbbb 	bl	8002c18 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b0a      	cmp	r3, #10
 80034aa:	d914      	bls.n	80034d6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f023 0312 	bic.w	r3, r3, #18
 80034c2:	f043 0210 	orr.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e013      	b.n	80034fe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1dc      	bne.n	800349e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f023 0303 	bic.w	r3, r3, #3
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	20000004 	.word	0x20000004

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4906      	ldr	r1, [pc, #24]	; (80035a4 <__NVIC_EnableIRQ+0x34>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff90 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff2d 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff42 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff90 	bl	80035fc <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5f 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff35 	bl	8003570 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e043      	b.n	80037c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_DMA_Init+0xa8>)
 8003746:	4413      	add	r3, r2
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_DMA_Init+0xac>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_DMA_Init+0xb0>)
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003772:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003776:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	bffdfff8 	.word	0xbffdfff8
 80037d4:	cccccccd 	.word	0xcccccccd
 80037d8:	40020000 	.word	0x40020000

080037dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x20>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e04b      	b.n	8003894 <HAL_DMA_Start_IT+0xb8>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d13a      	bne.n	8003886 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f937 	bl	8003aa8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 020e 	orr.w	r2, r2, #14
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0204 	bic.w	r2, r2, #4
 8003862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 020a 	orr.w	r2, r2, #10
 8003872:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e005      	b.n	8003892 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800388e:	2302      	movs	r3, #2
 8003890:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2204      	movs	r2, #4
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d04f      	beq.n	8003964 <HAL_DMA_IRQHandler+0xc8>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04a      	beq.n	8003964 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a66      	ldr	r2, [pc, #408]	; (8003a8c <HAL_DMA_IRQHandler+0x1f0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d029      	beq.n	800394a <HAL_DMA_IRQHandler+0xae>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <HAL_DMA_IRQHandler+0x1f4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_DMA_IRQHandler+0xaa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a63      	ldr	r2, [pc, #396]	; (8003a94 <HAL_DMA_IRQHandler+0x1f8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01a      	beq.n	8003940 <HAL_DMA_IRQHandler+0xa4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a62      	ldr	r2, [pc, #392]	; (8003a98 <HAL_DMA_IRQHandler+0x1fc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d012      	beq.n	800393a <HAL_DMA_IRQHandler+0x9e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a60      	ldr	r2, [pc, #384]	; (8003a9c <HAL_DMA_IRQHandler+0x200>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x98>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5f      	ldr	r2, [pc, #380]	; (8003aa0 <HAL_DMA_IRQHandler+0x204>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d102      	bne.n	800392e <HAL_DMA_IRQHandler+0x92>
 8003928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800392c:	e00e      	b.n	800394c <HAL_DMA_IRQHandler+0xb0>
 800392e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003932:	e00b      	b.n	800394c <HAL_DMA_IRQHandler+0xb0>
 8003934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003938:	e008      	b.n	800394c <HAL_DMA_IRQHandler+0xb0>
 800393a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800393e:	e005      	b.n	800394c <HAL_DMA_IRQHandler+0xb0>
 8003940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003944:	e002      	b.n	800394c <HAL_DMA_IRQHandler+0xb0>
 8003946:	2340      	movs	r3, #64	; 0x40
 8003948:	e000      	b.n	800394c <HAL_DMA_IRQHandler+0xb0>
 800394a:	2304      	movs	r3, #4
 800394c:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <HAL_DMA_IRQHandler+0x208>)
 800394e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8094 	beq.w	8003a82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003962:	e08e      	b.n	8003a82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2202      	movs	r2, #2
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d056      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x186>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d051      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020a 	bic.w	r2, r2, #10
 800399a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <HAL_DMA_IRQHandler+0x1f0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d029      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x166>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a37      	ldr	r2, [pc, #220]	; (8003a90 <HAL_DMA_IRQHandler+0x1f4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_DMA_IRQHandler+0x162>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <HAL_DMA_IRQHandler+0x1f8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01a      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x15c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a34      	ldr	r2, [pc, #208]	; (8003a98 <HAL_DMA_IRQHandler+0x1fc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d012      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x156>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <HAL_DMA_IRQHandler+0x200>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00a      	beq.n	80039ec <HAL_DMA_IRQHandler+0x150>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <HAL_DMA_IRQHandler+0x204>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d102      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x14a>
 80039e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039e4:	e00e      	b.n	8003a04 <HAL_DMA_IRQHandler+0x168>
 80039e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ea:	e00b      	b.n	8003a04 <HAL_DMA_IRQHandler+0x168>
 80039ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f0:	e008      	b.n	8003a04 <HAL_DMA_IRQHandler+0x168>
 80039f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f6:	e005      	b.n	8003a04 <HAL_DMA_IRQHandler+0x168>
 80039f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fc:	e002      	b.n	8003a04 <HAL_DMA_IRQHandler+0x168>
 80039fe:	2320      	movs	r3, #32
 8003a00:	e000      	b.n	8003a04 <HAL_DMA_IRQHandler+0x168>
 8003a02:	2302      	movs	r3, #2
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <HAL_DMA_IRQHandler+0x208>)
 8003a06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d034      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a20:	e02f      	b.n	8003a82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2208      	movs	r2, #8
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d028      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x1e8>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d023      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 020e 	bic.w	r2, r2, #14
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	2101      	movs	r1, #1
 8003a56:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
    }
  }
  return;
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
}
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40020008 	.word	0x40020008
 8003a90:	4002001c 	.word	0x4002001c
 8003a94:	40020030 	.word	0x40020030
 8003a98:	40020044 	.word	0x40020044
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	4002006c 	.word	0x4002006c
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	2101      	movs	r1, #1
 8003ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d108      	bne.n	8003ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ae6:	e007      	b.n	8003af8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	60da      	str	r2, [r3, #12]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b08b      	sub	sp, #44	; 0x2c
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b16:	e169      	b.n	8003dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f040 8158 	bne.w	8003de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a9a      	ldr	r2, [pc, #616]	; (8003da4 <HAL_GPIO_Init+0x2a0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d05e      	beq.n	8003bfe <HAL_GPIO_Init+0xfa>
 8003b40:	4a98      	ldr	r2, [pc, #608]	; (8003da4 <HAL_GPIO_Init+0x2a0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d875      	bhi.n	8003c32 <HAL_GPIO_Init+0x12e>
 8003b46:	4a98      	ldr	r2, [pc, #608]	; (8003da8 <HAL_GPIO_Init+0x2a4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d058      	beq.n	8003bfe <HAL_GPIO_Init+0xfa>
 8003b4c:	4a96      	ldr	r2, [pc, #600]	; (8003da8 <HAL_GPIO_Init+0x2a4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d86f      	bhi.n	8003c32 <HAL_GPIO_Init+0x12e>
 8003b52:	4a96      	ldr	r2, [pc, #600]	; (8003dac <HAL_GPIO_Init+0x2a8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d052      	beq.n	8003bfe <HAL_GPIO_Init+0xfa>
 8003b58:	4a94      	ldr	r2, [pc, #592]	; (8003dac <HAL_GPIO_Init+0x2a8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d869      	bhi.n	8003c32 <HAL_GPIO_Init+0x12e>
 8003b5e:	4a94      	ldr	r2, [pc, #592]	; (8003db0 <HAL_GPIO_Init+0x2ac>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04c      	beq.n	8003bfe <HAL_GPIO_Init+0xfa>
 8003b64:	4a92      	ldr	r2, [pc, #584]	; (8003db0 <HAL_GPIO_Init+0x2ac>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d863      	bhi.n	8003c32 <HAL_GPIO_Init+0x12e>
 8003b6a:	4a92      	ldr	r2, [pc, #584]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d046      	beq.n	8003bfe <HAL_GPIO_Init+0xfa>
 8003b70:	4a90      	ldr	r2, [pc, #576]	; (8003db4 <HAL_GPIO_Init+0x2b0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d85d      	bhi.n	8003c32 <HAL_GPIO_Init+0x12e>
 8003b76:	2b12      	cmp	r3, #18
 8003b78:	d82a      	bhi.n	8003bd0 <HAL_GPIO_Init+0xcc>
 8003b7a:	2b12      	cmp	r3, #18
 8003b7c:	d859      	bhi.n	8003c32 <HAL_GPIO_Init+0x12e>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <HAL_GPIO_Init+0x80>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003bff 	.word	0x08003bff
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003beb 	.word	0x08003beb
 8003b90:	08003c2d 	.word	0x08003c2d
 8003b94:	08003c33 	.word	0x08003c33
 8003b98:	08003c33 	.word	0x08003c33
 8003b9c:	08003c33 	.word	0x08003c33
 8003ba0:	08003c33 	.word	0x08003c33
 8003ba4:	08003c33 	.word	0x08003c33
 8003ba8:	08003c33 	.word	0x08003c33
 8003bac:	08003c33 	.word	0x08003c33
 8003bb0:	08003c33 	.word	0x08003c33
 8003bb4:	08003c33 	.word	0x08003c33
 8003bb8:	08003c33 	.word	0x08003c33
 8003bbc:	08003c33 	.word	0x08003c33
 8003bc0:	08003c33 	.word	0x08003c33
 8003bc4:	08003c33 	.word	0x08003c33
 8003bc8:	08003be1 	.word	0x08003be1
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	4a79      	ldr	r2, [pc, #484]	; (8003db8 <HAL_GPIO_Init+0x2b4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bd6:	e02c      	b.n	8003c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	623b      	str	r3, [r7, #32]
          break;
 8003bde:	e029      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	3304      	adds	r3, #4
 8003be6:	623b      	str	r3, [r7, #32]
          break;
 8003be8:	e024      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	623b      	str	r3, [r7, #32]
          break;
 8003bf2:	e01f      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	623b      	str	r3, [r7, #32]
          break;
 8003bfc:	e01a      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c06:	2304      	movs	r3, #4
 8003c08:	623b      	str	r3, [r7, #32]
          break;
 8003c0a:	e013      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c14:	2308      	movs	r3, #8
 8003c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	611a      	str	r2, [r3, #16]
          break;
 8003c1e:	e009      	b.n	8003c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c20:	2308      	movs	r3, #8
 8003c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	615a      	str	r2, [r3, #20]
          break;
 8003c2a:	e003      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
          break;
 8003c30:	e000      	b.n	8003c34 <HAL_GPIO_Init+0x130>
          break;
 8003c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2bff      	cmp	r3, #255	; 0xff
 8003c38:	d801      	bhi.n	8003c3e <HAL_GPIO_Init+0x13a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	e001      	b.n	8003c42 <HAL_GPIO_Init+0x13e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2bff      	cmp	r3, #255	; 0xff
 8003c48:	d802      	bhi.n	8003c50 <HAL_GPIO_Init+0x14c>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	e002      	b.n	8003c56 <HAL_GPIO_Init+0x152>
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	3b08      	subs	r3, #8
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	210f      	movs	r1, #15
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	401a      	ands	r2, r3
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80b1 	beq.w	8003de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c84:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <HAL_GPIO_Init+0x2b8>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4a4c      	ldr	r2, [pc, #304]	; (8003dbc <HAL_GPIO_Init+0x2b8>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6193      	str	r3, [r2, #24]
 8003c90:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_GPIO_Init+0x2b8>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c9c:	4a48      	ldr	r2, [pc, #288]	; (8003dc0 <HAL_GPIO_Init+0x2bc>)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <HAL_GPIO_Init+0x2c0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_GPIO_Init+0x1ec>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3f      	ldr	r2, [pc, #252]	; (8003dc8 <HAL_GPIO_Init+0x2c4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00d      	beq.n	8003cec <HAL_GPIO_Init+0x1e8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3e      	ldr	r2, [pc, #248]	; (8003dcc <HAL_GPIO_Init+0x2c8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <HAL_GPIO_Init+0x1e4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3d      	ldr	r2, [pc, #244]	; (8003dd0 <HAL_GPIO_Init+0x2cc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_GPIO_Init+0x1e0>
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e006      	b.n	8003cf2 <HAL_GPIO_Init+0x1ee>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e004      	b.n	8003cf2 <HAL_GPIO_Init+0x1ee>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e002      	b.n	8003cf2 <HAL_GPIO_Init+0x1ee>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_GPIO_Init+0x1ee>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	f002 0203 	and.w	r2, r2, #3
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	4093      	lsls	r3, r2
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d02:	492f      	ldr	r1, [pc, #188]	; (8003dc0 <HAL_GPIO_Init+0x2bc>)
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	492c      	ldr	r1, [pc, #176]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d2a:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	4928      	ldr	r1, [pc, #160]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	4922      	ldr	r1, [pc, #136]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60cb      	str	r3, [r1, #12]
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	4918      	ldr	r1, [pc, #96]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	e006      	b.n	8003d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	4914      	ldr	r1, [pc, #80]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d021      	beq.n	8003dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_GPIO_Init+0x2d0>)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]
 8003da0:	e021      	b.n	8003de6 <HAL_GPIO_Init+0x2e2>
 8003da2:	bf00      	nop
 8003da4:	10320000 	.word	0x10320000
 8003da8:	10310000 	.word	0x10310000
 8003dac:	10220000 	.word	0x10220000
 8003db0:	10210000 	.word	0x10210000
 8003db4:	10120000 	.word	0x10120000
 8003db8:	10110000 	.word	0x10110000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40010800 	.word	0x40010800
 8003dc8:	40010c00 	.word	0x40010c00
 8003dcc:	40011000 	.word	0x40011000
 8003dd0:	40011400 	.word	0x40011400
 8003dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_GPIO_Init+0x304>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	4909      	ldr	r1, [pc, #36]	; (8003e08 <HAL_GPIO_Init+0x304>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	3301      	adds	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f47f ae8e 	bne.w	8003b18 <HAL_GPIO_Init+0x14>
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	372c      	adds	r7, #44	; 0x2c
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	611a      	str	r2, [r3, #16]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e272      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8087 	beq.w	8003f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e68:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d112      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
 8003e74:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d06c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x12c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d168      	bne.n	8003f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e24c      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x76>
 8003ea4:	4b80      	ldr	r3, [pc, #512]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7f      	ldr	r2, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e02e      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x98>
 8003eba:	4b7b      	ldr	r3, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7a      	ldr	r2, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a77      	ldr	r2, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xbc>
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a71      	ldr	r2, [pc, #452]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	4b6b      	ldr	r3, [pc, #428]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe fe7e 	bl	8002c18 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fe fe7a 	bl	8002c18 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e200      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe4>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fe6a 	bl	8002c18 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fe fe66 	bl	8002c18 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1ec      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x10c>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f76:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
 8003f8e:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e1c0      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4939      	ldr	r1, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	e03a      	b.n	800403e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fe1f 	bl	8002c18 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fe fe1b 	bl	8002c18 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1a1      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4927      	ldr	r1, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe fdfe 	bl	8002c18 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004020:	f7fe fdfa 	bl	8002c18 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e180      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d03a      	beq.n	80040c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fe fdde 	bl	8002c18 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004060:	f7fe fdda 	bl	8002c18 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e160      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800407e:	2001      	movs	r0, #1
 8004080:	f000 faba 	bl	80045f8 <RCC_Delay>
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408c:	f7fe fdc4 	bl	8002c18 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004094:	f7fe fdc0 	bl	8002c18 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e146      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	42420000 	.word	0x42420000
 80040b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e9      	bne.n	8004094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a6 	beq.w	800421a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d2:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a87      	ldr	r2, [pc, #540]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b82      	ldr	r3, [pc, #520]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	4b7f      	ldr	r3, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7e      	ldr	r2, [pc, #504]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004112:	f7fe fd81 	bl	8002c18 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fe fd7d 	bl	8002c18 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e103      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x312>
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6213      	str	r3, [r2, #32]
 800414c:	e02d      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x334>
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a69      	ldr	r2, [pc, #420]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a66      	ldr	r2, [pc, #408]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	e01c      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b05      	cmp	r3, #5
 8004176:	d10c      	bne.n	8004192 <HAL_RCC_OscConfig+0x356>
 8004178:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4a60      	ldr	r2, [pc, #384]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	6213      	str	r3, [r2, #32]
 8004184:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4a5d      	ldr	r2, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6213      	str	r3, [r2, #32]
 8004190:	e00b      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004192:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a5a      	ldr	r2, [pc, #360]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	4b58      	ldr	r3, [pc, #352]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d015      	beq.n	80041de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b2:	f7fe fd31 	bl	8002c18 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fe fd2d 	bl	8002c18 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0b1      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCC_OscConfig+0x37e>
 80041dc:	e014      	b.n	8004208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041de:	f7fe fd1b 	bl	8002c18 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fe fd17 	bl	8002c18 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e09b      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420e:	4b3c      	ldr	r3, [pc, #240]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8087 	beq.w	8004332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d061      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d146      	bne.n	80042c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fe fceb 	bl	8002c18 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fe fce7 	bl	8002c18 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e06d      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004258:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d108      	bne.n	8004280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4921      	ldr	r1, [pc, #132]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a19      	ldr	r1, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	491b      	ldr	r1, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fe fcbb 	bl	8002c18 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fe fcb7 	bl	8002c18 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e03d      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x46a>
 80042c4:	e035      	b.n	8004332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fe fca4 	bl	8002c18 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fe fca0 	bl	8002c18 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e026      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x498>
 80042f2:	e01e      	b.n	8004332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e019      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
 8004308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_OscConfig+0x500>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	429a      	cmp	r2, r3
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000

08004340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0d0      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d910      	bls.n	8004384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b67      	ldr	r3, [pc, #412]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4965      	ldr	r1, [pc, #404]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b8      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a58      	ldr	r2, [pc, #352]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d040      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d115      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e073      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e06b      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4936      	ldr	r1, [pc, #216]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fe fbf2 	bl	8002c18 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe fbee 	bl	8002c18 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e053      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d210      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4922      	ldr	r1, [pc, #136]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e032      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4916      	ldr	r1, [pc, #88]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f821 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490a      	ldr	r1, [pc, #40]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1cc>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fb50 	bl	8002b94 <HAL_InitTick>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40022000 	.word	0x40022000
 8004504:	40021000 	.word	0x40021000
 8004508:	08005de8 	.word	0x08005de8
 800450c:	20000004 	.word	0x20000004
 8004510:	20000008 	.word	0x20000008

08004514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d002      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x30>
 800453e:	2b08      	cmp	r3, #8
 8004540:	d003      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x36>
 8004542:	e027      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004546:	613b      	str	r3, [r7, #16]
      break;
 8004548:	e027      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0c9b      	lsrs	r3, r3, #18
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	0c5b      	lsrs	r3, r3, #17
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004576:	fb03 f202 	mul.w	r2, r3, r2
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e004      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	613b      	str	r3, [r7, #16]
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004596:	613b      	str	r3, [r7, #16]
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	693b      	ldr	r3, [r7, #16]
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	007a1200 	.word	0x007a1200
 80045b0:	08005e00 	.word	0x08005e00
 80045b4:	08005e10 	.word	0x08005e10
 80045b8:	003d0900 	.word	0x003d0900

080045bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c0:	4b02      	ldr	r3, [pc, #8]	; (80045cc <HAL_RCC_GetHCLKFreq+0x10>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	20000004 	.word	0x20000004

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d4:	f7ff fff2 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	0adb      	lsrs	r3, r3, #11
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000
 80045f4:	08005df8 	.word	0x08005df8

080045f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <RCC_Delay+0x34>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <RCC_Delay+0x38>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0a5b      	lsrs	r3, r3, #9
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004614:	bf00      	nop
  }
  while (Delay --);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e5a      	subs	r2, r3, #1
 800461a:	60fa      	str	r2, [r7, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f9      	bne.n	8004614 <RCC_Delay+0x1c>
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	20000004 	.word	0x20000004
 8004630:	10624dd3 	.word	0x10624dd3

08004634 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d07d      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004650:	2300      	movs	r3, #0
 8004652:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004654:	4b4f      	ldr	r3, [pc, #316]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10d      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	4a4b      	ldr	r2, [pc, #300]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	61d3      	str	r3, [r2, #28]
 800466c:	4b49      	ldr	r3, [pc, #292]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004678:	2301      	movs	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	4b46      	ldr	r3, [pc, #280]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d118      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004688:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a42      	ldr	r2, [pc, #264]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004694:	f7fe fac0 	bl	8002c18 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469c:	f7fe fabc 	bl	8002c18 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e06d      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d027      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ee:	4a29      	ldr	r2, [pc, #164]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d014      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fe fa8b 	bl	8002c18 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fe fa87 	bl	8002c18 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e036      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ee      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004728:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4917      	ldr	r1, [pc, #92]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	4313      	orrs	r3, r2
 8004738:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	490b      	ldr	r1, [pc, #44]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	4313      	orrs	r3, r2
 8004768:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4904      	ldr	r1, [pc, #16]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004784:	4313      	orrs	r3, r2
 8004786:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
 800479c:	42420440 	.word	0x42420440

080047a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	f200 808a 	bhi.w	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d045      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d075      	beq.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047d6:	e082      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80047d8:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047de:	4b45      	ldr	r3, [pc, #276]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d07b      	beq.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0c9b      	lsrs	r3, r3, #18
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	4a41      	ldr	r2, [pc, #260]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
 80047f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004802:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	0c5b      	lsrs	r3, r3, #17
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800481c:	4a38      	ldr	r2, [pc, #224]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fbb2 f2f3 	udiv	r2, r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e004      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4a34      	ldr	r2, [pc, #208]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004838:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004844:	d102      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	61bb      	str	r3, [r7, #24]
      break;
 800484a:	e04a      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4a2d      	ldr	r2, [pc, #180]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	61bb      	str	r3, [r7, #24]
      break;
 800485a:	e042      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486c:	d108      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e01f      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488a:	d109      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004898:	f649 4340 	movw	r3, #40000	; 0x9c40
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e00f      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048aa:	d11c      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d016      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80048b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048bc:	61bb      	str	r3, [r7, #24]
      break;
 80048be:	e012      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80048c0:	e011      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80048c2:	f7ff fe85 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	0b9b      	lsrs	r3, r3, #14
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	61bb      	str	r3, [r7, #24]
      break;
 80048dc:	e004      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048e6:	bf00      	nop
    }
  }
  return (frequency);
 80048e8:	69bb      	ldr	r3, [r7, #24]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08005e14 	.word	0x08005e14
 80048fc:	08005e24 	.word	0x08005e24
 8004900:	007a1200 	.word	0x007a1200
 8004904:	003d0900 	.word	0x003d0900
 8004908:	aaaaaaab 	.word	0xaaaaaaab

0800490c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e076      	b.n	8004a0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d108      	bne.n	8004938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492e:	d009      	beq.n	8004944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	61da      	str	r2, [r3, #28]
 8004936:	e005      	b.n	8004944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd fd2c 	bl	80023bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	0c1a      	lsrs	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f002 0204 	and.w	r2, r2, #4
 80049ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e041      	b.n	8004aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fe f81e 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fd60 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e03a      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIM_Base_Start_IT+0x98>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d010      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e007      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800

08004b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e041      	b.n	8004bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd ff56 	bl	8002a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 fcbe 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_TIM_PWM_Start+0x24>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e022      	b.n	8004c62 <HAL_TIM_PWM_Start+0x6a>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d109      	bne.n	8004c36 <HAL_TIM_PWM_Start+0x3e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e015      	b.n	8004c62 <HAL_TIM_PWM_Start+0x6a>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d109      	bne.n	8004c50 <HAL_TIM_PWM_Start+0x58>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e008      	b.n	8004c62 <HAL_TIM_PWM_Start+0x6a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e05e      	b.n	8004d28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x82>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c78:	e013      	b.n	8004ca2 <HAL_TIM_PWM_Start+0xaa>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0x92>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c88:	e00b      	b.n	8004ca2 <HAL_TIM_PWM_Start+0xaa>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_PWM_Start+0xa2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	e003      	b.n	8004ca2 <HAL_TIM_PWM_Start+0xaa>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 feb4 	bl	8005a18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_TIM_PWM_Start+0x138>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d107      	bne.n	8004cca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_TIM_PWM_Start+0x138>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0xfa>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0xfa>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a14      	ldr	r2, [pc, #80]	; (8004d34 <HAL_TIM_PWM_Start+0x13c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0xfa>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_TIM_PWM_Start+0x140>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d111      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d010      	beq.n	8004d26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	e007      	b.n	8004d26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800

08004d3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e093      	b.n	8004e78 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fd fdf9 	bl	800295c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f000 fbc1 	bl	8005518 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ddc:	f023 030c 	bic.w	r3, r3, #12
 8004de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	011a      	lsls	r2, r3, #4
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	031b      	lsls	r3, r3, #12
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4313      	orrs	r3, r2
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ea8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb6:	7b7b      	ldrb	r3, [r7, #13]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e069      	b.n	8004f94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed0:	e031      	b.n	8004f36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d110      	bne.n	8004efa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d102      	bne.n	8004ee4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ede:	7b3b      	ldrb	r3, [r7, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d001      	beq.n	8004ee8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e055      	b.n	8004f94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef8:	e01d      	b.n	8004f36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d108      	bne.n	8004f12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f06:	7b7b      	ldrb	r3, [r7, #13]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d102      	bne.n	8004f12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f0c:	7b3b      	ldrb	r3, [r7, #12]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03e      	b.n	8004f94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_TIM_Encoder_Start+0xc4>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d008      	beq.n	8004f54 <HAL_TIM_Encoder_Start+0xd4>
 8004f42:	e00f      	b.n	8004f64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fd63 	bl	8005a18 <TIM_CCxChannelCmd>
      break;
 8004f52:	e016      	b.n	8004f82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fd5b 	bl	8005a18 <TIM_CCxChannelCmd>
      break;
 8004f62:	e00e      	b.n	8004f82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fd53 	bl	8005a18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	2104      	movs	r1, #4
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fd4c 	bl	8005a18 <TIM_CCxChannelCmd>
      break;
 8004f80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d122      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0202 	mvn.w	r2, #2
 8004fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa7f 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa72 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fa81 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b04      	cmp	r3, #4
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0204 	mvn.w	r2, #4
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa55 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa48 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa57 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b08      	cmp	r3, #8
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0208 	mvn.w	r2, #8
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2204      	movs	r2, #4
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa2b 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa1e 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa2d 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0210 	mvn.w	r2, #16
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2208      	movs	r2, #8
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa01 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9f4 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fa03 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10e      	bne.n	8005120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0201 	mvn.w	r2, #1
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f9cf 	bl	80054be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d10e      	bne.n	800514c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005138:	2b80      	cmp	r3, #128	; 0x80
 800513a:	d107      	bne.n	800514c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fcf1 	bl	8005b2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d107      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f9c7 	bl	8005506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b20      	cmp	r3, #32
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b20      	cmp	r3, #32
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0220 	mvn.w	r2, #32
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fcbc 	bl	8005b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0ae      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	f200 809f 	bhi.w	8005318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005215 	.word	0x08005215
 80051e4:	08005319 	.word	0x08005319
 80051e8:	08005319 	.word	0x08005319
 80051ec:	08005319 	.word	0x08005319
 80051f0:	08005255 	.word	0x08005255
 80051f4:	08005319 	.word	0x08005319
 80051f8:	08005319 	.word	0x08005319
 80051fc:	08005319 	.word	0x08005319
 8005200:	08005297 	.word	0x08005297
 8005204:	08005319 	.word	0x08005319
 8005208:	08005319 	.word	0x08005319
 800520c:	08005319 	.word	0x08005319
 8005210:	080052d7 	.word	0x080052d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f9de 	bl	80055dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0208 	orr.w	r2, r2, #8
 800522e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0204 	bic.w	r2, r2, #4
 800523e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6999      	ldr	r1, [r3, #24]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	619a      	str	r2, [r3, #24]
      break;
 8005252:	e064      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fa24 	bl	80056a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6999      	ldr	r1, [r3, #24]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	021a      	lsls	r2, r3, #8
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	619a      	str	r2, [r3, #24]
      break;
 8005294:	e043      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fa6d 	bl	800577c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0208 	orr.w	r2, r2, #8
 80052b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0204 	bic.w	r2, r2, #4
 80052c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69d9      	ldr	r1, [r3, #28]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	61da      	str	r2, [r3, #28]
      break;
 80052d4:	e023      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fab7 	bl	8005850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69d9      	ldr	r1, [r3, #28]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	021a      	lsls	r2, r3, #8
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	61da      	str	r2, [r3, #28]
      break;
 8005316:	e002      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
      break;
 800531c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIM_ConfigClockSource+0x1c>
 8005348:	2302      	movs	r3, #2
 800534a:	e0b4      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x186>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800536a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005384:	d03e      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0xd4>
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	f200 8087 	bhi.w	800549c <HAL_TIM_ConfigClockSource+0x16c>
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	f000 8086 	beq.w	80054a2 <HAL_TIM_ConfigClockSource+0x172>
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d87f      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d01a      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0xa6>
 80053a0:	2b70      	cmp	r3, #112	; 0x70
 80053a2:	d87b      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d050      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x11a>
 80053a8:	2b60      	cmp	r3, #96	; 0x60
 80053aa:	d877      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b50      	cmp	r3, #80	; 0x50
 80053ae:	d03c      	beq.n	800542a <HAL_TIM_ConfigClockSource+0xfa>
 80053b0:	2b50      	cmp	r3, #80	; 0x50
 80053b2:	d873      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d058      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x13a>
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d86f      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d064      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	2b30      	cmp	r3, #48	; 0x30
 80053c2:	d86b      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d060      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d867      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05c      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d05a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053d4:	e062      	b.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e6:	f000 faf8 	bl	80059da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	609a      	str	r2, [r3, #8]
      break;
 8005402:	e04f      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005414:	f000 fae1 	bl	80059da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005426:	609a      	str	r2, [r3, #8]
      break;
 8005428:	e03c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005436:	461a      	mov	r2, r3
 8005438:	f000 fa58 	bl	80058ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2150      	movs	r1, #80	; 0x50
 8005442:	4618      	mov	r0, r3
 8005444:	f000 faaf 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005448:	e02c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005456:	461a      	mov	r2, r3
 8005458:	f000 fa76 	bl	8005948 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2160      	movs	r1, #96	; 0x60
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fa9f 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005468:	e01c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005476:	461a      	mov	r2, r3
 8005478:	f000 fa38 	bl	80058ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2140      	movs	r1, #64	; 0x40
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa8f 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005488:	e00c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f000 fa86 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 800549a:	e003      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      break;
 80054a0:	e000      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a29      	ldr	r2, [pc, #164]	; (80055d0 <TIM_Base_SetConfig+0xb8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_Base_SetConfig+0x30>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005536:	d007      	beq.n	8005548 <TIM_Base_SetConfig+0x30>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <TIM_Base_SetConfig+0xbc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_Base_SetConfig+0x30>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <TIM_Base_SetConfig+0xc0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <TIM_Base_SetConfig+0xb8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0x62>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <TIM_Base_SetConfig+0xbc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0x62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <TIM_Base_SetConfig+0xc0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <TIM_Base_SetConfig+0xb8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d103      	bne.n	80055c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	615a      	str	r2, [r3, #20]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800

080055dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f023 0201 	bic.w	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 0302 	bic.w	r3, r3, #2
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <TIM_OC1_SetConfig+0xc8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10c      	bne.n	8005652 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0308 	bic.w	r3, r3, #8
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <TIM_OC1_SetConfig+0xc8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d111      	bne.n	800567e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40012c00 	.word	0x40012c00

080056a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 0210 	bic.w	r2, r3, #16
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0320 	bic.w	r3, r3, #32
 80056f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <TIM_OC2_SetConfig+0xd0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d10d      	bne.n	8005724 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800570e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a14      	ldr	r2, [pc, #80]	; (8005778 <TIM_OC2_SetConfig+0xd0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d113      	bne.n	8005754 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00

0800577c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1d      	ldr	r2, [pc, #116]	; (800584c <TIM_OC3_SetConfig+0xd0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10d      	bne.n	80057f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a14      	ldr	r2, [pc, #80]	; (800584c <TIM_OC3_SetConfig+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d113      	bne.n	8005826 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00

08005850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800589a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	031b      	lsls	r3, r3, #12
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <TIM_OC4_SetConfig+0x98>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d109      	bne.n	80058c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00

080058ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0201 	bic.w	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 030a 	bic.w	r3, r3, #10
 8005928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0210 	bic.w	r2, r3, #16
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	031b      	lsls	r3, r3, #12
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005984:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	621a      	str	r2, [r3, #32]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f043 0307 	orr.w	r3, r3, #7
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059da:	b480      	push	{r7}
 80059dc:	b087      	sub	sp, #28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
 80059e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	021a      	lsls	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	609a      	str	r2, [r3, #8]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1a      	ldr	r2, [r3, #32]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e046      	b.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00e      	beq.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac4:	d009      	beq.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d10c      	bne.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800

08005b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <malloc>:
 8005b40:	4b02      	ldr	r3, [pc, #8]	; (8005b4c <malloc+0xc>)
 8005b42:	4601      	mov	r1, r0
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f000 b82b 	b.w	8005ba0 <_malloc_r>
 8005b4a:	bf00      	nop
 8005b4c:	2000005c 	.word	0x2000005c

08005b50 <free>:
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <free+0xc>)
 8005b52:	4601      	mov	r1, r0
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	f000 b8f3 	b.w	8005d40 <_free_r>
 8005b5a:	bf00      	nop
 8005b5c:	2000005c 	.word	0x2000005c

08005b60 <sbrk_aligned>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	4e0e      	ldr	r6, [pc, #56]	; (8005b9c <sbrk_aligned+0x3c>)
 8005b64:	460c      	mov	r4, r1
 8005b66:	6831      	ldr	r1, [r6, #0]
 8005b68:	4605      	mov	r5, r0
 8005b6a:	b911      	cbnz	r1, 8005b72 <sbrk_aligned+0x12>
 8005b6c:	f000 f8ac 	bl	8005cc8 <_sbrk_r>
 8005b70:	6030      	str	r0, [r6, #0]
 8005b72:	4621      	mov	r1, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 f8a7 	bl	8005cc8 <_sbrk_r>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	d00a      	beq.n	8005b94 <sbrk_aligned+0x34>
 8005b7e:	1cc4      	adds	r4, r0, #3
 8005b80:	f024 0403 	bic.w	r4, r4, #3
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	d007      	beq.n	8005b98 <sbrk_aligned+0x38>
 8005b88:	1a21      	subs	r1, r4, r0
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f000 f89c 	bl	8005cc8 <_sbrk_r>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d101      	bne.n	8005b98 <sbrk_aligned+0x38>
 8005b94:	f04f 34ff 	mov.w	r4, #4294967295
 8005b98:	4620      	mov	r0, r4
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	200004e0 	.word	0x200004e0

08005ba0 <_malloc_r>:
 8005ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	1ccd      	adds	r5, r1, #3
 8005ba6:	f025 0503 	bic.w	r5, r5, #3
 8005baa:	3508      	adds	r5, #8
 8005bac:	2d0c      	cmp	r5, #12
 8005bae:	bf38      	it	cc
 8005bb0:	250c      	movcc	r5, #12
 8005bb2:	2d00      	cmp	r5, #0
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	db01      	blt.n	8005bbc <_malloc_r+0x1c>
 8005bb8:	42a9      	cmp	r1, r5
 8005bba:	d905      	bls.n	8005bc8 <_malloc_r+0x28>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c9c <_malloc_r+0xfc>
 8005bcc:	f000 f868 	bl	8005ca0 <__malloc_lock>
 8005bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd4:	461c      	mov	r4, r3
 8005bd6:	bb5c      	cbnz	r4, 8005c30 <_malloc_r+0x90>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f7ff ffc0 	bl	8005b60 <sbrk_aligned>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	4604      	mov	r4, r0
 8005be4:	d155      	bne.n	8005c92 <_malloc_r+0xf2>
 8005be6:	f8d8 4000 	ldr.w	r4, [r8]
 8005bea:	4626      	mov	r6, r4
 8005bec:	2e00      	cmp	r6, #0
 8005bee:	d145      	bne.n	8005c7c <_malloc_r+0xdc>
 8005bf0:	2c00      	cmp	r4, #0
 8005bf2:	d048      	beq.n	8005c86 <_malloc_r+0xe6>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	eb04 0903 	add.w	r9, r4, r3
 8005bfe:	f000 f863 	bl	8005cc8 <_sbrk_r>
 8005c02:	4581      	cmp	r9, r0
 8005c04:	d13f      	bne.n	8005c86 <_malloc_r+0xe6>
 8005c06:	6821      	ldr	r1, [r4, #0]
 8005c08:	4638      	mov	r0, r7
 8005c0a:	1a6d      	subs	r5, r5, r1
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7ff ffa7 	bl	8005b60 <sbrk_aligned>
 8005c12:	3001      	adds	r0, #1
 8005c14:	d037      	beq.n	8005c86 <_malloc_r+0xe6>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	442b      	add	r3, r5
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d038      	beq.n	8005c96 <_malloc_r+0xf6>
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	42a2      	cmp	r2, r4
 8005c28:	d12b      	bne.n	8005c82 <_malloc_r+0xe2>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e00f      	b.n	8005c50 <_malloc_r+0xb0>
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	1b52      	subs	r2, r2, r5
 8005c34:	d41f      	bmi.n	8005c76 <_malloc_r+0xd6>
 8005c36:	2a0b      	cmp	r2, #11
 8005c38:	d917      	bls.n	8005c6a <_malloc_r+0xca>
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	6025      	str	r5, [r4, #0]
 8005c40:	bf18      	it	ne
 8005c42:	6059      	strne	r1, [r3, #4]
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	bf08      	it	eq
 8005c48:	f8c8 1000 	streq.w	r1, [r8]
 8005c4c:	5162      	str	r2, [r4, r5]
 8005c4e:	604b      	str	r3, [r1, #4]
 8005c50:	4638      	mov	r0, r7
 8005c52:	f104 060b 	add.w	r6, r4, #11
 8005c56:	f000 f829 	bl	8005cac <__malloc_unlock>
 8005c5a:	f026 0607 	bic.w	r6, r6, #7
 8005c5e:	1d23      	adds	r3, r4, #4
 8005c60:	1af2      	subs	r2, r6, r3
 8005c62:	d0ae      	beq.n	8005bc2 <_malloc_r+0x22>
 8005c64:	1b9b      	subs	r3, r3, r6
 8005c66:	50a3      	str	r3, [r4, r2]
 8005c68:	e7ab      	b.n	8005bc2 <_malloc_r+0x22>
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	6862      	ldr	r2, [r4, #4]
 8005c6e:	d1dd      	bne.n	8005c2c <_malloc_r+0x8c>
 8005c70:	f8c8 2000 	str.w	r2, [r8]
 8005c74:	e7ec      	b.n	8005c50 <_malloc_r+0xb0>
 8005c76:	4623      	mov	r3, r4
 8005c78:	6864      	ldr	r4, [r4, #4]
 8005c7a:	e7ac      	b.n	8005bd6 <_malloc_r+0x36>
 8005c7c:	4634      	mov	r4, r6
 8005c7e:	6876      	ldr	r6, [r6, #4]
 8005c80:	e7b4      	b.n	8005bec <_malloc_r+0x4c>
 8005c82:	4613      	mov	r3, r2
 8005c84:	e7cc      	b.n	8005c20 <_malloc_r+0x80>
 8005c86:	230c      	movs	r3, #12
 8005c88:	4638      	mov	r0, r7
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	f000 f80e 	bl	8005cac <__malloc_unlock>
 8005c90:	e797      	b.n	8005bc2 <_malloc_r+0x22>
 8005c92:	6025      	str	r5, [r4, #0]
 8005c94:	e7dc      	b.n	8005c50 <_malloc_r+0xb0>
 8005c96:	605b      	str	r3, [r3, #4]
 8005c98:	deff      	udf	#255	; 0xff
 8005c9a:	bf00      	nop
 8005c9c:	200004dc 	.word	0x200004dc

08005ca0 <__malloc_lock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__malloc_lock+0x8>)
 8005ca2:	f000 b84b 	b.w	8005d3c <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000620 	.word	0x20000620

08005cac <__malloc_unlock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__malloc_unlock+0x8>)
 8005cae:	f000 b846 	b.w	8005d3e <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20000620 	.word	0x20000620

08005cb8 <memset>:
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4402      	add	r2, r0
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <memset+0xa>
 8005cc0:	4770      	bx	lr
 8005cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc6:	e7f9      	b.n	8005cbc <memset+0x4>

08005cc8 <_sbrk_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	2300      	movs	r3, #0
 8005ccc:	4d05      	ldr	r5, [pc, #20]	; (8005ce4 <_sbrk_r+0x1c>)
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fc fca8 	bl	8002628 <_sbrk>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_sbrk_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_sbrk_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	2000061c 	.word	0x2000061c

08005ce8 <__errno>:
 8005ce8:	4b01      	ldr	r3, [pc, #4]	; (8005cf0 <__errno+0x8>)
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	2000005c 	.word	0x2000005c

08005cf4 <__libc_init_array>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	4d0c      	ldr	r5, [pc, #48]	; (8005d2c <__libc_init_array+0x38>)
 8005cfa:	4c0d      	ldr	r4, [pc, #52]	; (8005d30 <__libc_init_array+0x3c>)
 8005cfc:	1b64      	subs	r4, r4, r5
 8005cfe:	10a4      	asrs	r4, r4, #2
 8005d00:	42a6      	cmp	r6, r4
 8005d02:	d109      	bne.n	8005d18 <__libc_init_array+0x24>
 8005d04:	f000 f864 	bl	8005dd0 <_init>
 8005d08:	2600      	movs	r6, #0
 8005d0a:	4d0a      	ldr	r5, [pc, #40]	; (8005d34 <__libc_init_array+0x40>)
 8005d0c:	4c0a      	ldr	r4, [pc, #40]	; (8005d38 <__libc_init_array+0x44>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	42a6      	cmp	r6, r4
 8005d14:	d105      	bne.n	8005d22 <__libc_init_array+0x2e>
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1c:	4798      	blx	r3
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7ee      	b.n	8005d00 <__libc_init_array+0xc>
 8005d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d26:	4798      	blx	r3
 8005d28:	3601      	adds	r6, #1
 8005d2a:	e7f2      	b.n	8005d12 <__libc_init_array+0x1e>
 8005d2c:	08005e28 	.word	0x08005e28
 8005d30:	08005e28 	.word	0x08005e28
 8005d34:	08005e28 	.word	0x08005e28
 8005d38:	08005e2c 	.word	0x08005e2c

08005d3c <__retarget_lock_acquire_recursive>:
 8005d3c:	4770      	bx	lr

08005d3e <__retarget_lock_release_recursive>:
 8005d3e:	4770      	bx	lr

08005d40 <_free_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d040      	beq.n	8005dca <_free_r+0x8a>
 8005d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfb8      	it	lt
 8005d52:	18e4      	addlt	r4, r4, r3
 8005d54:	f7ff ffa4 	bl	8005ca0 <__malloc_lock>
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <_free_r+0x8c>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x2c>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	4628      	mov	r0, r5
 8005d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d68:	f7ff bfa0 	b.w	8005cac <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x42>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	1821      	adds	r1, r4, r0
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1809      	addeq	r1, r1, r0
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x1e>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x4c>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x42>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1850      	adds	r0, r2, r1
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x6c>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	4401      	add	r1, r0
 8005d98:	1850      	adds	r0, r2, r1
 8005d9a:	4283      	cmp	r3, r0
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x22>
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4408      	add	r0, r1
 8005da6:	6010      	str	r0, [r2, #0]
 8005da8:	6053      	str	r3, [r2, #4]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x22>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x74>
 8005dae:	230c      	movs	r3, #12
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x22>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	1821      	adds	r1, r4, r0
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf01      	itttt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	1809      	addeq	r1, r1, r0
 8005dc2:	6021      	streq	r1, [r4, #0]
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	6054      	str	r4, [r2, #4]
 8005dc8:	e7cb      	b.n	8005d62 <_free_r+0x22>
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	200004dc 	.word	0x200004dc

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr
